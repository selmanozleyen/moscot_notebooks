
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plotting/ex_sankey.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plotting_ex_sankey.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plotting_ex_sankey.py:


Plotting Sankey diagrams
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 8-10

In this notebook, we will showcase how to use :meth:`moscot.plotting.sankey`.
We use the HSPC dataset to demonstrate the usage.

.. GENERATED FROM PYTHON SOURCE LINES 10-17

.. code-block:: default


    from moscot.datasets import hspc
    from moscot.problems.time import TemporalProblem
    import moscot.plotting as mpl

    adata = hspc()








.. GENERATED FROM PYTHON SOURCE LINES 18-21

First, we need to prepare and solve the problem. Here, we set the `threshold`
parameter to a relative high value to speed up convergence at the cost of
lower quality.

.. GENERATED FROM PYTHON SOURCE LINES 21-24

.. code-block:: default


    tp = TemporalProblem(adata).prepare(time_key="day").solve(epsilon=1e-2, threshold=1e-2)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Solving problem BirthDeathProblem[stage='prepared', shape=(766, 1235)].
    INFO     Solving problem BirthDeathProblem[stage='prepared', shape=(1235,       
             1201)].                                                                
    INFO     Solving problem BirthDeathProblem[stage='prepared', shape=(1201, 798)].




.. GENERATED FROM PYTHON SOURCE LINES 25-36

As for all plotting functionalities in moscot, we first call the method of
the problem class, which stores the results of the computation in the
:class:`anndata.AnnData` instance. Let us assume we want to plot the Sankey diagram
across all time points 2, 3, 4, and 7. Moreover, we want the Sankey diagram
to visualize flows between cell types. In general, we can visualize the flow defined
by any column in :attr:`anndata.AnnData.obs` via the `source_groups` parameter and
the `target_groups` parameter, respectively. In this example, we are interested in
descendants as opposed to ancestors, which is why we choose `forward` to be `True`.
The information required to plot the Sankey diagram is provided in transition matrices,
which we would obtain by `return_data` to `True`. Here, we are only interested in the
visualization.

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default


    tp.sankey(source=2, target=7, source_groups="cell_type", target_groups="cell_type", forward=True, return_data=False)








.. GENERATED FROM PYTHON SOURCE LINES 40-44

Having called the `sankey` method of the problem instance, we now pass the result
to the :mod:`moscot.plotting` module.
Therefore, we can either pass the :class:`anndata.AnnData` instance or the problem
instance. We can set the size of the figure via `dpi` and set a title via `title`.

.. GENERATED FROM PYTHON SOURCE LINES 44-47

.. code-block:: default


    mpl.sankey(tp, dpi=100, title="Cell type evolution over time")




.. image-sg:: /auto_examples/plotting/images/sphx_glr_ex_sankey_001.png
   :alt: Cell type evolution over time
   :srcset: /auto_examples/plotting/images/sphx_glr_ex_sankey_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 48-52

By default, the result of the `sankey` method of a problem instance is saved
`anndata.AnnData.uns['moscot_results']['sankey']['sankey'] and overrides
this element every time the method is called. To prevent this, we can specify the parameter
`key_added`, which we will do to store the results of the following use case.

.. GENERATED FROM PYTHON SOURCE LINES 54-56

We can also visualize flows of only a subset of categories of an :attr:`anndata.AnnData.obs` column
by passing a dictionary for `source_groups` or `target_groups`.

.. GENERATED FROM PYTHON SOURCE LINES 56-67

.. code-block:: default

    new_key = "subset_sankey"
    tp.sankey(
        source=2,
        target=7,
        source_groups={"cell_type": ["HSC", "MasP", "MkP"]},
        target_groups={"cell_type": ["HSC", "MasP", "MkP"]},
        forward=True,
        return_data=False,
        key_added=new_key,
    )
    mpl.sankey(tp, dpi=100, title="Cell type evolution over time", uns_key=new_key)



.. image-sg:: /auto_examples/plotting/images/sphx_glr_ex_sankey_002.png
   :alt: Cell type evolution over time
   :srcset: /auto_examples/plotting/images/sphx_glr_ex_sankey_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  24.680 seconds)

**Estimated memory usage:**  161 MB


.. _sphx_glr_download_auto_examples_plotting_ex_sankey.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ex_sankey.py <ex_sankey.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ex_sankey.ipynb <ex_sankey.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
