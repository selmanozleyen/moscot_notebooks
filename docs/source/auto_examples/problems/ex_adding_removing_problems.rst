
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/problems/ex_adding_removing_problems.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_problems_ex_adding_removing_problems.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_problems_ex_adding_removing_problems.py:


Adding and removing problems
----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 8-13

This notebook demonstrates how to add or remove single problems.

Adding a single problem can be useful for fine tuning, and is sometimes needed
for certain downstream functions, e.g. for
:meth:`moscot.problems.time.TemporalProblem.compute_interpolated_distance`.

.. GENERATED FROM PYTHON SOURCE LINES 13-20

.. code-block:: default


    from moscot.datasets import simulate_data
    from moscot.problems.time import TemporalProblem

    adata = simulate_data(n_distributions=4, key="day")
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/moscot/datasets/_datasets.py:214: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      AnnData(
    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1785: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      [AnnData(sparse.csr_matrix(a.shape), obs=a.obs) for a in all_adatas],

    AnnData object with n_obs × n_vars = 80 × 60
        obs: 'day', 'celltype'



.. GENERATED FROM PYTHON SOURCE LINES 21-22

Let's prepare and solve the problem.

.. GENERATED FROM PYTHON SOURCE LINES 22-28

.. code-block:: default


    tp = TemporalProblem(adata).prepare(time_key="day").solve(epsilon=1e-2)

    for k in tp.problems.keys():
        print(f"key: {k}", f"solutions: {tp.problems[k].solution}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Solving problem BirthDeathProblem[stage='prepared', shape=(20, 20)].   
    INFO     Solving problem BirthDeathProblem[stage='prepared', shape=(20, 20)].   
    INFO     Solving problem BirthDeathProblem[stage='prepared', shape=(20, 20)].   
    key: (0, 1) solutions: OTTOutput[shape=(20, 20), cost=0.7932, converged=True]
    key: (1, 2) solutions: OTTOutput[shape=(20, 20), cost=0.7934, converged=True]
    key: (2, 3) solutions: OTTOutput[shape=(20, 20), cost=0.7923, converged=True]




.. GENERATED FROM PYTHON SOURCE LINES 29-34

Let's say we now want to solve one of the problems again,
for examples because the solver did not converge, or we simply want to try
different parameters. Let's say we want to try unbalancedness for the map between
day 2 and day 3.
Hence, we copy the single problem and solve it again.

.. GENERATED FROM PYTHON SOURCE LINES 34-40

.. code-block:: default


    key = (2, 3)
    extracted_problem = tp.problems[key]
    extracted_problem = extracted_problem.solve(epsilon=1e-2, tau_a=0.95, tau_b=0.95)
    extracted_problem.solution





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    OTTOutput[shape=(20, 20), cost=0.39, converged=True]



.. GENERATED FROM PYTHON SOURCE LINES 41-43

Now we are happy with the solution and add the extracted problem back to the
:class:`moscot.problems.time.TemporalProblem` class.

.. GENERATED FROM PYTHON SOURCE LINES 43-48

.. code-block:: default


    tp = tp.add_problem((2, 3), extracted_problem, overwrite=True)
    for k in tp.problems.keys():
        print(f"key: {k}", f"solutions: {tp.problems[k].solution}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    key: (0, 1) solutions: OTTOutput[shape=(20, 20), cost=0.7932, converged=True]
    key: (1, 2) solutions: OTTOutput[shape=(20, 20), cost=0.7934, converged=True]
    key: (2, 3) solutions: OTTOutput[shape=(20, 20), cost=0.39, converged=True]




.. GENERATED FROM PYTHON SOURCE LINES 49-50

In TODO link different_policies the use of different policies are explained.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.992 seconds)

**Estimated memory usage:**  10 MB


.. _sphx_glr_download_auto_examples_problems_ex_adding_removing_problems.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ex_adding_removing_problems.py <ex_adding_removing_problems.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ex_adding_removing_problems.ipynb <ex_adding_removing_problems.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
