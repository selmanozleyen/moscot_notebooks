
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/problems/ex_different_policies.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_problems_ex_different_policies.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_problems_ex_different_policies.py:


Using different policies
------------------------

.. GENERATED FROM PYTHON SOURCE LINES 8-18

This example shows how to use different policies.

A policy is the rule which sets of transport maps are computed given different distributions of cells.

Some problem classes require a certain policy, e.g. the :class:`moscot.solvers.space.MappingProblem`
only works with the :class:`moscot.solvers._subset_policy.ExternalStarPolicy` meaning that all spatial
batches from the :class:`anndata.AnnData` object are mapped to the same single cell reference cell distribution.

Each problem class has a set of valid policies. For the :class:`moscot.solvers.time.LineageProblem` and the
:class:`moscot.solvers.time.TemporalProblem` we can choose among different policies which we demonstrate below.

.. GENERATED FROM PYTHON SOURCE LINES 18-26

.. code-block:: default



    from moscot.datasets import simulate_data
    from moscot.problems.time import TemporalProblem

    adata = simulate_data(n_distributions=8, key="day")
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/moscot/datasets/_datasets.py:214: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      AnnData(
    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1785: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      [AnnData(sparse.csr_matrix(a.shape), obs=a.obs) for a in all_adatas],

    AnnData object with n_obs × n_vars = 160 × 60
        obs: 'day', 'celltype'



.. GENERATED FROM PYTHON SOURCE LINES 27-30

This simulated dataset contains single cell data across 8 time points, i.e. day 0-8.

The policy allows us to determine which transport maps we want to compute.

.. GENERATED FROM PYTHON SOURCE LINES 32-34

Different policies
******************

.. GENERATED FROM PYTHON SOURCE LINES 34-38

.. code-block:: default


    # In the following, we consider a few policies which can be used for the
    # :class:`moscot.solvers.time.TemporalProblem`.








.. GENERATED FROM PYTHON SOURCE LINES 39-41

Sequential policy
~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 43-45

We start with the default policy, which is the sequential policy.
The following code shows which OT problems are prepared to be solved.

.. GENERATED FROM PYTHON SOURCE LINES 45-50

.. code-block:: default


    tp_sequential = TemporalProblem(adata)
    tp_sequential = tp_sequential.prepare(time_key="day", policy="sequential")
    tp_sequential.problems





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        

    {(0, 1): BirthDeathProblem[stage='prepared', shape=(20, 20)], (1, 2): BirthDeathProblem[stage='prepared', shape=(20, 20)], (3, 4): BirthDeathProblem[stage='prepared', shape=(20, 20)], (2, 3): BirthDeathProblem[stage='prepared', shape=(20, 20)], (6, 7): BirthDeathProblem[stage='prepared', shape=(20, 20)], (4, 5): BirthDeathProblem[stage='prepared', shape=(20, 20)], (5, 6): BirthDeathProblem[stage='prepared', shape=(20, 20)]}



.. GENERATED FROM PYTHON SOURCE LINES 51-52

We see that all consecutive pairs of values in the `time_key` column are used to create an OT problem

.. GENERATED FROM PYTHON SOURCE LINES 54-56

Upper triangular policy
~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 56-61

.. code-block:: default


    tp_triu = TemporalProblem(adata)
    tp_triu = tp_triu.prepare(time_key="day", policy="triu")
    tp_triu.problems





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        

    {(3, 4): BirthDeathProblem[stage='prepared', shape=(20, 20)], (3, 7): BirthDeathProblem[stage='prepared', shape=(20, 20)], (4, 6): BirthDeathProblem[stage='prepared', shape=(20, 20)], (5, 7): BirthDeathProblem[stage='prepared', shape=(20, 20)], (0, 2): BirthDeathProblem[stage='prepared', shape=(20, 20)], (0, 5): BirthDeathProblem[stage='prepared', shape=(20, 20)], (1, 6): BirthDeathProblem[stage='prepared', shape=(20, 20)], (2, 5): BirthDeathProblem[stage='prepared', shape=(20, 20)], (1, 3): BirthDeathProblem[stage='prepared', shape=(20, 20)], (4, 5): BirthDeathProblem[stage='prepared', shape=(20, 20)], (5, 6): BirthDeathProblem[stage='prepared', shape=(20, 20)], (3, 6): BirthDeathProblem[stage='prepared', shape=(20, 20)], (0, 1): BirthDeathProblem[stage='prepared', shape=(20, 20)], (0, 7): BirthDeathProblem[stage='prepared', shape=(20, 20)], (2, 4): BirthDeathProblem[stage='prepared', shape=(20, 20)], (1, 2): BirthDeathProblem[stage='prepared', shape=(20, 20)], (0, 4): BirthDeathProblem[stage='prepared', shape=(20, 20)], (2, 7): BirthDeathProblem[stage='prepared', shape=(20, 20)], (1, 5): BirthDeathProblem[stage='prepared', shape=(20, 20)], (6, 7): BirthDeathProblem[stage='prepared', shape=(20, 20)], (4, 7): BirthDeathProblem[stage='prepared', shape=(20, 20)], (3, 5): BirthDeathProblem[stage='prepared', shape=(20, 20)], (0, 3): BirthDeathProblem[stage='prepared', shape=(20, 20)], (1, 4): BirthDeathProblem[stage='prepared', shape=(20, 20)], (0, 6): BirthDeathProblem[stage='prepared', shape=(20, 20)], (2, 3): BirthDeathProblem[stage='prepared', shape=(20, 20)], (1, 7): BirthDeathProblem[stage='prepared', shape=(20, 20)], (2, 6): BirthDeathProblem[stage='prepared', shape=(20, 20)]}



.. GENERATED FROM PYTHON SOURCE LINES 62-64

Explicit policy
~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 64-69

.. code-block:: default


    tp_expl = TemporalProblem(adata)
    tp_expl = tp_expl.prepare(time_key="day", policy="explicit", subset=[(0, 1), (1, 3), (4, 9)])
    tp_expl.problems





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        

    {(0, 1): BirthDeathProblem[stage='prepared', shape=(20, 20)], (1, 3): BirthDeathProblem[stage='prepared', shape=(20, 20)]}



.. GENERATED FROM PYTHON SOURCE LINES 70-71

In TODO link other notebooks


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.852 seconds)

**Estimated memory usage:**  9 MB


.. _sphx_glr_download_auto_examples_problems_ex_different_policies.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ex_different_policies.py <ex_different_policies.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ex_different_policies.ipynb <ex_different_policies.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
