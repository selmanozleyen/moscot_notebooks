
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/problems/ex_use_leaf_distance.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_problems_ex_use_leaf_distance.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_problems_ex_use_leaf_distance.py:


Passing lineage trees as cost
-----------------------------

.. GENERATED FROM PYTHON SOURCE LINES 8-15

This notebook demonstrates how lineage trees can be passed, specifically
useful for the :class:`moscot.problems.time.LineageProblem`.

The :class:`moscot.problems.time.LineageProblem` requires lineage information.
:mod:`moscot` allows this in three way: by passing precomputed cost matrices,
by passing barcodes or by passing a lineage tree as a :class:`networkx.DiGraph`.
In this notebook, we consider the lineage tree case.

.. GENERATED FROM PYTHON SOURCE LINES 15-22

.. code-block:: default


    from moscot.datasets import simulate_data
    from moscot.problems.time import LineageProblem

    adata = simulate_data(n_distributions=3, key="day", quad_term="tree")
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/moscot/datasets/_datasets.py:214: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      AnnData(
    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1785: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      [AnnData(sparse.csr_matrix(a.shape), obs=a.obs) for a in all_adatas],

    AnnData object with n_obs × n_vars = 60 × 60
        obs: 'day', 'celltype'
        uns: 'trees'



.. GENERATED FROM PYTHON SOURCE LINES 23-24

We assume trees to be saved in :attr:`anndata.AnnData.uns` as a dictionary.

.. GENERATED FROM PYTHON SOURCE LINES 24-27

.. code-block:: default


    adata.uns["trees"]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    {0: <networkx.classes.digraph.DiGraph object at 0x7fab7c2cbf40>, 1: <networkx.classes.digraph.DiGraph object at 0x7fab7c2cb280>, 2: <networkx.classes.digraph.DiGraph object at 0x7fab7c2cbbb0>}



.. GENERATED FROM PYTHON SOURCE LINES 28-30

Now, we can instantiate and prepare the :class:`moscot.problems.time.LineageProblem`
by specifying the cost

.. GENERATED FROM PYTHON SOURCE LINES 30-35

.. code-block:: default



    lp = LineageProblem(adata)
    lp = lp.prepare(time_key="day", lineage_attr={"attr": "uns", "key": "trees", "cost": "leaf_distance"})





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    WARNING  Cost matrix contains `NaN` values, setting them to the maximum value   
             `3.0`.                                                                 
    WARNING  Cost matrix contains `NaN` values, setting them to the maximum value   
             `3.0`.                                                                 
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    WARNING  Cost matrix contains `NaN` values, setting them to the maximum value   
             `3.0`.                                                                 
    WARNING  Cost matrix contains `NaN` values, setting them to the maximum value   
             `3.0`.                                                                 




.. GENERATED FROM PYTHON SOURCE LINES 36-39

Internally, cost matrices have been computed from the trees, according to the leaf
distance. Let us investigate the prepared problem. First, we print the first few
entries of the cost matrix computed from the first lineage tree.

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    lp[0, 1].x.data_src[:3, :3]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[0., 2., 3.],
           [2., 0., 3.],
           [3., 3., 0.]])



.. GENERATED FROM PYTHON SOURCE LINES 42-43

Similarly, we investigate parts of the cost matrix created from the second tree.

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: default

    lp[0, 1].y.data_src[:3, :3]





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[0., 2., 3.],
           [2., 0., 3.],
           [3., 3., 0.]])



.. GENERATED FROM PYTHON SOURCE LINES 46-48

Note that the gene expression term is still saved as two point clouds. The
cost matrix will be computed by the backend.

.. GENERATED FROM PYTHON SOURCE LINES 48-50

.. code-block:: default

    lp[0, 1].xy.data_src.shape, lp[0, 1].xy.data_tgt.shape





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    ((20, 30), (20, 30))



.. GENERATED FROM PYTHON SOURCE LINES 51-52

TODO See other examples for ...


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.728 seconds)

**Estimated memory usage:**  10 MB


.. _sphx_glr_download_auto_examples_problems_ex_use_leaf_distance.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ex_use_leaf_distance.py <ex_use_leaf_distance.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ex_use_leaf_distance.ipynb <ex_use_leaf_distance.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
