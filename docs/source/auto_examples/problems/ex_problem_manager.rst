
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/problems/ex_problem_manager.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_problems_ex_problem_manager.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_problems_ex_problem_manager.py:


Using the Problem Manager
-------------------------

.. GENERATED FROM PYTHON SOURCE LINES 8-12

Let's prepare and solve the problem.
In this notebook, we will showcase how to use the `ProblemManager`
capabilities in :class:`from moscot.problems.CompoundProblem`.
Let's load one temporal dataset, with 4 time points.

.. GENERATED FROM PYTHON SOURCE LINES 12-18

.. code-block:: default


    from moscot.datasets import hspc
    from moscot.problems.time import TemporalProblem

    adata = hspc()








.. GENERATED FROM PYTHON SOURCE LINES 19-20

Let's prepare and solve the problem.

.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: default


    tp = TemporalProblem(adata).prepare(time_key="day").solve(epsilon=1e-2)

    for k in tp.problems.keys():
        print(f"key: {k}", f"solutions: {tp.problems[k].solution}")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    INFO     Solving problem BirthDeathProblem[stage='prepared', shape=(766, 1235)].
    INFO     Solving problem BirthDeathProblem[stage='prepared', shape=(1235,       
             1201)].                                                                
    INFO     Solving problem BirthDeathProblem[stage='prepared', shape=(1201, 798)].
    key: (2, 3) solutions: OTTOutput[shape=(766, 1235), cost=0.4014, converged=True]
    key: (3, 4) solutions: OTTOutput[shape=(1235, 1201), cost=0.3423, converged=True]
    key: (4, 7) solutions: OTTOutput[shape=(1201, 798), cost=0.4252, converged=True]




.. GENERATED FROM PYTHON SOURCE LINES 27-31

Let's say we now want to solve one of the problems again,
because for example the solver did not converge, or we simply want to try it
with a different set of parameters for the OT solver.
What we need to do, is to copy the single problem and solve it again.

.. GENERATED FROM PYTHON SOURCE LINES 31-37

.. code-block:: default


    key = (2, 3)
    new_problem = tp.problems[(2, 3)]
    new_problem = new_problem.solve(epsilon=1e-2, tau_a=0.95, max_iterations=1e2)
    new_problem.solution





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    WARNING  Solver did not converge                                                

    OTTOutput[shape=(766, 1235), cost=472.347, converged=False]



.. GENERATED FROM PYTHON SOURCE LINES 38-41

For example, in this case we added a `tau` penalty for the unbalance case,
resulting in a higher cost compared to the result above.
Let's add this solution to the  :class:`moscot.problems.time.TemporalProblem` class.

.. GENERATED FROM PYTHON SOURCE LINES 41-45

.. code-block:: default


    tp = tp.add_problem((2, 3), new_problem, overwrite=True)
    for k in tp.problems.keys():
        print(f"key: {k}", f"solutions: {tp.problems[k].solution}")




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    key: (2, 3) solutions: OTTOutput[shape=(766, 1235), cost=472.347, converged=False]
    key: (3, 4) solutions: OTTOutput[shape=(1235, 1201), cost=0.3423, converged=True]
    key: (4, 7) solutions: OTTOutput[shape=(1201, 798), cost=0.4252, converged=True]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  21.291 seconds)

**Estimated memory usage:**  123 MB


.. _sphx_glr_download_auto_examples_problems_ex_problem_manager.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ex_problem_manager.py <ex_problem_manager.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ex_problem_manager.ipynb <ex_problem_manager.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
