
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/solvers/ex_linear_problems_advanced.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_solvers_ex_linear_problems_advanced.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_solvers_ex_linear_problems_advanced.py:


Solving linear problems
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 8-12

This examples is a continuation of TODO reference and shows advanced examples
for how to solve linear problems like the
:class:`moscot.problems.time.TemporalProblem` and the
:class:`moscot.problems.generic.SinkhornProblem`.

.. GENERATED FROM PYTHON SOURCE LINES 12-19

.. code-block:: default


    from moscot.datasets import simulate_data
    from moscot.problems.generic import SinkhornProblem

    adata = simulate_data(n_distributions=2, key="day")
    adata





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DEBUG:root:Initializing MLIR with module: _site_initialize_0
    DEBUG:root:Registering dialects from initializer <module 'jaxlib.mlir._mlir_libs._site_initialize_0' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/jaxlib/mlir/_mlir_libs/_site_initialize_0.so'>
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0005290508270263672 sec
    DEBUG:absl:Initializing backend 'interpreter'
    DEBUG:absl:Backend 'interpreter' initialized
    DEBUG:absl:Initializing backend 'cpu'
    DEBUG:absl:Backend 'cpu' initialized
    DEBUG:absl:Initializing backend 'tpu_driver'
    INFO:absl:Unable to initialize backend 'tpu_driver': NOT_FOUND: Unable to find driver in registry given worker: 
    DEBUG:absl:Initializing backend 'cuda'
    INFO:absl:Unable to initialize backend 'cuda': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig'
    DEBUG:absl:Initializing backend 'rocm'
    INFO:absl:Unable to initialize backend 'rocm': module 'jaxlib.xla_extension' has no attribute 'GpuAllocatorConfig'
    DEBUG:absl:Initializing backend 'tpu'
    INFO:absl:Unable to initialize backend 'tpu': INVALID_ARGUMENT: TpuPlatform is not available.
    DEBUG:absl:Initializing backend 'plugin'
    INFO:absl:Unable to initialize backend 'plugin': xla_extension has no attributes named get_plugin_device_client. Compile TensorFlow with //tensorflow/compiler/xla/python:enable_plugin_device set to true (defaults to false) to enable this.
    WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00048279762268066406 sec
    DEBUG:absl:Compiling prim_fun (139830974134368 for args (ShapedArray(int32[]), ShapedArray(int32[])).
    DEBUG:absl:Finished XLA compilation of shift_right_logical in 0.01733112335205078 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.000469207763671875 sec
    DEBUG:absl:Compiling prim_fun (139830974134048 for args (ShapedArray(int32[]),).
    DEBUG:absl:Finished XLA compilation of convert_element_type in 0.009042739868164062 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0005772113800048828 sec
    DEBUG:absl:Compiling prim_fun (139830822523024 for args (ShapedArray(uint32[]),).
    DEBUG:absl:Finished XLA compilation of reshape in 0.008977651596069336 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.0008494853973388672 sec
    DEBUG:absl:Compiling <lambda> (139830338665584 for args (ShapedArray(int32[]), ShapedArray(uint32[])).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.009655237197875977 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0003905296325683594 sec
    DEBUG:absl:Compiling prim_fun (139830338665104 for args (ShapedArray(uint32[1]), ShapedArray(uint32[1])).
    DEBUG:absl:Finished XLA compilation of concatenate in 0.009314537048339844 sec
    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/moscot/datasets/_datasets.py:251: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      AnnData(
    /home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/anndata/_core/anndata.py:1785: FutureWarning: X.dtype being converted to np.float32 from float64. In the next version of anndata (0.9) conversion will not be automatic. Pass dtype explicitly to avoid this warning. Pass `AnnData(X, dtype=X.dtype, ...)` to get the future behavour.
      [AnnData(sparse.csr_matrix(a.shape), obs=a.obs) for a in all_adatas],

    AnnData object with n_obs × n_vars = 40 × 60
        obs: 'day', 'celltype'



.. GENERATED FROM PYTHON SOURCE LINES 20-45

Threshold
~~~~~~~~~
The `threshold` parameter defines the convergence criterion. In the balanced
setting the `threshold` denotes the deviation between prior and posterior
marginals, while in the unbalanced setting the `threshold` corresponds to
a Cauchy sequence stopping criterion.

Initializers
~~~~~~~~~~~~
Different Initializers can help to improve convergence. For the full-rank
case we can set the initializer to the trivial initializing method denoted
by `default`. The `gaussian` (:cite:`thornton:22`) initializer computes
Gaussian approximations of two point clouds and leverages the closed-form
solution of Optimal Transport problems between Gaussians, while the `sorting`
initializer (:cite:`thornton:22`) solves a simplified (sorting) Optimal Transport
problem and uses its solution as initializer. See :mod:`ott.core.initializers`
for details.

For low-rank problems different initializers are available, see
:mod:`ott.core.initializers_lr`. Initialization can be `random`, `rank2`
(:cite:`scetbon:22b`), `k-means`, or `generalized-k-means`.
For some initializers keyword arguments can be provided as a dictionary,
e.g. `min_iterations`
and `max_iterations` can be provided for the k-means algorithm used by
the `k-means` initializer.

.. GENERATED FROM PYTHON SOURCE LINES 45-52

.. code-block:: default


    sp = SinkhornProblem(adata)
    sp = sp.prepare(key="day")

    ik = {"min_iterations": 5, "max_iterations": 200}
    sp = sp.solve(epsilon=0, rank=3, initializer="k-means", initializer_kwargs=ik)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Computing pca with `n_comps=30` using `adata.X`                        
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=53)
               2    LOAD_FAST(arg=1, lineno=53)
               4    LOAD_ATTR(arg=0, lineno=53)
               6    LOAD_CONST(arg=1, lineno=53)
               8    BINARY_SUBSCR(arg=None, lineno=53)
              10    STORE_FAST(arg=5, lineno=53)
              12    LOAD_GLOBAL(arg=1, lineno=55)
              14    LOAD_ATTR(arg=2, lineno=55)
              16    LOAD_FAST(arg=3, lineno=55)
              18    LOAD_FAST(arg=4, lineno=55)
              20    LOAD_CONST(arg=2, lineno=55)
              22    CALL_FUNCTION_KW(arg=2, lineno=55)
              24    STORE_FAST(arg=6, lineno=55)
              26    LOAD_GLOBAL(arg=1, lineno=56)
              28    LOAD_ATTR(arg=3, lineno=56)
              30    LOAD_FAST(arg=6, lineno=56)
              32    LOAD_FAST(arg=4, lineno=56)
              34    LOAD_CONST(arg=2, lineno=56)
              36    CALL_FUNCTION_KW(arg=2, lineno=56)
              38    STORE_FAST(arg=7, lineno=56)
              40    LOAD_GLOBAL(arg=1, lineno=58)
              42    LOAD_ATTR(arg=2, lineno=58)
              44    LOAD_FAST(arg=3, lineno=58)
              46    LOAD_GLOBAL(arg=1, lineno=58)
              48    LOAD_ATTR(arg=4, lineno=58)
              50    LOAD_CONST(arg=2, lineno=58)
              52    CALL_FUNCTION_KW(arg=2, lineno=58)
              54    STORE_FAST(arg=8, lineno=58)
              56    LOAD_GLOBAL(arg=5, lineno=60)
              58    LOAD_FAST(arg=5, lineno=60)
              60    CALL_FUNCTION(arg=1, lineno=60)
              62    GET_ITER(arg=None, lineno=60)
    >         64    FOR_ITER(arg=32, lineno=60)
              66    STORE_FAST(arg=9, lineno=60)
              68    LOAD_FAST(arg=1, lineno=61)
              70    LOAD_FAST(arg=9, lineno=61)
              72    BINARY_SUBSCR(arg=None, lineno=61)
              74    STORE_FAST(arg=10, lineno=61)
              76    LOAD_FAST(arg=6, lineno=62)
              78    LOAD_FAST(arg=10, lineno=62)
              80    DUP_TOP_TWO(arg=None, lineno=62)
              82    BINARY_SUBSCR(arg=None, lineno=62)
              84    LOAD_FAST(arg=0, lineno=62)
              86    LOAD_FAST(arg=9, lineno=62)
              88    BINARY_SUBSCR(arg=None, lineno=62)
              90    INPLACE_ADD(arg=None, lineno=62)
              92    ROT_THREE(arg=None, lineno=62)
              94    STORE_SUBSCR(arg=None, lineno=62)
              96    JUMP_ABSOLUTE(arg=64, lineno=62)
    >         98    LOAD_GLOBAL(arg=5, lineno=64)
             100    LOAD_FAST(arg=3, lineno=64)
             102    CALL_FUNCTION(arg=1, lineno=64)
             104    GET_ITER(arg=None, lineno=64)
    >        106    FOR_ITER(arg=20, lineno=64)
             108    STORE_FAST(arg=9, lineno=64)
             110    LOAD_FAST(arg=6, lineno=65)
             112    LOAD_FAST(arg=9, lineno=65)
             114    DUP_TOP_TWO(arg=None, lineno=65)
             116    BINARY_SUBSCR(arg=None, lineno=65)
             118    LOAD_FAST(arg=2, lineno=65)
             120    INPLACE_TRUE_DIVIDE(arg=None, lineno=65)
             122    ROT_THREE(arg=None, lineno=65)
             124    STORE_SUBSCR(arg=None, lineno=65)
             126    JUMP_ABSOLUTE(arg=106, lineno=65)
    >        128    LOAD_GLOBAL(arg=5, lineno=67)
             130    LOAD_FAST(arg=5, lineno=67)
             132    CALL_FUNCTION(arg=1, lineno=67)
             134    GET_ITER(arg=None, lineno=67)
    >        136    FOR_ITER(arg=64, lineno=67)
             138    STORE_FAST(arg=9, lineno=67)
             140    LOAD_FAST(arg=1, lineno=68)
             142    LOAD_FAST(arg=9, lineno=68)
             144    BINARY_SUBSCR(arg=None, lineno=68)
             146    STORE_FAST(arg=10, lineno=68)
             148    LOAD_FAST(arg=0, lineno=69)
             150    LOAD_FAST(arg=9, lineno=69)
             152    BINARY_SUBSCR(arg=None, lineno=69)
             154    LOAD_FAST(arg=6, lineno=69)
             156    LOAD_FAST(arg=10, lineno=69)
             158    BINARY_SUBSCR(arg=None, lineno=69)
             160    BINARY_SUBTRACT(arg=None, lineno=69)
             162    STORE_FAST(arg=11, lineno=69)
             164    LOAD_FAST(arg=7, lineno=70)
             166    LOAD_FAST(arg=10, lineno=70)
             168    DUP_TOP_TWO(arg=None, lineno=70)
             170    BINARY_SUBSCR(arg=None, lineno=70)
             172    LOAD_FAST(arg=11, lineno=70)
             174    LOAD_FAST(arg=11, lineno=70)
             176    BINARY_MULTIPLY(arg=None, lineno=70)
             178    INPLACE_ADD(arg=None, lineno=70)
             180    ROT_THREE(arg=None, lineno=70)
             182    STORE_SUBSCR(arg=None, lineno=70)
             184    LOAD_FAST(arg=8, lineno=71)
             186    LOAD_FAST(arg=10, lineno=71)
             188    DUP_TOP_TWO(arg=None, lineno=71)
             190    BINARY_SUBSCR(arg=None, lineno=71)
             192    LOAD_CONST(arg=3, lineno=71)
             194    INPLACE_ADD(arg=None, lineno=71)
             196    ROT_THREE(arg=None, lineno=71)
             198    STORE_SUBSCR(arg=None, lineno=71)
             200    JUMP_ABSOLUTE(arg=136, lineno=71)
    >        202    LOAD_GLOBAL(arg=5, lineno=73)
             204    LOAD_FAST(arg=3, lineno=73)
             206    CALL_FUNCTION(arg=1, lineno=73)
             208    GET_ITER(arg=None, lineno=73)
    >        210    FOR_ITER(arg=56, lineno=73)
             212    STORE_FAST(arg=9, lineno=73)
             214    LOAD_FAST(arg=7, lineno=74)
             216    LOAD_FAST(arg=9, lineno=74)
             218    DUP_TOP_TWO(arg=None, lineno=74)
             220    BINARY_SUBSCR(arg=None, lineno=74)
             222    LOAD_FAST(arg=2, lineno=74)
             224    LOAD_FAST(arg=8, lineno=74)
             226    LOAD_FAST(arg=9, lineno=74)
             228    BINARY_SUBSCR(arg=None, lineno=74)
             230    BINARY_SUBTRACT(arg=None, lineno=74)
             232    LOAD_FAST(arg=6, lineno=74)
             234    LOAD_FAST(arg=9, lineno=74)
             236    BINARY_SUBSCR(arg=None, lineno=74)
             238    LOAD_CONST(arg=4, lineno=74)
             240    BINARY_POWER(arg=None, lineno=74)
             242    BINARY_MULTIPLY(arg=None, lineno=74)
             244    INPLACE_ADD(arg=None, lineno=74)
             246    ROT_THREE(arg=None, lineno=74)
             248    STORE_SUBSCR(arg=None, lineno=74)
             250    LOAD_FAST(arg=7, lineno=75)
             252    LOAD_FAST(arg=9, lineno=75)
             254    DUP_TOP_TWO(arg=None, lineno=75)
             256    BINARY_SUBSCR(arg=None, lineno=75)
             258    LOAD_FAST(arg=2, lineno=75)
             260    INPLACE_TRUE_DIVIDE(arg=None, lineno=75)
             262    ROT_THREE(arg=None, lineno=75)
             264    STORE_SUBSCR(arg=None, lineno=75)
             266    JUMP_ABSOLUTE(arg=210, lineno=75)
    >        268    LOAD_FAST(arg=6, lineno=77)
             270    LOAD_FAST(arg=7, lineno=77)
             272    BUILD_TUPLE(arg=2, lineno=77)
             274    RETURN_VALUE(arg=None, lineno=77)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=53)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=1, lineno=53)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=0, lineno=53)
    DEBUG:numba.core.byteflow:stack ['$indices2.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_CONST(arg=1, lineno=53)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=BINARY_SUBSCR(arg=None, lineno=53)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$const6.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=STORE_FAST(arg=5, lineno=53)
    DEBUG:numba.core.byteflow:stack ['$8binary_subscr.3']
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_GLOBAL(arg=1, lineno=55)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=14, inst=LOAD_ATTR(arg=2, lineno=55)
    DEBUG:numba.core.byteflow:stack ['$12load_global.4']
    DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=3, lineno=55)
    DEBUG:numba.core.byteflow:stack ['$14load_attr.5']
    DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=4, lineno=55)
    DEBUG:numba.core.byteflow:stack ['$14load_attr.5', '$minor_len16.6']
    DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=55)
    DEBUG:numba.core.byteflow:stack ['$14load_attr.5', '$minor_len16.6', '$dtype18.7']
    DEBUG:numba.core.byteflow:dispatch pc=22, inst=CALL_FUNCTION_KW(arg=2, lineno=55)
    DEBUG:numba.core.byteflow:stack ['$14load_attr.5', '$minor_len16.6', '$dtype18.7', '$const20.8']
    DEBUG:numba.core.byteflow:dispatch pc=24, inst=STORE_FAST(arg=6, lineno=55)
    DEBUG:numba.core.byteflow:stack ['$22call_function_kw.9']
    DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_GLOBAL(arg=1, lineno=56)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=28, inst=LOAD_ATTR(arg=3, lineno=56)
    DEBUG:numba.core.byteflow:stack ['$26load_global.10']
    DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=6, lineno=56)
    DEBUG:numba.core.byteflow:stack ['$28load_attr.11']
    DEBUG:numba.core.byteflow:dispatch pc=32, inst=LOAD_FAST(arg=4, lineno=56)
    DEBUG:numba.core.byteflow:stack ['$28load_attr.11', '$means30.12']
    DEBUG:numba.core.byteflow:dispatch pc=34, inst=LOAD_CONST(arg=2, lineno=56)
    DEBUG:numba.core.byteflow:stack ['$28load_attr.11', '$means30.12', '$dtype32.13']
    DEBUG:numba.core.byteflow:dispatch pc=36, inst=CALL_FUNCTION_KW(arg=2, lineno=56)
    DEBUG:numba.core.byteflow:stack ['$28load_attr.11', '$means30.12', '$dtype32.13', '$const34.14']
    DEBUG:numba.core.byteflow:dispatch pc=38, inst=STORE_FAST(arg=7, lineno=56)
    DEBUG:numba.core.byteflow:stack ['$36call_function_kw.15']
    DEBUG:numba.core.byteflow:dispatch pc=40, inst=LOAD_GLOBAL(arg=1, lineno=58)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=42, inst=LOAD_ATTR(arg=2, lineno=58)
    DEBUG:numba.core.byteflow:stack ['$40load_global.16']
    DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_FAST(arg=3, lineno=58)
    DEBUG:numba.core.byteflow:stack ['$42load_attr.17']
    DEBUG:numba.core.byteflow:dispatch pc=46, inst=LOAD_GLOBAL(arg=1, lineno=58)
    DEBUG:numba.core.byteflow:stack ['$42load_attr.17', '$minor_len44.18']
    DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_ATTR(arg=4, lineno=58)
    DEBUG:numba.core.byteflow:stack ['$42load_attr.17', '$minor_len44.18', '$46load_global.19']
    DEBUG:numba.core.byteflow:dispatch pc=50, inst=LOAD_CONST(arg=2, lineno=58)
    DEBUG:numba.core.byteflow:stack ['$42load_attr.17', '$minor_len44.18', '$48load_attr.20']
    DEBUG:numba.core.byteflow:dispatch pc=52, inst=CALL_FUNCTION_KW(arg=2, lineno=58)
    DEBUG:numba.core.byteflow:stack ['$42load_attr.17', '$minor_len44.18', '$48load_attr.20', '$const50.21']
    DEBUG:numba.core.byteflow:dispatch pc=54, inst=STORE_FAST(arg=8, lineno=58)
    DEBUG:numba.core.byteflow:stack ['$52call_function_kw.22']
    DEBUG:numba.core.byteflow:dispatch pc=56, inst=LOAD_GLOBAL(arg=5, lineno=60)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=58, inst=LOAD_FAST(arg=5, lineno=60)
    DEBUG:numba.core.byteflow:stack ['$56load_global.23']
    DEBUG:numba.core.byteflow:dispatch pc=60, inst=CALL_FUNCTION(arg=1, lineno=60)
    DEBUG:numba.core.byteflow:stack ['$56load_global.23', '$non_zero58.24']
    DEBUG:numba.core.byteflow:dispatch pc=62, inst=GET_ITER(arg=None, lineno=60)
    DEBUG:numba.core.byteflow:stack ['$60call_function.25']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=64, stack=('$62get_iter.26',), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=1)])
    DEBUG:numba.core.byteflow:stack: ['$phi64.0']
    DEBUG:numba.core.byteflow:dispatch pc=64, inst=FOR_ITER(arg=32, lineno=60)
    DEBUG:numba.core.byteflow:stack ['$phi64.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=98, stack=(), blockstack=(), npush=0), Edge(pc=66, stack=('$phi64.0', '$64for_iter.2'), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=66 nstack_initial=2)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_GLOBAL(arg=5, lineno=64)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=100, inst=LOAD_FAST(arg=3, lineno=64)
    DEBUG:numba.core.byteflow:stack ['$98load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=102, inst=CALL_FUNCTION(arg=1, lineno=64)
    DEBUG:numba.core.byteflow:stack ['$98load_global.0', '$minor_len100.1']
    DEBUG:numba.core.byteflow:dispatch pc=104, inst=GET_ITER(arg=None, lineno=64)
    DEBUG:numba.core.byteflow:stack ['$102call_function.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=106, stack=('$104get_iter.3',), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=66 nstack_initial=2), State(pc_initial=106 nstack_initial=1)])
    DEBUG:numba.core.byteflow:stack: ['$phi66.0', '$phi66.1']
    DEBUG:numba.core.byteflow:dispatch pc=66, inst=STORE_FAST(arg=9, lineno=60)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$phi66.1']
    DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_FAST(arg=1, lineno=61)
    DEBUG:numba.core.byteflow:stack ['$phi66.0']
    DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_FAST(arg=9, lineno=61)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$indices68.2']
    DEBUG:numba.core.byteflow:dispatch pc=72, inst=BINARY_SUBSCR(arg=None, lineno=61)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$indices68.2', '$i70.3']
    DEBUG:numba.core.byteflow:dispatch pc=74, inst=STORE_FAST(arg=10, lineno=61)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$72binary_subscr.4']
    DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=6, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0']
    DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_FAST(arg=10, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$means76.5']
    DEBUG:numba.core.byteflow:dispatch pc=80, inst=DUP_TOP_TWO(arg=None, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$means76.5', '$col_ind78.6']
    DEBUG:numba.core.byteflow:dispatch pc=82, inst=BINARY_SUBSCR(arg=None, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$means76.5', '$col_ind78.6', '$80dup_top_two.7', '$80dup_top_two.8']
    DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$means76.5', '$col_ind78.6', '$82binary_subscr.9']
    DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_FAST(arg=9, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$means76.5', '$col_ind78.6', '$82binary_subscr.9', '$data84.10']
    DEBUG:numba.core.byteflow:dispatch pc=88, inst=BINARY_SUBSCR(arg=None, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$means76.5', '$col_ind78.6', '$82binary_subscr.9', '$data84.10', '$i86.11']
    DEBUG:numba.core.byteflow:dispatch pc=90, inst=INPLACE_ADD(arg=None, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$means76.5', '$col_ind78.6', '$82binary_subscr.9', '$88binary_subscr.12']
    DEBUG:numba.core.byteflow:dispatch pc=92, inst=ROT_THREE(arg=None, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$means76.5', '$col_ind78.6', '$90inplace_add.13']
    DEBUG:numba.core.byteflow:dispatch pc=94, inst=STORE_SUBSCR(arg=None, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0', '$90inplace_add.13', '$means76.5', '$col_ind78.6']
    DEBUG:numba.core.byteflow:dispatch pc=96, inst=JUMP_ABSOLUTE(arg=64, lineno=62)
    DEBUG:numba.core.byteflow:stack ['$phi66.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=64, stack=('$phi66.0',), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=1), State(pc_initial=64 nstack_initial=1)])
    DEBUG:numba.core.byteflow:stack: ['$phi106.0']
    DEBUG:numba.core.byteflow:dispatch pc=106, inst=FOR_ITER(arg=20, lineno=64)
    DEBUG:numba.core.byteflow:stack ['$phi106.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=128, stack=(), blockstack=(), npush=0), Edge(pc=108, stack=('$phi106.0', '$106for_iter.2'), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=1), State(pc_initial=128 nstack_initial=0), State(pc_initial=108 nstack_initial=2)])
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=128 nstack_initial=0), State(pc_initial=108 nstack_initial=2)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=128, inst=LOAD_GLOBAL(arg=5, lineno=67)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=5, lineno=67)
    DEBUG:numba.core.byteflow:stack ['$128load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=132, inst=CALL_FUNCTION(arg=1, lineno=67)
    DEBUG:numba.core.byteflow:stack ['$128load_global.0', '$non_zero130.1']
    DEBUG:numba.core.byteflow:dispatch pc=134, inst=GET_ITER(arg=None, lineno=67)
    DEBUG:numba.core.byteflow:stack ['$132call_function.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=136, stack=('$134get_iter.3',), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=108 nstack_initial=2), State(pc_initial=136 nstack_initial=1)])
    DEBUG:numba.core.byteflow:stack: ['$phi108.0', '$phi108.1']
    DEBUG:numba.core.byteflow:dispatch pc=108, inst=STORE_FAST(arg=9, lineno=64)
    DEBUG:numba.core.byteflow:stack ['$phi108.0', '$phi108.1']
    DEBUG:numba.core.byteflow:dispatch pc=110, inst=LOAD_FAST(arg=6, lineno=65)
    DEBUG:numba.core.byteflow:stack ['$phi108.0']
    DEBUG:numba.core.byteflow:dispatch pc=112, inst=LOAD_FAST(arg=9, lineno=65)
    DEBUG:numba.core.byteflow:stack ['$phi108.0', '$means110.2']
    DEBUG:numba.core.byteflow:dispatch pc=114, inst=DUP_TOP_TWO(arg=None, lineno=65)
    DEBUG:numba.core.byteflow:stack ['$phi108.0', '$means110.2', '$i112.3']
    DEBUG:numba.core.byteflow:dispatch pc=116, inst=BINARY_SUBSCR(arg=None, lineno=65)
    DEBUG:numba.core.byteflow:stack ['$phi108.0', '$means110.2', '$i112.3', '$114dup_top_two.4', '$114dup_top_two.5']
    DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_FAST(arg=2, lineno=65)
    DEBUG:numba.core.byteflow:stack ['$phi108.0', '$means110.2', '$i112.3', '$116binary_subscr.6']
    DEBUG:numba.core.byteflow:dispatch pc=120, inst=INPLACE_TRUE_DIVIDE(arg=None, lineno=65)
    DEBUG:numba.core.byteflow:stack ['$phi108.0', '$means110.2', '$i112.3', '$116binary_subscr.6', '$major_len118.7']
    DEBUG:numba.core.byteflow:dispatch pc=122, inst=ROT_THREE(arg=None, lineno=65)
    DEBUG:numba.core.byteflow:stack ['$phi108.0', '$means110.2', '$i112.3', '$120inplace_true_divide.8']
    DEBUG:numba.core.byteflow:dispatch pc=124, inst=STORE_SUBSCR(arg=None, lineno=65)
    DEBUG:numba.core.byteflow:stack ['$phi108.0', '$120inplace_true_divide.8', '$means110.2', '$i112.3']
    DEBUG:numba.core.byteflow:dispatch pc=126, inst=JUMP_ABSOLUTE(arg=106, lineno=65)
    DEBUG:numba.core.byteflow:stack ['$phi108.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=106, stack=('$phi108.0',), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=136 nstack_initial=1), State(pc_initial=106 nstack_initial=1)])
    DEBUG:numba.core.byteflow:stack: ['$phi136.0']
    DEBUG:numba.core.byteflow:dispatch pc=136, inst=FOR_ITER(arg=64, lineno=67)
    DEBUG:numba.core.byteflow:stack ['$phi136.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=202, stack=(), blockstack=(), npush=0), Edge(pc=138, stack=('$phi136.0', '$136for_iter.2'), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=1), State(pc_initial=202 nstack_initial=0), State(pc_initial=138 nstack_initial=2)])
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=202 nstack_initial=0), State(pc_initial=138 nstack_initial=2)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=202, inst=LOAD_GLOBAL(arg=5, lineno=73)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=204, inst=LOAD_FAST(arg=3, lineno=73)
    DEBUG:numba.core.byteflow:stack ['$202load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=206, inst=CALL_FUNCTION(arg=1, lineno=73)
    DEBUG:numba.core.byteflow:stack ['$202load_global.0', '$minor_len204.1']
    DEBUG:numba.core.byteflow:dispatch pc=208, inst=GET_ITER(arg=None, lineno=73)
    DEBUG:numba.core.byteflow:stack ['$206call_function.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=210, stack=('$208get_iter.3',), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=2), State(pc_initial=210 nstack_initial=1)])
    DEBUG:numba.core.byteflow:stack: ['$phi138.0', '$phi138.1']
    DEBUG:numba.core.byteflow:dispatch pc=138, inst=STORE_FAST(arg=9, lineno=67)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$phi138.1']
    DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_FAST(arg=1, lineno=68)
    DEBUG:numba.core.byteflow:stack ['$phi138.0']
    DEBUG:numba.core.byteflow:dispatch pc=142, inst=LOAD_FAST(arg=9, lineno=68)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$indices140.2']
    DEBUG:numba.core.byteflow:dispatch pc=144, inst=BINARY_SUBSCR(arg=None, lineno=68)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$indices140.2', '$i142.3']
    DEBUG:numba.core.byteflow:dispatch pc=146, inst=STORE_FAST(arg=10, lineno=68)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$144binary_subscr.4']
    DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=69)
    DEBUG:numba.core.byteflow:stack ['$phi138.0']
    DEBUG:numba.core.byteflow:dispatch pc=150, inst=LOAD_FAST(arg=9, lineno=69)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$data148.5']
    DEBUG:numba.core.byteflow:dispatch pc=152, inst=BINARY_SUBSCR(arg=None, lineno=69)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$data148.5', '$i150.6']
    DEBUG:numba.core.byteflow:dispatch pc=154, inst=LOAD_FAST(arg=6, lineno=69)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$152binary_subscr.7']
    DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_FAST(arg=10, lineno=69)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$152binary_subscr.7', '$means154.8']
    DEBUG:numba.core.byteflow:dispatch pc=158, inst=BINARY_SUBSCR(arg=None, lineno=69)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$152binary_subscr.7', '$means154.8', '$col_ind156.9']
    DEBUG:numba.core.byteflow:dispatch pc=160, inst=BINARY_SUBTRACT(arg=None, lineno=69)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$152binary_subscr.7', '$158binary_subscr.10']
    DEBUG:numba.core.byteflow:dispatch pc=162, inst=STORE_FAST(arg=11, lineno=69)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$160binary_subtract.11']
    DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_FAST(arg=7, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0']
    DEBUG:numba.core.byteflow:dispatch pc=166, inst=LOAD_FAST(arg=10, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$variances164.12']
    DEBUG:numba.core.byteflow:dispatch pc=168, inst=DUP_TOP_TWO(arg=None, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$variances164.12', '$col_ind166.13']
    DEBUG:numba.core.byteflow:dispatch pc=170, inst=BINARY_SUBSCR(arg=None, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$variances164.12', '$col_ind166.13', '$168dup_top_two.14', '$168dup_top_two.15']
    DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_FAST(arg=11, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$variances164.12', '$col_ind166.13', '$170binary_subscr.16']
    DEBUG:numba.core.byteflow:dispatch pc=174, inst=LOAD_FAST(arg=11, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$variances164.12', '$col_ind166.13', '$170binary_subscr.16', '$diff172.17']
    DEBUG:numba.core.byteflow:dispatch pc=176, inst=BINARY_MULTIPLY(arg=None, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$variances164.12', '$col_ind166.13', '$170binary_subscr.16', '$diff172.17', '$diff174.18']
    DEBUG:numba.core.byteflow:dispatch pc=178, inst=INPLACE_ADD(arg=None, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$variances164.12', '$col_ind166.13', '$170binary_subscr.16', '$176binary_multiply.19']
    DEBUG:numba.core.byteflow:dispatch pc=180, inst=ROT_THREE(arg=None, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$variances164.12', '$col_ind166.13', '$178inplace_add.20']
    DEBUG:numba.core.byteflow:dispatch pc=182, inst=STORE_SUBSCR(arg=None, lineno=70)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$178inplace_add.20', '$variances164.12', '$col_ind166.13']
    DEBUG:numba.core.byteflow:dispatch pc=184, inst=LOAD_FAST(arg=8, lineno=71)
    DEBUG:numba.core.byteflow:stack ['$phi138.0']
    DEBUG:numba.core.byteflow:dispatch pc=186, inst=LOAD_FAST(arg=10, lineno=71)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$counts184.21']
    DEBUG:numba.core.byteflow:dispatch pc=188, inst=DUP_TOP_TWO(arg=None, lineno=71)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$counts184.21', '$col_ind186.22']
    DEBUG:numba.core.byteflow:dispatch pc=190, inst=BINARY_SUBSCR(arg=None, lineno=71)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$counts184.21', '$col_ind186.22', '$188dup_top_two.23', '$188dup_top_two.24']
    DEBUG:numba.core.byteflow:dispatch pc=192, inst=LOAD_CONST(arg=3, lineno=71)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$counts184.21', '$col_ind186.22', '$190binary_subscr.25']
    DEBUG:numba.core.byteflow:dispatch pc=194, inst=INPLACE_ADD(arg=None, lineno=71)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$counts184.21', '$col_ind186.22', '$190binary_subscr.25', '$const192.26']
    DEBUG:numba.core.byteflow:dispatch pc=196, inst=ROT_THREE(arg=None, lineno=71)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$counts184.21', '$col_ind186.22', '$194inplace_add.27']
    DEBUG:numba.core.byteflow:dispatch pc=198, inst=STORE_SUBSCR(arg=None, lineno=71)
    DEBUG:numba.core.byteflow:stack ['$phi138.0', '$194inplace_add.27', '$counts184.21', '$col_ind186.22']
    DEBUG:numba.core.byteflow:dispatch pc=200, inst=JUMP_ABSOLUTE(arg=136, lineno=71)
    DEBUG:numba.core.byteflow:stack ['$phi138.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=136, stack=('$phi138.0',), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=210 nstack_initial=1), State(pc_initial=136 nstack_initial=1)])
    DEBUG:numba.core.byteflow:stack: ['$phi210.0']
    DEBUG:numba.core.byteflow:dispatch pc=210, inst=FOR_ITER(arg=56, lineno=73)
    DEBUG:numba.core.byteflow:stack ['$phi210.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=268, stack=(), blockstack=(), npush=0), Edge(pc=212, stack=('$phi210.0', '$210for_iter.2'), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=136 nstack_initial=1), State(pc_initial=268 nstack_initial=0), State(pc_initial=212 nstack_initial=2)])
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=268 nstack_initial=0), State(pc_initial=212 nstack_initial=2)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=268, inst=LOAD_FAST(arg=6, lineno=77)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=270, inst=LOAD_FAST(arg=7, lineno=77)
    DEBUG:numba.core.byteflow:stack ['$means268.0']
    DEBUG:numba.core.byteflow:dispatch pc=272, inst=BUILD_TUPLE(arg=2, lineno=77)
    DEBUG:numba.core.byteflow:stack ['$means268.0', '$variances270.1']
    DEBUG:numba.core.byteflow:dispatch pc=274, inst=RETURN_VALUE(arg=None, lineno=77)
    DEBUG:numba.core.byteflow:stack ['$272build_tuple.2']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=212 nstack_initial=2)])
    DEBUG:numba.core.byteflow:stack: ['$phi212.0', '$phi212.1']
    DEBUG:numba.core.byteflow:dispatch pc=212, inst=STORE_FAST(arg=9, lineno=73)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$phi212.1']
    DEBUG:numba.core.byteflow:dispatch pc=214, inst=LOAD_FAST(arg=7, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0']
    DEBUG:numba.core.byteflow:dispatch pc=216, inst=LOAD_FAST(arg=9, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2']
    DEBUG:numba.core.byteflow:dispatch pc=218, inst=DUP_TOP_TWO(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3']
    DEBUG:numba.core.byteflow:dispatch pc=220, inst=BINARY_SUBSCR(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$218dup_top_two.4', '$218dup_top_two.5']
    DEBUG:numba.core.byteflow:dispatch pc=222, inst=LOAD_FAST(arg=2, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6']
    DEBUG:numba.core.byteflow:dispatch pc=224, inst=LOAD_FAST(arg=8, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$major_len222.7']
    DEBUG:numba.core.byteflow:dispatch pc=226, inst=LOAD_FAST(arg=9, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$major_len222.7', '$counts224.8']
    DEBUG:numba.core.byteflow:dispatch pc=228, inst=BINARY_SUBSCR(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$major_len222.7', '$counts224.8', '$i226.9']
    DEBUG:numba.core.byteflow:dispatch pc=230, inst=BINARY_SUBTRACT(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$major_len222.7', '$228binary_subscr.10']
    DEBUG:numba.core.byteflow:dispatch pc=232, inst=LOAD_FAST(arg=6, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$230binary_subtract.11']
    DEBUG:numba.core.byteflow:dispatch pc=234, inst=LOAD_FAST(arg=9, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$230binary_subtract.11', '$means232.12']
    DEBUG:numba.core.byteflow:dispatch pc=236, inst=BINARY_SUBSCR(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$230binary_subtract.11', '$means232.12', '$i234.13']
    DEBUG:numba.core.byteflow:dispatch pc=238, inst=LOAD_CONST(arg=4, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$230binary_subtract.11', '$236binary_subscr.14']
    DEBUG:numba.core.byteflow:dispatch pc=240, inst=BINARY_POWER(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$230binary_subtract.11', '$236binary_subscr.14', '$const238.15']
    DEBUG:numba.core.byteflow:dispatch pc=242, inst=BINARY_MULTIPLY(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$230binary_subtract.11', '$240binary_power.16']
    DEBUG:numba.core.byteflow:dispatch pc=244, inst=INPLACE_ADD(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$220binary_subscr.6', '$242binary_multiply.17']
    DEBUG:numba.core.byteflow:dispatch pc=246, inst=ROT_THREE(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances214.2', '$i216.3', '$244inplace_add.18']
    DEBUG:numba.core.byteflow:dispatch pc=248, inst=STORE_SUBSCR(arg=None, lineno=74)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$244inplace_add.18', '$variances214.2', '$i216.3']
    DEBUG:numba.core.byteflow:dispatch pc=250, inst=LOAD_FAST(arg=7, lineno=75)
    DEBUG:numba.core.byteflow:stack ['$phi212.0']
    DEBUG:numba.core.byteflow:dispatch pc=252, inst=LOAD_FAST(arg=9, lineno=75)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances250.19']
    DEBUG:numba.core.byteflow:dispatch pc=254, inst=DUP_TOP_TWO(arg=None, lineno=75)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances250.19', '$i252.20']
    DEBUG:numba.core.byteflow:dispatch pc=256, inst=BINARY_SUBSCR(arg=None, lineno=75)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances250.19', '$i252.20', '$254dup_top_two.21', '$254dup_top_two.22']
    DEBUG:numba.core.byteflow:dispatch pc=258, inst=LOAD_FAST(arg=2, lineno=75)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances250.19', '$i252.20', '$256binary_subscr.23']
    DEBUG:numba.core.byteflow:dispatch pc=260, inst=INPLACE_TRUE_DIVIDE(arg=None, lineno=75)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances250.19', '$i252.20', '$256binary_subscr.23', '$major_len258.24']
    DEBUG:numba.core.byteflow:dispatch pc=262, inst=ROT_THREE(arg=None, lineno=75)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$variances250.19', '$i252.20', '$260inplace_true_divide.25']
    DEBUG:numba.core.byteflow:dispatch pc=264, inst=STORE_SUBSCR(arg=None, lineno=75)
    DEBUG:numba.core.byteflow:stack ['$phi212.0', '$260inplace_true_divide.25', '$variances250.19', '$i252.20']
    DEBUG:numba.core.byteflow:dispatch pc=266, inst=JUMP_ABSOLUTE(arg=210, lineno=75)
    DEBUG:numba.core.byteflow:stack ['$phi212.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=210, stack=('$phi212.0',), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=210 nstack_initial=1)])
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
                {State(pc_initial=0 nstack_initial=0): set(),
                 State(pc_initial=64 nstack_initial=1): {'$phi64.0'},
                 State(pc_initial=66 nstack_initial=2): {'$phi66.1'},
                 State(pc_initial=98 nstack_initial=0): set(),
                 State(pc_initial=106 nstack_initial=1): {'$phi106.0'},
                 State(pc_initial=108 nstack_initial=2): {'$phi108.1'},
                 State(pc_initial=128 nstack_initial=0): set(),
                 State(pc_initial=136 nstack_initial=1): {'$phi136.0'},
                 State(pc_initial=138 nstack_initial=2): {'$phi138.1'},
                 State(pc_initial=202 nstack_initial=0): set(),
                 State(pc_initial=210 nstack_initial=1): {'$phi210.0'},
                 State(pc_initial=212 nstack_initial=2): {'$phi212.1'},
                 State(pc_initial=268 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {'$phi106.0': State(pc_initial=98 nstack_initial=0),
     '$phi108.1': State(pc_initial=106 nstack_initial=1),
     '$phi136.0': State(pc_initial=128 nstack_initial=0),
     '$phi138.1': State(pc_initial=136 nstack_initial=1),
     '$phi210.0': State(pc_initial=202 nstack_initial=0),
     '$phi212.1': State(pc_initial=210 nstack_initial=1),
     '$phi64.0': State(pc_initial=0 nstack_initial=0),
     '$phi66.1': State(pc_initial=64 nstack_initial=1)}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>,
                {'$phi106.0': {('$104get_iter.3',
                                State(pc_initial=98 nstack_initial=0)),
                               ('$phi108.0',
                                State(pc_initial=108 nstack_initial=2))},
                 '$phi108.0': {('$phi106.0',
                                State(pc_initial=106 nstack_initial=1))},
                 '$phi108.1': {('$106for_iter.2',
                                State(pc_initial=106 nstack_initial=1))},
                 '$phi136.0': {('$134get_iter.3',
                                State(pc_initial=128 nstack_initial=0)),
                               ('$phi138.0',
                                State(pc_initial=138 nstack_initial=2))},
                 '$phi138.0': {('$phi136.0',
                                State(pc_initial=136 nstack_initial=1))},
                 '$phi138.1': {('$136for_iter.2',
                                State(pc_initial=136 nstack_initial=1))},
                 '$phi210.0': {('$208get_iter.3',
                                State(pc_initial=202 nstack_initial=0)),
                               ('$phi212.0',
                                State(pc_initial=212 nstack_initial=2))},
                 '$phi212.0': {('$phi210.0',
                                State(pc_initial=210 nstack_initial=1))},
                 '$phi212.1': {('$210for_iter.2',
                                State(pc_initial=210 nstack_initial=1))},
                 '$phi64.0': {('$62get_iter.26',
                               State(pc_initial=0 nstack_initial=0)),
                              ('$phi66.0', State(pc_initial=66 nstack_initial=2))},
                 '$phi66.0': {('$phi64.0', State(pc_initial=64 nstack_initial=1))},
                 '$phi66.1': {('$64for_iter.2',
                               State(pc_initial=64 nstack_initial=1))}})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
                {'$phi106.0': {('$104get_iter.3',
                                State(pc_initial=98 nstack_initial=0)),
                               ('$phi106.0',
                                State(pc_initial=106 nstack_initial=1))},
                 '$phi108.0': {('$104get_iter.3',
                                State(pc_initial=98 nstack_initial=0))},
                 '$phi108.1': {('$106for_iter.2',
                                State(pc_initial=106 nstack_initial=1))},
                 '$phi136.0': {('$134get_iter.3',
                                State(pc_initial=128 nstack_initial=0)),
                               ('$phi136.0',
                                State(pc_initial=136 nstack_initial=1))},
                 '$phi138.0': {('$134get_iter.3',
                                State(pc_initial=128 nstack_initial=0))},
                 '$phi138.1': {('$136for_iter.2',
                                State(pc_initial=136 nstack_initial=1))},
                 '$phi210.0': {('$208get_iter.3',
                                State(pc_initial=202 nstack_initial=0)),
                               ('$phi210.0',
                                State(pc_initial=210 nstack_initial=1))},
                 '$phi212.0': {('$208get_iter.3',
                                State(pc_initial=202 nstack_initial=0))},
                 '$phi212.1': {('$210for_iter.2',
                                State(pc_initial=210 nstack_initial=1))},
                 '$phi64.0': {('$62get_iter.26',
                               State(pc_initial=0 nstack_initial=0)),
                              ('$phi64.0', State(pc_initial=64 nstack_initial=1))},
                 '$phi66.0': {('$62get_iter.26',
                               State(pc_initial=0 nstack_initial=0))},
                 '$phi66.1': {('$64for_iter.2',
                               State(pc_initial=64 nstack_initial=1))}})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
                {'$phi106.0': {('$104get_iter.3',
                                State(pc_initial=98 nstack_initial=0))},
                 '$phi108.0': {('$104get_iter.3',
                                State(pc_initial=98 nstack_initial=0))},
                 '$phi108.1': {('$106for_iter.2',
                                State(pc_initial=106 nstack_initial=1))},
                 '$phi136.0': {('$134get_iter.3',
                                State(pc_initial=128 nstack_initial=0))},
                 '$phi138.0': {('$134get_iter.3',
                                State(pc_initial=128 nstack_initial=0))},
                 '$phi138.1': {('$136for_iter.2',
                                State(pc_initial=136 nstack_initial=1))},
                 '$phi210.0': {('$208get_iter.3',
                                State(pc_initial=202 nstack_initial=0))},
                 '$phi212.0': {('$208get_iter.3',
                                State(pc_initial=202 nstack_initial=0))},
                 '$phi212.1': {('$210for_iter.2',
                                State(pc_initial=210 nstack_initial=1))},
                 '$phi64.0': {('$62get_iter.26',
                               State(pc_initial=0 nstack_initial=0))},
                 '$phi66.0': {('$62get_iter.26',
                               State(pc_initial=0 nstack_initial=0))},
                 '$phi66.1': {('$64for_iter.2',
                               State(pc_initial=64 nstack_initial=1))}})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>,
                {'$phi106.0': {('$104get_iter.3',
                                State(pc_initial=98 nstack_initial=0))},
                 '$phi108.0': {('$104get_iter.3',
                                State(pc_initial=98 nstack_initial=0))},
                 '$phi108.1': {('$106for_iter.2',
                                State(pc_initial=106 nstack_initial=1))},
                 '$phi136.0': {('$134get_iter.3',
                                State(pc_initial=128 nstack_initial=0))},
                 '$phi138.0': {('$134get_iter.3',
                                State(pc_initial=128 nstack_initial=0))},
                 '$phi138.1': {('$136for_iter.2',
                                State(pc_initial=136 nstack_initial=1))},
                 '$phi210.0': {('$208get_iter.3',
                                State(pc_initial=202 nstack_initial=0))},
                 '$phi212.0': {('$208get_iter.3',
                                State(pc_initial=202 nstack_initial=0))},
                 '$phi212.1': {('$210for_iter.2',
                                State(pc_initial=210 nstack_initial=1))},
                 '$phi64.0': {('$62get_iter.26',
                               State(pc_initial=0 nstack_initial=0))},
                 '$phi66.0': {('$62get_iter.26',
                               State(pc_initial=0 nstack_initial=0))},
                 '$phi66.1': {('$64for_iter.2',
                               State(pc_initial=64 nstack_initial=1))}})
    DEBUG:numba.core.byteflow:keep phismap: {'$phi106.0': {('$104get_iter.3', State(pc_initial=98 nstack_initial=0))},
     '$phi108.1': {('$106for_iter.2', State(pc_initial=106 nstack_initial=1))},
     '$phi136.0': {('$134get_iter.3', State(pc_initial=128 nstack_initial=0))},
     '$phi138.1': {('$136for_iter.2', State(pc_initial=136 nstack_initial=1))},
     '$phi210.0': {('$208get_iter.3', State(pc_initial=202 nstack_initial=0))},
     '$phi212.1': {('$210for_iter.2', State(pc_initial=210 nstack_initial=1))},
     '$phi64.0': {('$62get_iter.26', State(pc_initial=0 nstack_initial=0))},
     '$phi66.1': {('$64for_iter.2', State(pc_initial=64 nstack_initial=1))}}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>,
                {State(pc_initial=0 nstack_initial=0): {'$phi64.0': '$62get_iter.26'},
                 State(pc_initial=64 nstack_initial=1): {'$phi66.1': '$64for_iter.2'},
                 State(pc_initial=98 nstack_initial=0): {'$phi106.0': '$104get_iter.3'},
                 State(pc_initial=106 nstack_initial=1): {'$phi108.1': '$106for_iter.2'},
                 State(pc_initial=128 nstack_initial=0): {'$phi136.0': '$134get_iter.3'},
                 State(pc_initial=136 nstack_initial=1): {'$phi138.1': '$136for_iter.2'},
                 State(pc_initial=202 nstack_initial=0): {'$phi210.0': '$208get_iter.3'},
                 State(pc_initial=210 nstack_initial=1): {'$phi212.1': '$210for_iter.2'}})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$indices2.0'}), (4, {'item': '$indices2.0', 'res': '$4load_attr.1'}), (6, {'res': '$const6.2'}), (8, {'index': '$const6.2', 'target': '$4load_attr.1', 'res': '$8binary_subscr.3'}), (10, {'value': '$8binary_subscr.3'}), (12, {'res': '$12load_global.4'}), (14, {'item': '$12load_global.4', 'res': '$14load_attr.5'}), (16, {'res': '$minor_len16.6'}), (18, {'res': '$dtype18.7'}), (20, {'res': '$const20.8'}), (22, {'func': '$14load_attr.5', 'args': ['$minor_len16.6', '$dtype18.7'], 'names': '$const20.8', 'res': '$22call_function_kw.9'}), (24, {'value': '$22call_function_kw.9'}), (26, {'res': '$26load_global.10'}), (28, {'item': '$26load_global.10', 'res': '$28load_attr.11'}), (30, {'res': '$means30.12'}), (32, {'res': '$dtype32.13'}), (34, {'res': '$const34.14'}), (36, {'func': '$28load_attr.11', 'args': ['$means30.12', '$dtype32.13'], 'names': '$const34.14', 'res': '$36call_function_kw.15'}), (38, {'value': '$36call_function_kw.15'}), (40, {'res': '$40load_global.16'}), (42, {'item': '$40load_global.16', 'res': '$42load_attr.17'}), (44, {'res': '$minor_len44.18'}), (46, {'res': '$46load_global.19'}), (48, {'item': '$46load_global.19', 'res': '$48load_attr.20'}), (50, {'res': '$const50.21'}), (52, {'func': '$42load_attr.17', 'args': ['$minor_len44.18', '$48load_attr.20'], 'names': '$const50.21', 'res': '$52call_function_kw.22'}), (54, {'value': '$52call_function_kw.22'}), (56, {'res': '$56load_global.23'}), (58, {'res': '$non_zero58.24'}), (60, {'func': '$56load_global.23', 'args': ['$non_zero58.24'], 'res': '$60call_function.25'}), (62, {'value': '$60call_function.25', 'res': '$62get_iter.26'})), outgoing_phis={'$phi64.0': '$62get_iter.26'}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$62get_iter.26',)})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=64 nstack_initial=1):
    AdaptBlockInfo(insts=((64, {'iterator': '$phi64.0', 'pair': '$64for_iter.1', 'indval': '$64for_iter.2', 'pred': '$64for_iter.3'}),), outgoing_phis={'$phi66.1': '$64for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={98: (), 66: ('$phi64.0', '$64for_iter.2')})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=66 nstack_initial=2):
    AdaptBlockInfo(insts=((66, {'value': '$phi66.1'}), (68, {'res': '$indices68.2'}), (70, {'res': '$i70.3'}), (72, {'index': '$i70.3', 'target': '$indices68.2', 'res': '$72binary_subscr.4'}), (74, {'value': '$72binary_subscr.4'}), (76, {'res': '$means76.5'}), (78, {'res': '$col_ind78.6'}), (80, {'orig': ['$means76.5', '$col_ind78.6'], 'duped': ['$80dup_top_two.7', '$80dup_top_two.8']}), (82, {'index': '$80dup_top_two.8', 'target': '$80dup_top_two.7', 'res': '$82binary_subscr.9'}), (84, {'res': '$data84.10'}), (86, {'res': '$i86.11'}), (88, {'index': '$i86.11', 'target': '$data84.10', 'res': '$88binary_subscr.12'}), (90, {'lhs': '$82binary_subscr.9', 'rhs': '$88binary_subscr.12', 'res': '$90inplace_add.13'}), (94, {'target': '$means76.5', 'index': '$col_ind78.6', 'value': '$90inplace_add.13'}), (96, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: ('$phi66.0',)})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=98 nstack_initial=0):
    AdaptBlockInfo(insts=((98, {'res': '$98load_global.0'}), (100, {'res': '$minor_len100.1'}), (102, {'func': '$98load_global.0', 'args': ['$minor_len100.1'], 'res': '$102call_function.2'}), (104, {'value': '$102call_function.2', 'res': '$104get_iter.3'})), outgoing_phis={'$phi106.0': '$104get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ('$104get_iter.3',)})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=106 nstack_initial=1):
    AdaptBlockInfo(insts=((106, {'iterator': '$phi106.0', 'pair': '$106for_iter.1', 'indval': '$106for_iter.2', 'pred': '$106for_iter.3'}),), outgoing_phis={'$phi108.1': '$106for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={128: (), 108: ('$phi106.0', '$106for_iter.2')})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=108 nstack_initial=2):
    AdaptBlockInfo(insts=((108, {'value': '$phi108.1'}), (110, {'res': '$means110.2'}), (112, {'res': '$i112.3'}), (114, {'orig': ['$means110.2', '$i112.3'], 'duped': ['$114dup_top_two.4', '$114dup_top_two.5']}), (116, {'index': '$114dup_top_two.5', 'target': '$114dup_top_two.4', 'res': '$116binary_subscr.6'}), (118, {'res': '$major_len118.7'}), (120, {'lhs': '$116binary_subscr.6', 'rhs': '$major_len118.7', 'res': '$120inplace_true_divide.8'}), (124, {'target': '$means110.2', 'index': '$i112.3', 'value': '$120inplace_true_divide.8'}), (126, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ('$phi108.0',)})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=128 nstack_initial=0):
    AdaptBlockInfo(insts=((128, {'res': '$128load_global.0'}), (130, {'res': '$non_zero130.1'}), (132, {'func': '$128load_global.0', 'args': ['$non_zero130.1'], 'res': '$132call_function.2'}), (134, {'value': '$132call_function.2', 'res': '$134get_iter.3'})), outgoing_phis={'$phi136.0': '$134get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ('$134get_iter.3',)})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=136 nstack_initial=1):
    AdaptBlockInfo(insts=((136, {'iterator': '$phi136.0', 'pair': '$136for_iter.1', 'indval': '$136for_iter.2', 'pred': '$136for_iter.3'}),), outgoing_phis={'$phi138.1': '$136for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={202: (), 138: ('$phi136.0', '$136for_iter.2')})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=138 nstack_initial=2):
    AdaptBlockInfo(insts=((138, {'value': '$phi138.1'}), (140, {'res': '$indices140.2'}), (142, {'res': '$i142.3'}), (144, {'index': '$i142.3', 'target': '$indices140.2', 'res': '$144binary_subscr.4'}), (146, {'value': '$144binary_subscr.4'}), (148, {'res': '$data148.5'}), (150, {'res': '$i150.6'}), (152, {'index': '$i150.6', 'target': '$data148.5', 'res': '$152binary_subscr.7'}), (154, {'res': '$means154.8'}), (156, {'res': '$col_ind156.9'}), (158, {'index': '$col_ind156.9', 'target': '$means154.8', 'res': '$158binary_subscr.10'}), (160, {'lhs': '$152binary_subscr.7', 'rhs': '$158binary_subscr.10', 'res': '$160binary_subtract.11'}), (162, {'value': '$160binary_subtract.11'}), (164, {'res': '$variances164.12'}), (166, {'res': '$col_ind166.13'}), (168, {'orig': ['$variances164.12', '$col_ind166.13'], 'duped': ['$168dup_top_two.14', '$168dup_top_two.15']}), (170, {'index': '$168dup_top_two.15', 'target': '$168dup_top_two.14', 'res': '$170binary_subscr.16'}), (172, {'res': '$diff172.17'}), (174, {'res': '$diff174.18'}), (176, {'lhs': '$diff172.17', 'rhs': '$diff174.18', 'res': '$176binary_multiply.19'}), (178, {'lhs': '$170binary_subscr.16', 'rhs': '$176binary_multiply.19', 'res': '$178inplace_add.20'}), (182, {'target': '$variances164.12', 'index': '$col_ind166.13', 'value': '$178inplace_add.20'}), (184, {'res': '$counts184.21'}), (186, {'res': '$col_ind186.22'}), (188, {'orig': ['$counts184.21', '$col_ind186.22'], 'duped': ['$188dup_top_two.23', '$188dup_top_two.24']}), (190, {'index': '$188dup_top_two.24', 'target': '$188dup_top_two.23', 'res': '$190binary_subscr.25'}), (192, {'res': '$const192.26'}), (194, {'lhs': '$190binary_subscr.25', 'rhs': '$const192.26', 'res': '$194inplace_add.27'}), (198, {'target': '$counts184.21', 'index': '$col_ind186.22', 'value': '$194inplace_add.27'}), (200, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={136: ('$phi138.0',)})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=202 nstack_initial=0):
    AdaptBlockInfo(insts=((202, {'res': '$202load_global.0'}), (204, {'res': '$minor_len204.1'}), (206, {'func': '$202load_global.0', 'args': ['$minor_len204.1'], 'res': '$206call_function.2'}), (208, {'value': '$206call_function.2', 'res': '$208get_iter.3'})), outgoing_phis={'$phi210.0': '$208get_iter.3'}, blockstack=(), active_try_block=None, outgoing_edgepushed={210: ('$208get_iter.3',)})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=210 nstack_initial=1):
    AdaptBlockInfo(insts=((210, {'iterator': '$phi210.0', 'pair': '$210for_iter.1', 'indval': '$210for_iter.2', 'pred': '$210for_iter.3'}),), outgoing_phis={'$phi212.1': '$210for_iter.2'}, blockstack=(), active_try_block=None, outgoing_edgepushed={268: (), 212: ('$phi210.0', '$210for_iter.2')})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=212 nstack_initial=2):
    AdaptBlockInfo(insts=((212, {'value': '$phi212.1'}), (214, {'res': '$variances214.2'}), (216, {'res': '$i216.3'}), (218, {'orig': ['$variances214.2', '$i216.3'], 'duped': ['$218dup_top_two.4', '$218dup_top_two.5']}), (220, {'index': '$218dup_top_two.5', 'target': '$218dup_top_two.4', 'res': '$220binary_subscr.6'}), (222, {'res': '$major_len222.7'}), (224, {'res': '$counts224.8'}), (226, {'res': '$i226.9'}), (228, {'index': '$i226.9', 'target': '$counts224.8', 'res': '$228binary_subscr.10'}), (230, {'lhs': '$major_len222.7', 'rhs': '$228binary_subscr.10', 'res': '$230binary_subtract.11'}), (232, {'res': '$means232.12'}), (234, {'res': '$i234.13'}), (236, {'index': '$i234.13', 'target': '$means232.12', 'res': '$236binary_subscr.14'}), (238, {'res': '$const238.15'}), (240, {'lhs': '$236binary_subscr.14', 'rhs': '$const238.15', 'res': '$240binary_power.16'}), (242, {'lhs': '$230binary_subtract.11', 'rhs': '$240binary_power.16', 'res': '$242binary_multiply.17'}), (244, {'lhs': '$220binary_subscr.6', 'rhs': '$242binary_multiply.17', 'res': '$244inplace_add.18'}), (248, {'target': '$variances214.2', 'index': '$i216.3', 'value': '$244inplace_add.18'}), (250, {'res': '$variances250.19'}), (252, {'res': '$i252.20'}), (254, {'orig': ['$variances250.19', '$i252.20'], 'duped': ['$254dup_top_two.21', '$254dup_top_two.22']}), (256, {'index': '$254dup_top_two.22', 'target': '$254dup_top_two.21', 'res': '$256binary_subscr.23'}), (258, {'res': '$major_len258.24'}), (260, {'lhs': '$256binary_subscr.23', 'rhs': '$major_len258.24', 'res': '$260inplace_true_divide.25'}), (264, {'target': '$variances250.19', 'index': '$i252.20', 'value': '$260inplace_true_divide.25'}), (266, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={210: ('$phi212.0',)})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=268 nstack_initial=0):
    AdaptBlockInfo(insts=((268, {'res': '$means268.0'}), (270, {'res': '$variances270.1'}), (272, {'items': ['$means268.0', '$variances270.1'], 'res': '$272build_tuple.2'}), (274, {'retval': '$272build_tuple.2', 'castval': '$274return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        data = arg(0, name=data)                 ['data']
        indices = arg(1, name=indices)           ['indices']
        major_len = arg(2, name=major_len)       ['major_len']
        minor_len = arg(3, name=minor_len)       ['minor_len']
        dtype = arg(4, name=dtype)               ['dtype']
        $4load_attr.1 = getattr(value=indices, attr=shape) ['$4load_attr.1', 'indices']
        $const6.2 = const(int, 0)                ['$const6.2']
        non_zero = getitem(value=$4load_attr.1, index=$const6.2, fn=<built-in function getitem>) ['$4load_attr.1', '$const6.2', 'non_zero']
        $12load_global.4 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$12load_global.4']
        $14load_attr.5 = getattr(value=$12load_global.4, attr=zeros) ['$12load_global.4', '$14load_attr.5']
        means = call $14load_attr.5(minor_len, func=$14load_attr.5, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None) ['$14load_attr.5', 'dtype', 'means', 'minor_len']
        $26load_global.10 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$26load_global.10']
        $28load_attr.11 = getattr(value=$26load_global.10, attr=zeros_like) ['$26load_global.10', '$28load_attr.11']
        variances = call $28load_attr.11(means, func=$28load_attr.11, args=[Var(means, _utils.py:55)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None) ['$28load_attr.11', 'dtype', 'means', 'variances']
        $40load_global.16 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$40load_global.16']
        $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros) ['$40load_global.16', '$42load_attr.17']
        $46load_global.19 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$46load_global.19']
        $48load_attr.20 = getattr(value=$46load_global.19, attr=int64) ['$46load_global.19', '$48load_attr.20']
        counts = call $42load_attr.17(minor_len, func=$42load_attr.17, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var($48load_attr.20, _utils.py:58))], vararg=None, varkwarg=None, target=None) ['$42load_attr.17', '$48load_attr.20', 'counts', 'minor_len']
        $56load_global.23 = global(range: <class 'range'>) ['$56load_global.23']
        $60call_function.25 = call $56load_global.23(non_zero, func=$56load_global.23, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None) ['$56load_global.23', '$60call_function.25', 'non_zero']
        $62get_iter.26 = getiter(value=$60call_function.25) ['$60call_function.25', '$62get_iter.26']
        $phi64.0 = $62get_iter.26                ['$62get_iter.26', '$phi64.0']
        jump 64                                  []
    label 64:
        $64for_iter.1 = iternext(value=$phi64.0) ['$64for_iter.1', '$phi64.0']
        $64for_iter.2 = pair_first(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.2']
        $64for_iter.3 = pair_second(value=$64for_iter.1) ['$64for_iter.1', '$64for_iter.3']
        $phi66.1 = $64for_iter.2                 ['$64for_iter.2', '$phi66.1']
        branch $64for_iter.3, 66, 98             ['$64for_iter.3']
    label 66:
        i = $phi66.1                             ['$phi66.1', 'i']
        col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>) ['col_ind', 'i', 'indices']
        $82binary_subscr.9 = getitem(value=means, index=col_ind, fn=<built-in function getitem>) ['$82binary_subscr.9', 'col_ind', 'means']
        $88binary_subscr.12 = getitem(value=data, index=i, fn=<built-in function getitem>) ['$88binary_subscr.12', 'data', 'i']
        $90inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$82binary_subscr.9, rhs=$88binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined) ['$82binary_subscr.9', '$88binary_subscr.12', '$90inplace_add.13']
        means[col_ind] = $90inplace_add.13       ['$90inplace_add.13', 'col_ind', 'means']
        jump 64                                  []
    label 98:
        $98load_global.0 = global(range: <class 'range'>) ['$98load_global.0']
        $102call_function.2 = call $98load_global.0(minor_len, func=$98load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None) ['$102call_function.2', '$98load_global.0', 'minor_len']
        $104get_iter.3 = getiter(value=$102call_function.2) ['$102call_function.2', '$104get_iter.3']
        $phi106.0 = $104get_iter.3               ['$104get_iter.3', '$phi106.0']
        jump 106                                 []
    label 106:
        $106for_iter.1 = iternext(value=$phi106.0) ['$106for_iter.1', '$phi106.0']
        $106for_iter.2 = pair_first(value=$106for_iter.1) ['$106for_iter.1', '$106for_iter.2']
        $106for_iter.3 = pair_second(value=$106for_iter.1) ['$106for_iter.1', '$106for_iter.3']
        $phi108.1 = $106for_iter.2               ['$106for_iter.2', '$phi108.1']
        branch $106for_iter.3, 108, 128          ['$106for_iter.3']
    label 108:
        i = $phi108.1                            ['$phi108.1', 'i']
        $116binary_subscr.6 = getitem(value=means, index=i, fn=<built-in function getitem>) ['$116binary_subscr.6', 'i', 'means']
        $120inplace_true_divide.8 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$116binary_subscr.6, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined) ['$116binary_subscr.6', '$120inplace_true_divide.8', 'major_len']
        means[i] = $120inplace_true_divide.8     ['$120inplace_true_divide.8', 'i', 'means']
        jump 106                                 []
    label 128:
        $128load_global.0 = global(range: <class 'range'>) ['$128load_global.0']
        $132call_function.2 = call $128load_global.0(non_zero, func=$128load_global.0, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None) ['$128load_global.0', '$132call_function.2', 'non_zero']
        $134get_iter.3 = getiter(value=$132call_function.2) ['$132call_function.2', '$134get_iter.3']
        $phi136.0 = $134get_iter.3               ['$134get_iter.3', '$phi136.0']
        jump 136                                 []
    label 136:
        $136for_iter.1 = iternext(value=$phi136.0) ['$136for_iter.1', '$phi136.0']
        $136for_iter.2 = pair_first(value=$136for_iter.1) ['$136for_iter.1', '$136for_iter.2']
        $136for_iter.3 = pair_second(value=$136for_iter.1) ['$136for_iter.1', '$136for_iter.3']
        $phi138.1 = $136for_iter.2               ['$136for_iter.2', '$phi138.1']
        branch $136for_iter.3, 138, 202          ['$136for_iter.3']
    label 138:
        i = $phi138.1                            ['$phi138.1', 'i']
        col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>) ['col_ind', 'i', 'indices']
        $152binary_subscr.7 = getitem(value=data, index=i, fn=<built-in function getitem>) ['$152binary_subscr.7', 'data', 'i']
        $158binary_subscr.10 = getitem(value=means, index=col_ind, fn=<built-in function getitem>) ['$158binary_subscr.10', 'col_ind', 'means']
        diff = $152binary_subscr.7 - $158binary_subscr.10 ['$152binary_subscr.7', '$158binary_subscr.10', 'diff']
        $170binary_subscr.16 = getitem(value=variances, index=col_ind, fn=<built-in function getitem>) ['$170binary_subscr.16', 'col_ind', 'variances']
        $176binary_multiply.19 = diff * diff     ['$176binary_multiply.19', 'diff', 'diff']
        $178inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$170binary_subscr.16, rhs=$176binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined) ['$170binary_subscr.16', '$176binary_multiply.19', '$178inplace_add.20']
        variances[col_ind] = $178inplace_add.20  ['$178inplace_add.20', 'col_ind', 'variances']
        $190binary_subscr.25 = getitem(value=counts, index=col_ind, fn=<built-in function getitem>) ['$190binary_subscr.25', 'col_ind', 'counts']
        $const192.26 = const(int, 1)             ['$const192.26']
        $194inplace_add.27 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$190binary_subscr.25, rhs=$const192.26, static_lhs=Undefined, static_rhs=Undefined) ['$190binary_subscr.25', '$194inplace_add.27', '$const192.26']
        counts[col_ind] = $194inplace_add.27     ['$194inplace_add.27', 'col_ind', 'counts']
        jump 136                                 []
    label 202:
        $202load_global.0 = global(range: <class 'range'>) ['$202load_global.0']
        $206call_function.2 = call $202load_global.0(minor_len, func=$202load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None) ['$202load_global.0', '$206call_function.2', 'minor_len']
        $208get_iter.3 = getiter(value=$206call_function.2) ['$206call_function.2', '$208get_iter.3']
        $phi210.0 = $208get_iter.3               ['$208get_iter.3', '$phi210.0']
        jump 210                                 []
    label 210:
        $210for_iter.1 = iternext(value=$phi210.0) ['$210for_iter.1', '$phi210.0']
        $210for_iter.2 = pair_first(value=$210for_iter.1) ['$210for_iter.1', '$210for_iter.2']
        $210for_iter.3 = pair_second(value=$210for_iter.1) ['$210for_iter.1', '$210for_iter.3']
        $phi212.1 = $210for_iter.2               ['$210for_iter.2', '$phi212.1']
        branch $210for_iter.3, 212, 268          ['$210for_iter.3']
    label 212:
        i = $phi212.1                            ['$phi212.1', 'i']
        $220binary_subscr.6 = getitem(value=variances, index=i, fn=<built-in function getitem>) ['$220binary_subscr.6', 'i', 'variances']
        $228binary_subscr.10 = getitem(value=counts, index=i, fn=<built-in function getitem>) ['$228binary_subscr.10', 'counts', 'i']
        $230binary_subtract.11 = major_len - $228binary_subscr.10 ['$228binary_subscr.10', '$230binary_subtract.11', 'major_len']
        $236binary_subscr.14 = getitem(value=means, index=i, fn=<built-in function getitem>) ['$236binary_subscr.14', 'i', 'means']
        $const238.15 = const(int, 2)             ['$const238.15']
        $240binary_power.16 = $236binary_subscr.14 ** $const238.15 ['$236binary_subscr.14', '$240binary_power.16', '$const238.15']
        $242binary_multiply.17 = $230binary_subtract.11 * $240binary_power.16 ['$230binary_subtract.11', '$240binary_power.16', '$242binary_multiply.17']
        $244inplace_add.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$220binary_subscr.6, rhs=$242binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined) ['$220binary_subscr.6', '$242binary_multiply.17', '$244inplace_add.18']
        variances[i] = $244inplace_add.18        ['$244inplace_add.18', 'i', 'variances']
        $256binary_subscr.23 = getitem(value=variances, index=i, fn=<built-in function getitem>) ['$256binary_subscr.23', 'i', 'variances']
        $260inplace_true_divide.25 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$256binary_subscr.23, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined) ['$256binary_subscr.23', '$260inplace_true_divide.25', 'major_len']
        variances[i] = $260inplace_true_divide.25 ['$260inplace_true_divide.25', 'i', 'variances']
        jump 210                                 []
    label 268:
        $272build_tuple.2 = build_tuple(items=[Var(means, _utils.py:55), Var(variances, _utils.py:56)]) ['$272build_tuple.2', 'means', 'variances']
        $274return_value.3 = cast(value=$272build_tuple.2) ['$272build_tuple.2', '$274return_value.3']
        return $274return_value.3                ['$274return_value.3']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: data = arg(0, name=data)
    DEBUG:numba.core.ssa:on stmt: indices = arg(1, name=indices)
    DEBUG:numba.core.ssa:on stmt: major_len = arg(2, name=major_len)
    DEBUG:numba.core.ssa:on stmt: minor_len = arg(3, name=minor_len)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(4, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=indices, attr=shape)
    DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: non_zero = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $12load_global.4 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: means = call $14load_attr.5(minor_len, func=$14load_attr.5, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=zeros_like)
    DEBUG:numba.core.ssa:on stmt: variances = call $28load_attr.11(means, func=$28load_attr.11, args=[Var(means, _utils.py:55)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $40load_global.16 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $48load_attr.20 = getattr(value=$46load_global.19, attr=int64)
    DEBUG:numba.core.ssa:on stmt: counts = call $42load_attr.17(minor_len, func=$42load_attr.17, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var($48load_attr.20, _utils.py:58))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $56load_global.23 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $60call_function.25 = call $56load_global.23(non_zero, func=$56load_global.23, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $62get_iter.26 = getiter(value=$60call_function.25)
    DEBUG:numba.core.ssa:on stmt: $phi64.0 = $62get_iter.26
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 64
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: $64for_iter.1 = iternext(value=$phi64.0)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi66.1 = $64for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $64for_iter.3, 66, 98
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 66
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: i = $phi66.1
    DEBUG:numba.core.ssa:on stmt: col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $82binary_subscr.9 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $88binary_subscr.12 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $90inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$82binary_subscr.9, rhs=$88binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[col_ind] = $90inplace_add.13
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: $98load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $102call_function.2 = call $98load_global.0(minor_len, func=$98load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $104get_iter.3 = getiter(value=$102call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi106.0 = $104get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: $106for_iter.1 = iternext(value=$phi106.0)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.2 = pair_first(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.3 = pair_second(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi108.1 = $106for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $106for_iter.3, 108, 128
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 108
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: i = $phi108.1
    DEBUG:numba.core.ssa:on stmt: $116binary_subscr.6 = getitem(value=means, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $120inplace_true_divide.8 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$116binary_subscr.6, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[i] = $120inplace_true_divide.8
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 128
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: $128load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $132call_function.2 = call $128load_global.0(non_zero, func=$128load_global.0, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $134get_iter.3 = getiter(value=$132call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi136.0 = $134get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 136
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: $136for_iter.1 = iternext(value=$phi136.0)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.2 = pair_first(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.3 = pair_second(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi138.1 = $136for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $136for_iter.3, 138, 202
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: i = $phi138.1
    DEBUG:numba.core.ssa:on stmt: col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $152binary_subscr.7 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $158binary_subscr.10 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: diff = $152binary_subscr.7 - $158binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $170binary_subscr.16 = getitem(value=variances, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $176binary_multiply.19 = diff * diff
    DEBUG:numba.core.ssa:on stmt: $178inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$170binary_subscr.16, rhs=$176binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[col_ind] = $178inplace_add.20
    DEBUG:numba.core.ssa:on stmt: $190binary_subscr.25 = getitem(value=counts, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const192.26 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $194inplace_add.27 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$190binary_subscr.25, rhs=$const192.26, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: counts[col_ind] = $194inplace_add.27
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 202
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: $202load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $206call_function.2 = call $202load_global.0(minor_len, func=$202load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $208get_iter.3 = getiter(value=$206call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi210.0 = $208get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 210
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: $210for_iter.1 = iternext(value=$phi210.0)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.2 = pair_first(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.3 = pair_second(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi212.1 = $210for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $210for_iter.3, 212, 268
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 212
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: i = $phi212.1
    DEBUG:numba.core.ssa:on stmt: $220binary_subscr.6 = getitem(value=variances, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $228binary_subscr.10 = getitem(value=counts, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $230binary_subtract.11 = major_len - $228binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $236binary_subscr.14 = getitem(value=means, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const238.15 = const(int, 2)
    DEBUG:numba.core.ssa:on stmt: $240binary_power.16 = $236binary_subscr.14 ** $const238.15
    DEBUG:numba.core.ssa:on stmt: $242binary_multiply.17 = $230binary_subtract.11 * $240binary_power.16
    DEBUG:numba.core.ssa:on stmt: $244inplace_add.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$220binary_subscr.6, rhs=$242binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i] = $244inplace_add.18
    DEBUG:numba.core.ssa:on stmt: $256binary_subscr.23 = getitem(value=variances, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $260inplace_true_divide.25 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$256binary_subscr.23, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i] = $260inplace_true_divide.25
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 268
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8680f10>
    DEBUG:numba.core.ssa:on stmt: $272build_tuple.2 = build_tuple(items=[Var(means, _utils.py:55), Var(variances, _utils.py:56)])
    DEBUG:numba.core.ssa:on stmt: $274return_value.3 = cast(value=$272build_tuple.2)
    DEBUG:numba.core.ssa:on stmt: return $274return_value.3
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$102call_function.2': [<numba.core.ir.Assign object at 0x7f2cb866eb50>],
                 '$104get_iter.3': [<numba.core.ir.Assign object at 0x7f2cb866ec70>],
                 '$106for_iter.1': [<numba.core.ir.Assign object at 0x7f2cb866efa0>],
                 '$106for_iter.2': [<numba.core.ir.Assign object at 0x7f2cb866f100>],
                 '$106for_iter.3': [<numba.core.ir.Assign object at 0x7f2cb866f220>],
                 '$116binary_subscr.6': [<numba.core.ir.Assign object at 0x7f2cb866fa60>],
                 '$120inplace_true_divide.8': [<numba.core.ir.Assign object at 0x7f2cb866fd00>],
                 '$128load_global.0': [<numba.core.ir.Assign object at 0x7f2cb866fbe0>],
                 '$12load_global.4': [<numba.core.ir.Assign object at 0x7f2cb86a8f70>],
                 '$132call_function.2': [<numba.core.ir.Assign object at 0x7f2cb86721f0>],
                 '$134get_iter.3': [<numba.core.ir.Assign object at 0x7f2cb8672310>],
                 '$136for_iter.1': [<numba.core.ir.Assign object at 0x7f2cb8672640>],
                 '$136for_iter.2': [<numba.core.ir.Assign object at 0x7f2cb8672760>],
                 '$136for_iter.3': [<numba.core.ir.Assign object at 0x7f2cb8672880>],
                 '$14load_attr.5': [<numba.core.ir.Assign object at 0x7f2cb8664130>],
                 '$152binary_subscr.7': [<numba.core.ir.Assign object at 0x7f2cb86753a0>],
                 '$158binary_subscr.10': [<numba.core.ir.Assign object at 0x7f2cb8675760>],
                 '$170binary_subscr.16': [<numba.core.ir.Assign object at 0x7f2cb8675fa0>],
                 '$176binary_multiply.19': [<numba.core.ir.Assign object at 0x7f2cb867a3a0>],
                 '$178inplace_add.20': [<numba.core.ir.Assign object at 0x7f2cb867a520>],
                 '$190binary_subscr.25': [<numba.core.ir.Assign object at 0x7f2cb867ab80>],
                 '$194inplace_add.27': [<numba.core.ir.Assign object at 0x7f2cb867ae80>],
                 '$202load_global.0': [<numba.core.ir.Assign object at 0x7f2cb8675b80>],
                 '$206call_function.2': [<numba.core.ir.Assign object at 0x7f2cb867aa00>],
                 '$208get_iter.3': [<numba.core.ir.Assign object at 0x7f2cb8672ca0>],
                 '$210for_iter.1': [<numba.core.ir.Assign object at 0x7f2cb867c280>],
                 '$210for_iter.2': [<numba.core.ir.Assign object at 0x7f2cb867c3a0>],
                 '$210for_iter.3': [<numba.core.ir.Assign object at 0x7f2cb867c4c0>],
                 '$220binary_subscr.6': [<numba.core.ir.Assign object at 0x7f2cb867cd00>],
                 '$228binary_subscr.10': [<numba.core.ir.Assign object at 0x7f2cb867f220>],
                 '$230binary_subtract.11': [<numba.core.ir.Assign object at 0x7f2cb867f3a0>],
                 '$236binary_subscr.14': [<numba.core.ir.Assign object at 0x7f2cb867f760>],
                 '$240binary_power.16': [<numba.core.ir.Assign object at 0x7f2cb867fa60>],
                 '$242binary_multiply.17': [<numba.core.ir.Assign object at 0x7f2cb867fbe0>],
                 '$244inplace_add.18': [<numba.core.ir.Assign object at 0x7f2cb867fd60>],
                 '$256binary_subscr.23': [<numba.core.ir.Assign object at 0x7f2cb8680400>],
                 '$260inplace_true_divide.25': [<numba.core.ir.Assign object at 0x7f2cb86806a0>],
                 '$26load_global.10': [<numba.core.ir.Assign object at 0x7f2cb8664970>],
                 '$272build_tuple.2': [<numba.core.ir.Assign object at 0x7f2cb86801f0>],
                 '$274return_value.3': [<numba.core.ir.Assign object at 0x7f2cb86808b0>],
                 '$28load_attr.11': [<numba.core.ir.Assign object at 0x7f2cb8664af0>],
                 '$40load_global.16': [<numba.core.ir.Assign object at 0x7f2cb8669370>],
                 '$42load_attr.17': [<numba.core.ir.Assign object at 0x7f2cb86694f0>],
                 '$46load_global.19': [<numba.core.ir.Assign object at 0x7f2cb8669790>],
                 '$48load_attr.20': [<numba.core.ir.Assign object at 0x7f2cb8669910>],
                 '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f2cb86a89d0>],
                 '$56load_global.23': [<numba.core.ir.Assign object at 0x7f2cb8669f10>],
                 '$60call_function.25': [<numba.core.ir.Assign object at 0x7f2cb866b250>],
                 '$62get_iter.26': [<numba.core.ir.Assign object at 0x7f2cb866b370>],
                 '$64for_iter.1': [<numba.core.ir.Assign object at 0x7f2cb8669df0>],
                 '$64for_iter.2': [<numba.core.ir.Assign object at 0x7f2cb866b3d0>],
                 '$64for_iter.3': [<numba.core.ir.Assign object at 0x7f2cb866b520>],
                 '$82binary_subscr.9': [<numba.core.ir.Assign object at 0x7f2cb866e2e0>],
                 '$88binary_subscr.12': [<numba.core.ir.Assign object at 0x7f2cb866e6a0>],
                 '$90inplace_add.13': [<numba.core.ir.Assign object at 0x7f2cb866e820>],
                 '$98load_global.0': [<numba.core.ir.Assign object at 0x7f2cb8664c10>],
                 '$const192.26': [<numba.core.ir.Assign object at 0x7f2cb867acd0>],
                 '$const238.15': [<numba.core.ir.Assign object at 0x7f2cb867f8b0>],
                 '$const6.2': [<numba.core.ir.Assign object at 0x7f2cb86a8b50>],
                 '$phi106.0': [<numba.core.ir.Assign object at 0x7f2cb866e460>],
                 '$phi108.1': [<numba.core.ir.Assign object at 0x7f2cb866eee0>],
                 '$phi136.0': [<numba.core.ir.Assign object at 0x7f2cb866f430>],
                 '$phi138.1': [<numba.core.ir.Assign object at 0x7f2cb8672580>],
                 '$phi210.0': [<numba.core.ir.Assign object at 0x7f2cb8675ee0>],
                 '$phi212.1': [<numba.core.ir.Assign object at 0x7f2cb867c1c0>],
                 '$phi64.0': [<numba.core.ir.Assign object at 0x7f2cb86a88e0>],
                 '$phi66.1': [<numba.core.ir.Assign object at 0x7f2cb8669250>],
                 'col_ind': [<numba.core.ir.Assign object at 0x7f2cb866bbe0>,
                             <numba.core.ir.Assign object at 0x7f2cb8672ee0>],
                 'counts': [<numba.core.ir.Assign object at 0x7f2cb8669d90>],
                 'data': [<numba.core.ir.Assign object at 0x7f2cb86a3430>],
                 'diff': [<numba.core.ir.Assign object at 0x7f2cb86758e0>],
                 'dtype': [<numba.core.ir.Assign object at 0x7f2cb86a8730>],
                 'i': [<numba.core.ir.Assign object at 0x7f2cb866b7f0>,
                       <numba.core.ir.Assign object at 0x7f2cb866f4c0>,
                       <numba.core.ir.Assign object at 0x7f2cb8672b20>,
                       <numba.core.ir.Assign object at 0x7f2cb867c760>],
                 'indices': [<numba.core.ir.Assign object at 0x7f2cb86a8310>],
                 'major_len': [<numba.core.ir.Assign object at 0x7f2cb86a80d0>],
                 'means': [<numba.core.ir.Assign object at 0x7f2cb86647f0>],
                 'minor_len': [<numba.core.ir.Assign object at 0x7f2cb86a8610>],
                 'non_zero': [<numba.core.ir.Assign object at 0x7f2cb8680e20>],
                 'variances': [<numba.core.ir.Assign object at 0x7f2cb86691f0>]})
    DEBUG:numba.core.ssa:SSA violators {'i', 'col_ind'}
    DEBUG:numba.core.ssa:Fix SSA violator on var i
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: data = arg(0, name=data)
    DEBUG:numba.core.ssa:on stmt: indices = arg(1, name=indices)
    DEBUG:numba.core.ssa:on stmt: major_len = arg(2, name=major_len)
    DEBUG:numba.core.ssa:on stmt: minor_len = arg(3, name=minor_len)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(4, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=indices, attr=shape)
    DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: non_zero = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $12load_global.4 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: means = call $14load_attr.5(minor_len, func=$14load_attr.5, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=zeros_like)
    DEBUG:numba.core.ssa:on stmt: variances = call $28load_attr.11(means, func=$28load_attr.11, args=[Var(means, _utils.py:55)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $40load_global.16 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $48load_attr.20 = getattr(value=$46load_global.19, attr=int64)
    DEBUG:numba.core.ssa:on stmt: counts = call $42load_attr.17(minor_len, func=$42load_attr.17, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var($48load_attr.20, _utils.py:58))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $56load_global.23 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $60call_function.25 = call $56load_global.23(non_zero, func=$56load_global.23, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $62get_iter.26 = getiter(value=$60call_function.25)
    DEBUG:numba.core.ssa:on stmt: $phi64.0 = $62get_iter.26
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 64
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $64for_iter.1 = iternext(value=$phi64.0)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi66.1 = $64for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $64for_iter.3, 66, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i = $phi66.1
    DEBUG:numba.core.ssa:first assign: i
    DEBUG:numba.core.ssa:replaced with: i = $phi66.1
    DEBUG:numba.core.ssa:on stmt: col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $82binary_subscr.9 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $88binary_subscr.12 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $90inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$82binary_subscr.9, rhs=$88binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[col_ind] = $90inplace_add.13
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $98load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $102call_function.2 = call $98load_global.0(minor_len, func=$98load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $104get_iter.3 = getiter(value=$102call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi106.0 = $104get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $106for_iter.1 = iternext(value=$phi106.0)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.2 = pair_first(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.3 = pair_second(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi108.1 = $106for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $106for_iter.3, 108, 128
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i = $phi108.1
    DEBUG:numba.core.ssa:replaced with: i.1 = $phi108.1
    DEBUG:numba.core.ssa:on stmt: $116binary_subscr.6 = getitem(value=means, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $120inplace_true_divide.8 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$116binary_subscr.6, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[i] = $120inplace_true_divide.8
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 128
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $128load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $132call_function.2 = call $128load_global.0(non_zero, func=$128load_global.0, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $134get_iter.3 = getiter(value=$132call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi136.0 = $134get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 136
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $136for_iter.1 = iternext(value=$phi136.0)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.2 = pair_first(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.3 = pair_second(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi138.1 = $136for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $136for_iter.3, 138, 202
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i = $phi138.1
    DEBUG:numba.core.ssa:replaced with: i.2 = $phi138.1
    DEBUG:numba.core.ssa:on stmt: col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $152binary_subscr.7 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $158binary_subscr.10 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: diff = $152binary_subscr.7 - $158binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $170binary_subscr.16 = getitem(value=variances, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $176binary_multiply.19 = diff * diff
    DEBUG:numba.core.ssa:on stmt: $178inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$170binary_subscr.16, rhs=$176binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[col_ind] = $178inplace_add.20
    DEBUG:numba.core.ssa:on stmt: $190binary_subscr.25 = getitem(value=counts, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const192.26 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $194inplace_add.27 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$190binary_subscr.25, rhs=$const192.26, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: counts[col_ind] = $194inplace_add.27
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 202
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $202load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $206call_function.2 = call $202load_global.0(minor_len, func=$202load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $208get_iter.3 = getiter(value=$206call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi210.0 = $208get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 210
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $210for_iter.1 = iternext(value=$phi210.0)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.2 = pair_first(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.3 = pair_second(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi212.1 = $210for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $210for_iter.3, 212, 268
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 212
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i = $phi212.1
    DEBUG:numba.core.ssa:replaced with: i.3 = $phi212.1
    DEBUG:numba.core.ssa:on stmt: $220binary_subscr.6 = getitem(value=variances, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $228binary_subscr.10 = getitem(value=counts, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $230binary_subtract.11 = major_len - $228binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $236binary_subscr.14 = getitem(value=means, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const238.15 = const(int, 2)
    DEBUG:numba.core.ssa:on stmt: $240binary_power.16 = $236binary_subscr.14 ** $const238.15
    DEBUG:numba.core.ssa:on stmt: $242binary_multiply.17 = $230binary_subtract.11 * $240binary_power.16
    DEBUG:numba.core.ssa:on stmt: $244inplace_add.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$220binary_subscr.6, rhs=$242binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i] = $244inplace_add.18
    DEBUG:numba.core.ssa:on stmt: $256binary_subscr.23 = getitem(value=variances, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $260inplace_true_divide.25 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$256binary_subscr.23, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i] = $260inplace_true_divide.25
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 268
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $272build_tuple.2 = build_tuple(items=[Var(means, _utils.py:55), Var(variances, _utils.py:56)])
    DEBUG:numba.core.ssa:on stmt: $274return_value.3 = cast(value=$272build_tuple.2)
    DEBUG:numba.core.ssa:on stmt: return $274return_value.3
    DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
                {66: [<numba.core.ir.Assign object at 0x7f2cb8680e80>],
                 108: [<numba.core.ir.Assign object at 0x7f2cb86a3550>],
                 138: [<numba.core.ir.Assign object at 0x7f2cb8625580>],
                 212: [<numba.core.ir.Assign object at 0x7f2cb86255b0>]})
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: data = arg(0, name=data)
    DEBUG:numba.core.ssa:on stmt: indices = arg(1, name=indices)
    DEBUG:numba.core.ssa:on stmt: major_len = arg(2, name=major_len)
    DEBUG:numba.core.ssa:on stmt: minor_len = arg(3, name=minor_len)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(4, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=indices, attr=shape)
    DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: non_zero = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $12load_global.4 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: means = call $14load_attr.5(minor_len, func=$14load_attr.5, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=zeros_like)
    DEBUG:numba.core.ssa:on stmt: variances = call $28load_attr.11(means, func=$28load_attr.11, args=[Var(means, _utils.py:55)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $40load_global.16 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $48load_attr.20 = getattr(value=$46load_global.19, attr=int64)
    DEBUG:numba.core.ssa:on stmt: counts = call $42load_attr.17(minor_len, func=$42load_attr.17, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var($48load_attr.20, _utils.py:58))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $56load_global.23 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $60call_function.25 = call $56load_global.23(non_zero, func=$56load_global.23, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $62get_iter.26 = getiter(value=$60call_function.25)
    DEBUG:numba.core.ssa:on stmt: $phi64.0 = $62get_iter.26
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 64
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $64for_iter.1 = iternext(value=$phi64.0)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi66.1 = $64for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $64for_iter.3, 66, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i = $phi66.1
    DEBUG:numba.core.ssa:on stmt: col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='i' stmt=col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $82binary_subscr.9 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $88binary_subscr.12 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='i' stmt=$88binary_subscr.12 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $90inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$82binary_subscr.9, rhs=$88binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[col_ind] = $90inplace_add.13
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $98load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $102call_function.2 = call $98load_global.0(minor_len, func=$98load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $104get_iter.3 = getiter(value=$102call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi106.0 = $104get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $106for_iter.1 = iternext(value=$phi106.0)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.2 = pair_first(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.3 = pair_second(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi108.1 = $106for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $106for_iter.3, 108, 128
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i.1 = $phi108.1
    DEBUG:numba.core.ssa:on stmt: $116binary_subscr.6 = getitem(value=means, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='i' stmt=$116binary_subscr.6 = getitem(value=means, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: $116binary_subscr.6 = getitem(value=means, index=i.1, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $120inplace_true_divide.8 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$116binary_subscr.6, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[i] = $120inplace_true_divide.8
    DEBUG:numba.core.ssa:find_def var='i' stmt=means[i] = $120inplace_true_divide.8
    DEBUG:numba.core.ssa:replaced with: means[i.1] = $120inplace_true_divide.8
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 128
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $128load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $132call_function.2 = call $128load_global.0(non_zero, func=$128load_global.0, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $134get_iter.3 = getiter(value=$132call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi136.0 = $134get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 136
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $136for_iter.1 = iternext(value=$phi136.0)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.2 = pair_first(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.3 = pair_second(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi138.1 = $136for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $136for_iter.3, 138, 202
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i.2 = $phi138.1
    DEBUG:numba.core.ssa:on stmt: col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='i' stmt=col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: col_ind = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $152binary_subscr.7 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='i' stmt=$152binary_subscr.7 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: $152binary_subscr.7 = getitem(value=data, index=i.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $158binary_subscr.10 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: diff = $152binary_subscr.7 - $158binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $170binary_subscr.16 = getitem(value=variances, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $176binary_multiply.19 = diff * diff
    DEBUG:numba.core.ssa:on stmt: $178inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$170binary_subscr.16, rhs=$176binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[col_ind] = $178inplace_add.20
    DEBUG:numba.core.ssa:on stmt: $190binary_subscr.25 = getitem(value=counts, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const192.26 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $194inplace_add.27 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$190binary_subscr.25, rhs=$const192.26, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: counts[col_ind] = $194inplace_add.27
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 202
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $202load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $206call_function.2 = call $202load_global.0(minor_len, func=$202load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $208get_iter.3 = getiter(value=$206call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi210.0 = $208get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 210
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $210for_iter.1 = iternext(value=$phi210.0)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.2 = pair_first(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.3 = pair_second(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi212.1 = $210for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $210for_iter.3, 212, 268
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 212
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i.3 = $phi212.1
    DEBUG:numba.core.ssa:on stmt: $220binary_subscr.6 = getitem(value=variances, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='i' stmt=$220binary_subscr.6 = getitem(value=variances, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: $220binary_subscr.6 = getitem(value=variances, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $228binary_subscr.10 = getitem(value=counts, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='i' stmt=$228binary_subscr.10 = getitem(value=counts, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: $228binary_subscr.10 = getitem(value=counts, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $230binary_subtract.11 = major_len - $228binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $236binary_subscr.14 = getitem(value=means, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='i' stmt=$236binary_subscr.14 = getitem(value=means, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: $236binary_subscr.14 = getitem(value=means, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const238.15 = const(int, 2)
    DEBUG:numba.core.ssa:on stmt: $240binary_power.16 = $236binary_subscr.14 ** $const238.15
    DEBUG:numba.core.ssa:on stmt: $242binary_multiply.17 = $230binary_subtract.11 * $240binary_power.16
    DEBUG:numba.core.ssa:on stmt: $244inplace_add.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$220binary_subscr.6, rhs=$242binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i] = $244inplace_add.18
    DEBUG:numba.core.ssa:find_def var='i' stmt=variances[i] = $244inplace_add.18
    DEBUG:numba.core.ssa:replaced with: variances[i.3] = $244inplace_add.18
    DEBUG:numba.core.ssa:on stmt: $256binary_subscr.23 = getitem(value=variances, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='i' stmt=$256binary_subscr.23 = getitem(value=variances, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: $256binary_subscr.23 = getitem(value=variances, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $260inplace_true_divide.25 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$256binary_subscr.23, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i] = $260inplace_true_divide.25
    DEBUG:numba.core.ssa:find_def var='i' stmt=variances[i] = $260inplace_true_divide.25
    DEBUG:numba.core.ssa:replaced with: variances[i.3] = $260inplace_true_divide.25
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 268
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $272build_tuple.2 = build_tuple(items=[Var(means, _utils.py:55), Var(variances, _utils.py:56)])
    DEBUG:numba.core.ssa:on stmt: $274return_value.3 = cast(value=$272build_tuple.2)
    DEBUG:numba.core.ssa:on stmt: return $274return_value.3
    DEBUG:numba.core.ssa:Fix SSA violator on var col_ind
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: data = arg(0, name=data)
    DEBUG:numba.core.ssa:on stmt: indices = arg(1, name=indices)
    DEBUG:numba.core.ssa:on stmt: major_len = arg(2, name=major_len)
    DEBUG:numba.core.ssa:on stmt: minor_len = arg(3, name=minor_len)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(4, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=indices, attr=shape)
    DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: non_zero = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $12load_global.4 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: means = call $14load_attr.5(minor_len, func=$14load_attr.5, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=zeros_like)
    DEBUG:numba.core.ssa:on stmt: variances = call $28load_attr.11(means, func=$28load_attr.11, args=[Var(means, _utils.py:55)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $40load_global.16 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $48load_attr.20 = getattr(value=$46load_global.19, attr=int64)
    DEBUG:numba.core.ssa:on stmt: counts = call $42load_attr.17(minor_len, func=$42load_attr.17, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var($48load_attr.20, _utils.py:58))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $56load_global.23 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $60call_function.25 = call $56load_global.23(non_zero, func=$56load_global.23, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $62get_iter.26 = getiter(value=$60call_function.25)
    DEBUG:numba.core.ssa:on stmt: $phi64.0 = $62get_iter.26
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 64
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: $64for_iter.1 = iternext(value=$phi64.0)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi66.1 = $64for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $64for_iter.3, 66, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: i = $phi66.1
    DEBUG:numba.core.ssa:on stmt: col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:first assign: col_ind
    DEBUG:numba.core.ssa:replaced with: col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $82binary_subscr.9 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $88binary_subscr.12 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $90inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$82binary_subscr.9, rhs=$88binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[col_ind] = $90inplace_add.13
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: $98load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $102call_function.2 = call $98load_global.0(minor_len, func=$98load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $104get_iter.3 = getiter(value=$102call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi106.0 = $104get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: $106for_iter.1 = iternext(value=$phi106.0)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.2 = pair_first(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.3 = pair_second(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi108.1 = $106for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $106for_iter.3, 108, 128
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: i.1 = $phi108.1
    DEBUG:numba.core.ssa:on stmt: $116binary_subscr.6 = getitem(value=means, index=i.1, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $120inplace_true_divide.8 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$116binary_subscr.6, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[i.1] = $120inplace_true_divide.8
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 128
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: $128load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $132call_function.2 = call $128load_global.0(non_zero, func=$128load_global.0, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $134get_iter.3 = getiter(value=$132call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi136.0 = $134get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 136
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: $136for_iter.1 = iternext(value=$phi136.0)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.2 = pair_first(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.3 = pair_second(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi138.1 = $136for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $136for_iter.3, 138, 202
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: i.2 = $phi138.1
    DEBUG:numba.core.ssa:on stmt: col_ind = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: col_ind.1 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $152binary_subscr.7 = getitem(value=data, index=i.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $158binary_subscr.10 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: diff = $152binary_subscr.7 - $158binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $170binary_subscr.16 = getitem(value=variances, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $176binary_multiply.19 = diff * diff
    DEBUG:numba.core.ssa:on stmt: $178inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$170binary_subscr.16, rhs=$176binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[col_ind] = $178inplace_add.20
    DEBUG:numba.core.ssa:on stmt: $190binary_subscr.25 = getitem(value=counts, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const192.26 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $194inplace_add.27 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$190binary_subscr.25, rhs=$const192.26, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: counts[col_ind] = $194inplace_add.27
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 202
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: $202load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $206call_function.2 = call $202load_global.0(minor_len, func=$202load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $208get_iter.3 = getiter(value=$206call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi210.0 = $208get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 210
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: $210for_iter.1 = iternext(value=$phi210.0)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.2 = pair_first(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.3 = pair_second(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi212.1 = $210for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $210for_iter.3, 212, 268
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 212
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: i.3 = $phi212.1
    DEBUG:numba.core.ssa:on stmt: $220binary_subscr.6 = getitem(value=variances, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $228binary_subscr.10 = getitem(value=counts, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $230binary_subtract.11 = major_len - $228binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $236binary_subscr.14 = getitem(value=means, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const238.15 = const(int, 2)
    DEBUG:numba.core.ssa:on stmt: $240binary_power.16 = $236binary_subscr.14 ** $const238.15
    DEBUG:numba.core.ssa:on stmt: $242binary_multiply.17 = $230binary_subtract.11 * $240binary_power.16
    DEBUG:numba.core.ssa:on stmt: $244inplace_add.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$220binary_subscr.6, rhs=$242binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i.3] = $244inplace_add.18
    DEBUG:numba.core.ssa:on stmt: $256binary_subscr.23 = getitem(value=variances, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $260inplace_true_divide.25 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$256binary_subscr.23, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i.3] = $260inplace_true_divide.25
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 268
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb86a3a00>
    DEBUG:numba.core.ssa:on stmt: $272build_tuple.2 = build_tuple(items=[Var(means, _utils.py:55), Var(variances, _utils.py:56)])
    DEBUG:numba.core.ssa:on stmt: $274return_value.3 = cast(value=$272build_tuple.2)
    DEBUG:numba.core.ssa:on stmt: return $274return_value.3
    DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
                {66: [<numba.core.ir.Assign object at 0x7f2cb8680bb0>],
                 138: [<numba.core.ir.Assign object at 0x7f2cb8625f10>]})
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: data = arg(0, name=data)
    DEBUG:numba.core.ssa:on stmt: indices = arg(1, name=indices)
    DEBUG:numba.core.ssa:on stmt: major_len = arg(2, name=major_len)
    DEBUG:numba.core.ssa:on stmt: minor_len = arg(3, name=minor_len)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(4, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=indices, attr=shape)
    DEBUG:numba.core.ssa:on stmt: $const6.2 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: non_zero = static_getitem(value=$4load_attr.1, index=0, index_var=$const6.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $12load_global.4 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $14load_attr.5 = getattr(value=$12load_global.4, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: means = call $14load_attr.5(minor_len, func=$14load_attr.5, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $26load_global.10 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $28load_attr.11 = getattr(value=$26load_global.10, attr=zeros_like)
    DEBUG:numba.core.ssa:on stmt: variances = call $28load_attr.11(means, func=$28load_attr.11, args=[Var(means, _utils.py:55)], kws=[('dtype', Var(dtype, _utils.py:53))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $40load_global.16 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $42load_attr.17 = getattr(value=$40load_global.16, attr=zeros)
    DEBUG:numba.core.ssa:on stmt: $46load_global.19 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $48load_attr.20 = getattr(value=$46load_global.19, attr=int64)
    DEBUG:numba.core.ssa:on stmt: counts = call $42load_attr.17(minor_len, func=$42load_attr.17, args=[Var(minor_len, _utils.py:53)], kws=[('dtype', Var($48load_attr.20, _utils.py:58))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $56load_global.23 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $60call_function.25 = call $56load_global.23(non_zero, func=$56load_global.23, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $62get_iter.26 = getiter(value=$60call_function.25)
    DEBUG:numba.core.ssa:on stmt: $phi64.0 = $62get_iter.26
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 64
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $64for_iter.1 = iternext(value=$phi64.0)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.2 = pair_first(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $64for_iter.3 = pair_second(value=$64for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi66.1 = $64for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $64for_iter.3, 66, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 66
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i = $phi66.1
    DEBUG:numba.core.ssa:on stmt: col_ind = getitem(value=indices, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $82binary_subscr.9 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='col_ind' stmt=$82binary_subscr.9 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $88binary_subscr.12 = getitem(value=data, index=i, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $90inplace_add.13 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$82binary_subscr.9, rhs=$88binary_subscr.12, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[col_ind] = $90inplace_add.13
    DEBUG:numba.core.ssa:find_def var='col_ind' stmt=means[col_ind] = $90inplace_add.13
    DEBUG:numba.core.ssa:on stmt: jump 64
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $98load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $102call_function.2 = call $98load_global.0(minor_len, func=$98load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $104get_iter.3 = getiter(value=$102call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi106.0 = $104get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $106for_iter.1 = iternext(value=$phi106.0)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.2 = pair_first(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $106for_iter.3 = pair_second(value=$106for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi108.1 = $106for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $106for_iter.3, 108, 128
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 108
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i.1 = $phi108.1
    DEBUG:numba.core.ssa:on stmt: $116binary_subscr.6 = getitem(value=means, index=i.1, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $120inplace_true_divide.8 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$116binary_subscr.6, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: means[i.1] = $120inplace_true_divide.8
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 128
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $128load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $132call_function.2 = call $128load_global.0(non_zero, func=$128load_global.0, args=[Var(non_zero, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $134get_iter.3 = getiter(value=$132call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi136.0 = $134get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 136
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $136for_iter.1 = iternext(value=$phi136.0)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.2 = pair_first(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $136for_iter.3 = pair_second(value=$136for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi138.1 = $136for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $136for_iter.3, 138, 202
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i.2 = $phi138.1
    DEBUG:numba.core.ssa:on stmt: col_ind.1 = getitem(value=indices, index=i.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $152binary_subscr.7 = getitem(value=data, index=i.2, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $158binary_subscr.10 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='col_ind' stmt=$158binary_subscr.10 = getitem(value=means, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: $158binary_subscr.10 = getitem(value=means, index=col_ind.1, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: diff = $152binary_subscr.7 - $158binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $170binary_subscr.16 = getitem(value=variances, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='col_ind' stmt=$170binary_subscr.16 = getitem(value=variances, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: $170binary_subscr.16 = getitem(value=variances, index=col_ind.1, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $176binary_multiply.19 = diff * diff
    DEBUG:numba.core.ssa:on stmt: $178inplace_add.20 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$170binary_subscr.16, rhs=$176binary_multiply.19, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[col_ind] = $178inplace_add.20
    DEBUG:numba.core.ssa:find_def var='col_ind' stmt=variances[col_ind] = $178inplace_add.20
    DEBUG:numba.core.ssa:replaced with: variances[col_ind.1] = $178inplace_add.20
    DEBUG:numba.core.ssa:on stmt: $190binary_subscr.25 = getitem(value=counts, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:find_def var='col_ind' stmt=$190binary_subscr.25 = getitem(value=counts, index=col_ind, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:replaced with: $190binary_subscr.25 = getitem(value=counts, index=col_ind.1, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const192.26 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $194inplace_add.27 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$190binary_subscr.25, rhs=$const192.26, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: counts[col_ind] = $194inplace_add.27
    DEBUG:numba.core.ssa:find_def var='col_ind' stmt=counts[col_ind] = $194inplace_add.27
    DEBUG:numba.core.ssa:replaced with: counts[col_ind.1] = $194inplace_add.27
    DEBUG:numba.core.ssa:on stmt: jump 136
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 202
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $202load_global.0 = global(range: <class 'range'>)
    DEBUG:numba.core.ssa:on stmt: $206call_function.2 = call $202load_global.0(minor_len, func=$202load_global.0, args=[Var(minor_len, _utils.py:53)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $208get_iter.3 = getiter(value=$206call_function.2)
    DEBUG:numba.core.ssa:on stmt: $phi210.0 = $208get_iter.3
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 210
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $210for_iter.1 = iternext(value=$phi210.0)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.2 = pair_first(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $210for_iter.3 = pair_second(value=$210for_iter.1)
    DEBUG:numba.core.ssa:on stmt: $phi212.1 = $210for_iter.2
    DEBUG:numba.core.ssa:on stmt: branch $210for_iter.3, 212, 268
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 212
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: i.3 = $phi212.1
    DEBUG:numba.core.ssa:on stmt: $220binary_subscr.6 = getitem(value=variances, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $228binary_subscr.10 = getitem(value=counts, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $230binary_subtract.11 = major_len - $228binary_subscr.10
    DEBUG:numba.core.ssa:on stmt: $236binary_subscr.14 = getitem(value=means, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $const238.15 = const(int, 2)
    DEBUG:numba.core.ssa:on stmt: $240binary_power.16 = $236binary_subscr.14 ** $const238.15
    DEBUG:numba.core.ssa:on stmt: $242binary_multiply.17 = $230binary_subtract.11 * $240binary_power.16
    DEBUG:numba.core.ssa:on stmt: $244inplace_add.18 = inplace_binop(fn=<built-in function iadd>, immutable_fn=<built-in function add>, lhs=$220binary_subscr.6, rhs=$242binary_multiply.17, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i.3] = $244inplace_add.18
    DEBUG:numba.core.ssa:on stmt: $256binary_subscr.23 = getitem(value=variances, index=i.3, fn=<built-in function getitem>)
    DEBUG:numba.core.ssa:on stmt: $260inplace_true_divide.25 = inplace_binop(fn=<built-in function itruediv>, immutable_fn=<built-in function truediv>, lhs=$256binary_subscr.23, rhs=major_len, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: variances[i.3] = $260inplace_true_divide.25
    DEBUG:numba.core.ssa:on stmt: jump 210
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 268
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8680dc0>
    DEBUG:numba.core.ssa:on stmt: $272build_tuple.2 = build_tuple(items=[Var(means, _utils.py:55), Var(variances, _utils.py:56)])
    DEBUG:numba.core.ssa:on stmt: $274return_value.3 = cast(value=$272build_tuple.2)
    DEBUG:numba.core.ssa:on stmt: return $274return_value.3
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=4169)
               2    LOAD_GLOBAL(arg=0, lineno=4169)
               4    LOAD_ATTR(arg=1, lineno=4169)
               6    LOAD_FAST(arg=0, lineno=4169)
               8    LOAD_FAST(arg=1, lineno=4169)
              10    LOAD_CONST(arg=1, lineno=4169)
              12    CALL_FUNCTION_KW(arg=2, lineno=4169)
              14    STORE_FAST(arg=2, lineno=4169)
              16    LOAD_FAST(arg=2, lineno=4170)
              18    LOAD_METHOD(arg=2, lineno=4170)
              20    CALL_METHOD(arg=0, lineno=4170)
              22    POP_TOP(arg=None, lineno=4170)
              24    LOAD_FAST(arg=2, lineno=4171)
              26    RETURN_VALUE(arg=None, lineno=4171)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4169)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4169)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$shape6.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$shape6.2', '$dtype8.3']
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_FUNCTION_KW(arg=2, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$shape6.2', '$dtype8.3', '$const10.4']
    DEBUG:numba.core.byteflow:dispatch pc=14, inst=STORE_FAST(arg=2, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$12call_function_kw.5']
    DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4170)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=4170)
    DEBUG:numba.core.byteflow:stack ['$arr16.6']
    DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_METHOD(arg=0, lineno=4170)
    DEBUG:numba.core.byteflow:stack ['$18load_method.7']
    DEBUG:numba.core.byteflow:dispatch pc=22, inst=POP_TOP(arg=None, lineno=4170)
    DEBUG:numba.core.byteflow:stack ['$20call_method.8']
    DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=4171)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4171)
    DEBUG:numba.core.byteflow:stack ['$arr24.9']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$4load_attr.1', 'args': ['$shape6.2', '$dtype8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'value': '$12call_function_kw.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_method.7'}), (20, {'func': '$18load_method.7', 'args': [], 'res': '$20call_method.8'}), (24, {'res': '$arr24.9'}), (26, {'retval': '$arr24.9', 'castval': '$26return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        shape = arg(0, name=shape)               ['shape']
        dtype = arg(1, name=dtype)               ['dtype']
        $2load_global.0 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
        $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
        arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'arr', 'dtype', 'shape']
        $18load_method.7 = getattr(value=arr, attr=_zero_fill) ['$18load_method.7', 'arr']
        $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_method.7', '$20call_method.8']
        $26return_value.10 = cast(value=arr)     ['$26return_value.10', 'arr']
        return $26return_value.10                ['$26return_value.10']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb85c48b0>
    DEBUG:numba.core.ssa:on stmt: shape = arg(0, name=shape)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
    DEBUG:numba.core.ssa:on stmt: arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $18load_method.7 = getattr(value=arr, attr=_zero_fill)
    DEBUG:numba.core.ssa:on stmt: $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $26return_value.10 = cast(value=arr)
    DEBUG:numba.core.ssa:on stmt: return $26return_value.10
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$18load_method.7': [<numba.core.ir.Assign object at 0x7f2cb85c42e0>],
                 '$20call_method.8': [<numba.core.ir.Assign object at 0x7f2cb85c44f0>],
                 '$26return_value.10': [<numba.core.ir.Assign object at 0x7f2cb85c4700>],
                 '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2cb85bf7c0>],
                 '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f2cb85bf940>],
                 'arr': [<numba.core.ir.Assign object at 0x7f2cb85c4040>],
                 'dtype': [<numba.core.ir.Assign object at 0x7f2cb85bf640>],
                 'shape': [<numba.core.ir.Assign object at 0x7f2cb85bf520>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=4101)
               2    LOAD_GLOBAL(arg=0, lineno=4101)
               4    LOAD_FAST(arg=0, lineno=4101)
               6    LOAD_FAST(arg=1, lineno=4101)
               8    LOAD_DEREF(arg=0, lineno=4101)
              10    CALL_FUNCTION(arg=3, lineno=4101)
              12    RETURN_VALUE(arg=None, lineno=4101)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4101)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$shape4.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$10call_function.4']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        shape = arg(0, name=shape)               ['shape']
        dtype = arg(1, name=dtype)               ['dtype']
        $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
        $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
        $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
        $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
        return $12return_value.5                 ['$12return_value.5']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb85a5df0>
    DEBUG:numba.core.ssa:on stmt: shape = arg(0, name=shape)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
    DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
    DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10call_function.4)
    DEBUG:numba.core.ssa:on stmt: return $12return_value.5
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f2cb84d3070>],
                 '$12return_value.5': [<numba.core.ir.Assign object at 0x7f2cb84d3190>],
                 '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2cb8549a90>],
                 '$8load_deref.3': [<numba.core.ir.Assign object at 0x7f2cb8549e50>],
                 'dtype': [<numba.core.ir.Assign object at 0x7f2cb8549910>],
                 'shape': [<numba.core.ir.Assign object at 0x7f2cb8549430>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=3979)
               2    LOAD_FAST(arg=0, lineno=3979)
               4    LOAD_METHOD(arg=0, lineno=3979)
               6    LOAD_FAST(arg=1, lineno=3979)
               8    LOAD_FAST(arg=2, lineno=3979)
              10    CALL_METHOD(arg=2, lineno=3979)
              12    RETURN_VALUE(arg=None, lineno=3979)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3979)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_FAST(arg=0, lineno=3979)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_METHOD(arg=0, lineno=3979)
    DEBUG:numba.core.byteflow:stack ['$arrtype2.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=3979)
    DEBUG:numba.core.byteflow:stack ['$4load_method.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=2, lineno=3979)
    DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$size6.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_METHOD(arg=2, lineno=3979)
    DEBUG:numba.core.byteflow:stack ['$4load_method.1', '$size6.2', '$align8.3']
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=3979)
    DEBUG:numba.core.byteflow:stack ['$10call_method.4']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$arrtype2.0'}), (4, {'item': '$arrtype2.0', 'res': '$4load_method.1'}), (6, {'res': '$size6.2'}), (8, {'res': '$align8.3'}), (10, {'func': '$4load_method.1', 'args': ['$size6.2', '$align8.3'], 'res': '$10call_method.4'}), (12, {'retval': '$10call_method.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        arrtype = arg(0, name=arrtype)           ['arrtype']
        size = arg(1, name=size)                 ['size']
        align = arg(2, name=align)               ['align']
        $4load_method.1 = getattr(value=arrtype, attr=_allocate) ['$4load_method.1', 'arrtype']
        $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_method.4', '$4load_method.1', 'align', 'size']
        $12return_value.5 = cast(value=$10call_method.4) ['$10call_method.4', '$12return_value.5']
        return $12return_value.5                 ['$12return_value.5']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb849b6a0>
    DEBUG:numba.core.ssa:on stmt: arrtype = arg(0, name=arrtype)
    DEBUG:numba.core.ssa:on stmt: size = arg(1, name=size)
    DEBUG:numba.core.ssa:on stmt: align = arg(2, name=align)
    DEBUG:numba.core.ssa:on stmt: $4load_method.1 = getattr(value=arrtype, attr=_allocate)
    DEBUG:numba.core.ssa:on stmt: $10call_method.4 = call $4load_method.1(size, align, func=$4load_method.1, args=[Var(size, arrayobj.py:3979), Var(align, arrayobj.py:3979)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10call_method.4)
    DEBUG:numba.core.ssa:on stmt: return $12return_value.5
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$10call_method.4': [<numba.core.ir.Assign object at 0x7f2cb84a2bb0>],
                 '$12return_value.5': [<numba.core.ir.Assign object at 0x7f2cb84a2ca0>],
                 '$4load_method.1': [<numba.core.ir.Assign object at 0x7f2cb84a2760>],
                 'align': [<numba.core.ir.Assign object at 0x7f2cb84a24c0>],
                 'arrtype': [<numba.core.ir.Assign object at 0x7f2cb849baf0>],
                 'size': [<numba.core.ir.Assign object at 0x7f2cb84a23a0>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=3972)
               2    LOAD_GLOBAL(arg=0, lineno=3972)
               4    LOAD_FAST(arg=1, lineno=3972)
               6    LOAD_FAST(arg=2, lineno=3972)
               8    CALL_FUNCTION(arg=2, lineno=3972)
              10    RETURN_VALUE(arg=None, lineno=3972)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=3972)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=3972)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=1, lineno=3972)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=2, lineno=3972)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$allocsize4.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=CALL_FUNCTION(arg=2, lineno=3972)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$allocsize4.1', '$align6.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=RETURN_VALUE(arg=None, lineno=3972)
    DEBUG:numba.core.byteflow:stack ['$8call_function.3']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$allocsize4.1'}), (6, {'res': '$align6.2'}), (8, {'func': '$2load_global.0', 'args': ['$allocsize4.1', '$align6.2'], 'res': '$8call_function.3'}), (10, {'retval': '$8call_function.3', 'castval': '$10return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        cls = arg(0, name=cls)                   ['cls']
        allocsize = arg(1, name=allocsize)       ['allocsize']
        align = arg(2, name=align)               ['align']
        $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>) ['$2load_global.0']
        $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$8call_function.3', 'align', 'allocsize']
        $10return_value.4 = cast(value=$8call_function.3) ['$10return_value.4', '$8call_function.3']
        return $10return_value.4                 ['$10return_value.4']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb84bd0a0>
    DEBUG:numba.core.ssa:on stmt: cls = arg(0, name=cls)
    DEBUG:numba.core.ssa:on stmt: allocsize = arg(1, name=allocsize)
    DEBUG:numba.core.ssa:on stmt: align = arg(2, name=align)
    DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(intrin_alloc: <intrinsic intrin_alloc>)
    DEBUG:numba.core.ssa:on stmt: $8call_function.3 = call $2load_global.0(allocsize, align, func=$2load_global.0, args=[Var(allocsize, arrayobj.py:3972), Var(align, arrayobj.py:3972)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10return_value.4 = cast(value=$8call_function.3)
    DEBUG:numba.core.ssa:on stmt: return $10return_value.4
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$10return_value.4': [<numba.core.ir.Assign object at 0x7f2cb84c2640>],
                 '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2cb84c2100>],
                 '$8call_function.3': [<numba.core.ir.Assign object at 0x7f2cb84c2520>],
                 'align': [<numba.core.ir.Assign object at 0x7f2cb84bdf40>],
                 'allocsize': [<numba.core.ir.Assign object at 0x7f2cb84bde20>],
                 'cls': [<numba.core.ir.Assign object at 0x7f2cb84bd820>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=4160)
               2    LOAD_GLOBAL(arg=0, lineno=4160)
               4    LOAD_FAST(arg=0, lineno=4160)
               6    CALL_FUNCTION(arg=1, lineno=4160)
               8    POP_TOP(arg=None, lineno=4160)
              10    LOAD_CONST(arg=0, lineno=4160)
              12    RETURN_VALUE(arg=None, lineno=4160)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4160)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4160)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4160)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=4160)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$self4.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=POP_TOP(arg=None, lineno=4160)
    DEBUG:numba.core.byteflow:stack ['$6call_function.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=4160)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4160)
    DEBUG:numba.core.byteflow:stack ['$const10.3']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$self4.1'}), (6, {'func': '$2load_global.0', 'args': ['$self4.1'], 'res': '$6call_function.2'}), (10, {'res': '$const10.3'}), (12, {'retval': '$const10.3', 'castval': '$12return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        self = arg(0, name=self)                 ['self']
        $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$2load_global.0']
        $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'self']
        $const10.3 = const(NoneType, None)       ['$const10.3']
        $12return_value.4 = cast(value=$const10.3) ['$12return_value.4', '$const10.3']
        return $12return_value.4                 ['$12return_value.4']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8443520>
    DEBUG:numba.core.ssa:on stmt: self = arg(0, name=self)
    DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
    DEBUG:numba.core.ssa:on stmt: $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const10.3 = const(NoneType, None)
    DEBUG:numba.core.ssa:on stmt: $12return_value.4 = cast(value=$const10.3)
    DEBUG:numba.core.ssa:on stmt: return $12return_value.4
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$12return_value.4': [<numba.core.ir.Assign object at 0x7f2cb844a040>],
                 '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2cb8443a60>],
                 '$6call_function.2': [<numba.core.ir.Assign object at 0x7f2cb8443d60>],
                 '$const10.3': [<numba.core.ir.Assign object at 0x7f2cb8443e80>],
                 'self': [<numba.core.ir.Assign object at 0x7f2cb8443580>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=4181)
               2    LOAD_GLOBAL(arg=0, lineno=4181)
               4    LOAD_ATTR(arg=1, lineno=4181)
               6    LOAD_FAST(arg=0, lineno=4181)
               8    LOAD_FAST(arg=1, lineno=4181)
              10    LOAD_CONST(arg=1, lineno=4181)
              12    CALL_FUNCTION_KW(arg=2, lineno=4181)
              14    STORE_FAST(arg=2, lineno=4181)
              16    LOAD_FAST(arg=2, lineno=4182)
              18    LOAD_METHOD(arg=2, lineno=4182)
              20    CALL_METHOD(arg=0, lineno=4182)
              22    POP_TOP(arg=None, lineno=4182)
              24    LOAD_FAST(arg=2, lineno=4183)
              26    RETURN_VALUE(arg=None, lineno=4183)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4181)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4181)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=4181)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4181)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=4181)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$a6.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=4181)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$a6.2', '$dtype8.3']
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_FUNCTION_KW(arg=2, lineno=4181)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$a6.2', '$dtype8.3', '$const10.4']
    DEBUG:numba.core.byteflow:dispatch pc=14, inst=STORE_FAST(arg=2, lineno=4181)
    DEBUG:numba.core.byteflow:stack ['$12call_function_kw.5']
    DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4182)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=4182)
    DEBUG:numba.core.byteflow:stack ['$arr16.6']
    DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_METHOD(arg=0, lineno=4182)
    DEBUG:numba.core.byteflow:stack ['$18load_method.7']
    DEBUG:numba.core.byteflow:dispatch pc=22, inst=POP_TOP(arg=None, lineno=4182)
    DEBUG:numba.core.byteflow:stack ['$20call_method.8']
    DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=4183)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4183)
    DEBUG:numba.core.byteflow:stack ['$arr24.9']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$a6.2'}), (8, {'res': '$dtype8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$4load_attr.1', 'args': ['$a6.2', '$dtype8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'value': '$12call_function_kw.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_method.7'}), (20, {'func': '$18load_method.7', 'args': [], 'res': '$20call_method.8'}), (24, {'res': '$arr24.9'}), (26, {'retval': '$arr24.9', 'castval': '$26return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        a = arg(0, name=a)                       ['a']
        dtype = arg(1, name=dtype)               ['dtype']
        $2load_global.0 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
        $4load_attr.1 = getattr(value=$2load_global.0, attr=empty_like) ['$2load_global.0', '$4load_attr.1']
        arr = call $4load_attr.1(a, func=$4load_attr.1, args=[Var(a, arrayobj.py:4181)], kws=[('dtype', Var(dtype, arrayobj.py:4181))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'a', 'arr', 'dtype']
        $18load_method.7 = getattr(value=arr, attr=_zero_fill) ['$18load_method.7', 'arr']
        $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_method.7', '$20call_method.8']
        $26return_value.10 = cast(value=arr)     ['$26return_value.10', 'arr']
        return $26return_value.10                ['$26return_value.10']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb846cb20>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty_like)
    DEBUG:numba.core.ssa:on stmt: arr = call $4load_attr.1(a, func=$4load_attr.1, args=[Var(a, arrayobj.py:4181)], kws=[('dtype', Var(dtype, arrayobj.py:4181))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $18load_method.7 = getattr(value=arr, attr=_zero_fill)
    DEBUG:numba.core.ssa:on stmt: $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $26return_value.10 = cast(value=arr)
    DEBUG:numba.core.ssa:on stmt: return $26return_value.10
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$18load_method.7': [<numba.core.ir.Assign object at 0x7f2cb846c4c0>],
                 '$20call_method.8': [<numba.core.ir.Assign object at 0x7f2cb846c6d0>],
                 '$26return_value.10': [<numba.core.ir.Assign object at 0x7f2cb846c8e0>],
                 '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2cb84589a0>],
                 '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f2cb8458b20>],
                 'a': [<numba.core.ir.Assign object at 0x7f2cb8458340>],
                 'arr': [<numba.core.ir.Assign object at 0x7f2cb846c220>],
                 'dtype': [<numba.core.ir.Assign object at 0x7f2cb8458820>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=4141)
               2    LOAD_GLOBAL(arg=0, lineno=4141)
               4    LOAD_FAST(arg=0, lineno=4141)
               6    LOAD_FAST(arg=1, lineno=4141)
               8    LOAD_DEREF(arg=0, lineno=4141)
              10    CALL_FUNCTION(arg=3, lineno=4141)
              12    RETURN_VALUE(arg=None, lineno=4141)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4141)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4141)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4141)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4141)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$arr4.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4141)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$arr4.1', '$dtype6.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4141)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$arr4.1', '$dtype6.2', '$8load_deref.3']
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4141)
    DEBUG:numba.core.byteflow:stack ['$10call_function.4']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$arr4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$arr4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        arr = arg(0, name=arr)                   ['arr']
        dtype = arg(1, name=dtype)               ['dtype']
        $2load_global.0 = global(numpy_empty_like_nd: <intrinsic numpy_empty_like_nd>) ['$2load_global.0']
        $8load_deref.3 = freevar(retty: array(float64, 1d, C)) ['$8load_deref.3']
        $10call_function.4 = call $2load_global.0(arr, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(arr, arrayobj.py:4141), Var(dtype, arrayobj.py:4141), Var($8load_deref.3, arrayobj.py:4141)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'arr', 'dtype']
        $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
        return $12return_value.5                 ['$12return_value.5']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb846deb0>
    DEBUG:numba.core.ssa:on stmt: arr = arg(0, name=arr)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(numpy_empty_like_nd: <intrinsic numpy_empty_like_nd>)
    DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(retty: array(float64, 1d, C))
    DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0(arr, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(arr, arrayobj.py:4141), Var(dtype, arrayobj.py:4141), Var($8load_deref.3, arrayobj.py:4141)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10call_function.4)
    DEBUG:numba.core.ssa:on stmt: return $12return_value.5
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f2cb8462fa0>],
                 '$12return_value.5': [<numba.core.ir.Assign object at 0x7f2cb8415a00>],
                 '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2cb8462a00>],
                 '$8load_deref.3': [<numba.core.ir.Assign object at 0x7f2cb8462dc0>],
                 'arr': [<numba.core.ir.Assign object at 0x7f2cb8462400>],
                 'dtype': [<numba.core.ir.Assign object at 0x7f2cb8462880>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=4169)
               2    LOAD_GLOBAL(arg=0, lineno=4169)
               4    LOAD_ATTR(arg=1, lineno=4169)
               6    LOAD_FAST(arg=0, lineno=4169)
               8    LOAD_FAST(arg=1, lineno=4169)
              10    LOAD_CONST(arg=1, lineno=4169)
              12    CALL_FUNCTION_KW(arg=2, lineno=4169)
              14    STORE_FAST(arg=2, lineno=4169)
              16    LOAD_FAST(arg=2, lineno=4170)
              18    LOAD_METHOD(arg=2, lineno=4170)
              20    CALL_METHOD(arg=0, lineno=4170)
              22    POP_TOP(arg=None, lineno=4170)
              24    LOAD_FAST(arg=2, lineno=4171)
              26    RETURN_VALUE(arg=None, lineno=4171)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4169)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4169)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_ATTR(arg=1, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=0, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_FAST(arg=1, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$shape6.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=1, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$shape6.2', '$dtype8.3']
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=CALL_FUNCTION_KW(arg=2, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$4load_attr.1', '$shape6.2', '$dtype8.3', '$const10.4']
    DEBUG:numba.core.byteflow:dispatch pc=14, inst=STORE_FAST(arg=2, lineno=4169)
    DEBUG:numba.core.byteflow:stack ['$12call_function_kw.5']
    DEBUG:numba.core.byteflow:dispatch pc=16, inst=LOAD_FAST(arg=2, lineno=4170)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_METHOD(arg=2, lineno=4170)
    DEBUG:numba.core.byteflow:stack ['$arr16.6']
    DEBUG:numba.core.byteflow:dispatch pc=20, inst=CALL_METHOD(arg=0, lineno=4170)
    DEBUG:numba.core.byteflow:stack ['$18load_method.7']
    DEBUG:numba.core.byteflow:dispatch pc=22, inst=POP_TOP(arg=None, lineno=4170)
    DEBUG:numba.core.byteflow:stack ['$20call_method.8']
    DEBUG:numba.core.byteflow:dispatch pc=24, inst=LOAD_FAST(arg=2, lineno=4171)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=26, inst=RETURN_VALUE(arg=None, lineno=4171)
    DEBUG:numba.core.byteflow:stack ['$arr24.9']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'item': '$2load_global.0', 'res': '$4load_attr.1'}), (6, {'res': '$shape6.2'}), (8, {'res': '$dtype8.3'}), (10, {'res': '$const10.4'}), (12, {'func': '$4load_attr.1', 'args': ['$shape6.2', '$dtype8.3'], 'names': '$const10.4', 'res': '$12call_function_kw.5'}), (14, {'value': '$12call_function_kw.5'}), (16, {'res': '$arr16.6'}), (18, {'item': '$arr16.6', 'res': '$18load_method.7'}), (20, {'func': '$18load_method.7', 'args': [], 'res': '$20call_method.8'}), (24, {'res': '$arr24.9'}), (26, {'retval': '$arr24.9', 'castval': '$26return_value.10'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        shape = arg(0, name=shape)               ['shape']
        dtype = arg(1, name=dtype)               ['dtype']
        $2load_global.0 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>) ['$2load_global.0']
        $4load_attr.1 = getattr(value=$2load_global.0, attr=empty) ['$2load_global.0', '$4load_attr.1']
        arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None) ['$4load_attr.1', 'arr', 'dtype', 'shape']
        $18load_method.7 = getattr(value=arr, attr=_zero_fill) ['$18load_method.7', 'arr']
        $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None) ['$18load_method.7', '$20call_method.8']
        $26return_value.10 = cast(value=arr)     ['$26return_value.10', 'arr']
        return $26return_value.10                ['$26return_value.10']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb834e220>
    DEBUG:numba.core.ssa:on stmt: shape = arg(0, name=shape)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(np: <module 'numpy' from '/home/runner/work/moscot_notebooks/moscot_notebooks/.tox/docs/lib/python3.9/site-packages/numpy/__init__.py'>)
    DEBUG:numba.core.ssa:on stmt: $4load_attr.1 = getattr(value=$2load_global.0, attr=empty)
    DEBUG:numba.core.ssa:on stmt: arr = call $4load_attr.1(shape, func=$4load_attr.1, args=[Var(shape, arrayobj.py:4169)], kws=[('dtype', Var(dtype, arrayobj.py:4169))], vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $18load_method.7 = getattr(value=arr, attr=_zero_fill)
    DEBUG:numba.core.ssa:on stmt: $20call_method.8 = call $18load_method.7(func=$18load_method.7, args=[], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $26return_value.10 = cast(value=arr)
    DEBUG:numba.core.ssa:on stmt: return $26return_value.10
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$18load_method.7': [<numba.core.ir.Assign object at 0x7f2cb8363100>],
                 '$20call_method.8': [<numba.core.ir.Assign object at 0x7f2cb834ef40>],
                 '$26return_value.10': [<numba.core.ir.Assign object at 0x7f2cb834e280>],
                 '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2cb836e580>],
                 '$4load_attr.1': [<numba.core.ir.Assign object at 0x7f2cb836e700>],
                 'arr': [<numba.core.ir.Assign object at 0x7f2cb83631f0>],
                 'dtype': [<numba.core.ir.Assign object at 0x7f2cb836e400>],
                 'shape': [<numba.core.ir.Assign object at 0x7f2cb8363af0>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=4101)
               2    LOAD_GLOBAL(arg=0, lineno=4101)
               4    LOAD_FAST(arg=0, lineno=4101)
               6    LOAD_FAST(arg=1, lineno=4101)
               8    LOAD_DEREF(arg=0, lineno=4101)
              10    CALL_FUNCTION(arg=3, lineno=4101)
              12    RETURN_VALUE(arg=None, lineno=4101)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4101)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4101)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=LOAD_FAST(arg=1, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$shape4.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=LOAD_DEREF(arg=0, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$shape4.1', '$dtype6.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=CALL_FUNCTION(arg=3, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$shape4.1', '$dtype6.2', '$8load_deref.3']
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4101)
    DEBUG:numba.core.byteflow:stack ['$10call_function.4']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$shape4.1'}), (6, {'res': '$dtype6.2'}), (8, {'res': '$8load_deref.3'}), (10, {'func': '$2load_global.0', 'args': ['$shape4.1', '$dtype6.2', '$8load_deref.3'], 'res': '$10call_function.4'}), (12, {'retval': '$10call_function.4', 'castval': '$12return_value.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        shape = arg(0, name=shape)               ['shape']
        dtype = arg(1, name=dtype)               ['dtype']
        $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>) ['$2load_global.0']
        $8load_deref.3 = freevar(retty: array(int64, 1d, C)) ['$8load_deref.3']
        $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None) ['$10call_function.4', '$2load_global.0', '$8load_deref.3', 'dtype', 'shape']
        $12return_value.5 = cast(value=$10call_function.4) ['$10call_function.4', '$12return_value.5']
        return $12return_value.5                 ['$12return_value.5']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8458e50>
    DEBUG:numba.core.ssa:on stmt: shape = arg(0, name=shape)
    DEBUG:numba.core.ssa:on stmt: dtype = arg(1, name=dtype)
    DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(numpy_empty_nd: <intrinsic numpy_empty_nd>)
    DEBUG:numba.core.ssa:on stmt: $8load_deref.3 = freevar(retty: array(int64, 1d, C))
    DEBUG:numba.core.ssa:on stmt: $10call_function.4 = call $2load_global.0(shape, dtype, $8load_deref.3, func=$2load_global.0, args=[Var(shape, arrayobj.py:4101), Var(dtype, arrayobj.py:4101), Var($8load_deref.3, arrayobj.py:4101)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $12return_value.5 = cast(value=$10call_function.4)
    DEBUG:numba.core.ssa:on stmt: return $12return_value.5
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$10call_function.4': [<numba.core.ir.Assign object at 0x7f2cb8349700>],
                 '$12return_value.5': [<numba.core.ir.Assign object at 0x7f2cb8349820>],
                 '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2cb8349bb0>],
                 '$8load_deref.3': [<numba.core.ir.Assign object at 0x7f2cb83492b0>],
                 'dtype': [<numba.core.ir.Assign object at 0x7f2cb8349f10>],
                 'shape': [<numba.core.ir.Assign object at 0x7f2cb835e340>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=4160)
               2    LOAD_GLOBAL(arg=0, lineno=4160)
               4    LOAD_FAST(arg=0, lineno=4160)
               6    CALL_FUNCTION(arg=1, lineno=4160)
               8    POP_TOP(arg=None, lineno=4160)
              10    LOAD_CONST(arg=0, lineno=4160)
              12    RETURN_VALUE(arg=None, lineno=4160)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=4160)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_GLOBAL(arg=0, lineno=4160)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_FAST(arg=0, lineno=4160)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=4160)
    DEBUG:numba.core.byteflow:stack ['$2load_global.0', '$self4.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=POP_TOP(arg=None, lineno=4160)
    DEBUG:numba.core.byteflow:stack ['$6call_function.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_CONST(arg=0, lineno=4160)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=RETURN_VALUE(arg=None, lineno=4160)
    DEBUG:numba.core.byteflow:stack ['$const10.3']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>, {State(pc_initial=0 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_global.0'}), (4, {'res': '$self4.1'}), (6, {'func': '$2load_global.0', 'args': ['$self4.1'], 'res': '$6call_function.2'}), (10, {'res': '$const10.3'}), (12, {'retval': '$const10.3', 'castval': '$12return_value.4'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        self = arg(0, name=self)                 ['self']
        $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>) ['$2load_global.0']
        $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_global.0', '$6call_function.2', 'self']
        $const10.3 = const(NoneType, None)       ['$const10.3']
        $12return_value.4 = cast(value=$const10.3) ['$12return_value.4', '$const10.3']
        return $12return_value.4                 ['$12return_value.4']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb84afd60>
    DEBUG:numba.core.ssa:on stmt: self = arg(0, name=self)
    DEBUG:numba.core.ssa:on stmt: $2load_global.0 = global(_zero_fill_array_method: <intrinsic _zero_fill_array_method>)
    DEBUG:numba.core.ssa:on stmt: $6call_function.2 = call $2load_global.0(self, func=$2load_global.0, args=[Var(self, arrayobj.py:4160)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const10.3 = const(NoneType, None)
    DEBUG:numba.core.ssa:on stmt: $12return_value.4 = cast(value=$const10.3)
    DEBUG:numba.core.ssa:on stmt: return $12return_value.4
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$12return_value.4': [<numba.core.ir.Assign object at 0x7f2cb849bb80>],
                 '$2load_global.0': [<numba.core.ir.Assign object at 0x7f2cb849b220>],
                 '$6call_function.2': [<numba.core.ir.Assign object at 0x7f2cb849b7f0>],
                 '$const10.3': [<numba.core.ir.Assign object at 0x7f2cb849bc10>],
                 'self': [<numba.core.ir.Assign object at 0x7f2cb85a5c10>]})
    DEBUG:numba.core.ssa:SSA violators set()
    DEBUG:numba.core.byteflow:bytecode dump:
    >          0    NOP(arg=None, lineno=216)
               2    LOAD_DEREF(arg=1, lineno=216)
               4    LOAD_CONST(arg=1, lineno=216)
               6    CALL_FUNCTION(arg=1, lineno=216)
               8    STORE_FAST(arg=2, lineno=216)
              10    LOAD_DEREF(arg=1, lineno=217)
              12    LOAD_FAST(arg=0, lineno=217)
              14    CALL_FUNCTION(arg=1, lineno=217)
              16    STORE_FAST(arg=0, lineno=217)
              18    LOAD_FAST(arg=1, lineno=218)
              20    LOAD_CONST(arg=2, lineno=218)
              22    COMPARE_OP(arg=0, lineno=218)
              24    POP_JUMP_IF_FALSE(arg=98, lineno=218)
              26    LOAD_CONST(arg=3, lineno=219)
              28    STORE_FAST(arg=3, lineno=219)
              30    LOAD_FAST(arg=1, lineno=220)
              32    UNARY_NEGATIVE(arg=None, lineno=220)
              34    STORE_FAST(arg=4, lineno=220)
              36    LOAD_FAST(arg=4, lineno=221)
              38    LOAD_CONST(arg=2, lineno=221)
              40    COMPARE_OP(arg=0, lineno=221)
              42    POP_JUMP_IF_FALSE(arg=48, lineno=221)
              44    LOAD_GLOBAL(arg=0, lineno=222)
              46    RAISE_VARARGS(arg=1, lineno=222)
    >         48    LOAD_DEREF(arg=0, lineno=223)
              50    POP_JUMP_IF_FALSE(arg=106, lineno=223)
              52    LOAD_FAST(arg=0, lineno=224)
              54    LOAD_CONST(arg=2, lineno=224)
              56    COMPARE_OP(arg=2, lineno=224)
              58    POP_JUMP_IF_FALSE(arg=76, lineno=224)
              60    LOAD_DEREF(arg=2, lineno=225)
              62    POP_JUMP_IF_FALSE(arg=68, lineno=225)
              64    LOAD_DEREF(arg=2, lineno=226)
              66    RETURN_VALUE(arg=None, lineno=226)
    >         68    LOAD_GLOBAL(arg=1, lineno=228)
              70    LOAD_CONST(arg=4, lineno=228)
              72    CALL_FUNCTION(arg=1, lineno=228)
              74    RAISE_VARARGS(arg=1, lineno=228)
    >         76    LOAD_FAST(arg=0, lineno=229)
              78    LOAD_CONST(arg=1, lineno=229)
              80    COMPARE_OP(arg=3, lineno=229)
              82    POP_JUMP_IF_FALSE(arg=106, lineno=229)
              84    LOAD_FAST(arg=0, lineno=229)
              86    LOAD_CONST(arg=5, lineno=229)
              88    COMPARE_OP(arg=3, lineno=229)
              90    POP_JUMP_IF_FALSE(arg=106, lineno=229)
              92    LOAD_CONST(arg=2, lineno=230)
              94    RETURN_VALUE(arg=None, lineno=230)
              96    JUMP_FORWARD(arg=8, lineno=230)
    >         98    LOAD_CONST(arg=6, lineno=232)
             100    STORE_FAST(arg=3, lineno=232)
             102    LOAD_FAST(arg=1, lineno=233)
             104    STORE_FAST(arg=4, lineno=233)
    >        106    LOAD_FAST(arg=4, lineno=234)
             108    LOAD_CONST(arg=7, lineno=234)
             110    COMPARE_OP(arg=4, lineno=234)
             112    POP_JUMP_IF_FALSE(arg=130, lineno=234)
             114    LOAD_GLOBAL(arg=2, lineno=236)
             116    LOAD_METHOD(arg=3, lineno=236)
             118    LOAD_FAST(arg=0, lineno=236)
             120    LOAD_GLOBAL(arg=4, lineno=236)
             122    LOAD_FAST(arg=1, lineno=236)
             124    CALL_FUNCTION(arg=1, lineno=236)
             126    CALL_METHOD(arg=2, lineno=236)
             128    RETURN_VALUE(arg=None, lineno=236)
    >        130    LOAD_FAST(arg=4, lineno=237)
             132    LOAD_CONST(arg=2, lineno=237)
             134    COMPARE_OP(arg=3, lineno=237)
             136    POP_JUMP_IF_FALSE(arg=172, lineno=237)
             138    LOAD_FAST(arg=4, lineno=238)
             140    LOAD_CONST(arg=1, lineno=238)
             142    BINARY_AND(arg=None, lineno=238)
             144    POP_JUMP_IF_FALSE(arg=154, lineno=238)
             146    LOAD_FAST(arg=2, lineno=239)
             148    LOAD_FAST(arg=0, lineno=239)
             150    INPLACE_MULTIPLY(arg=None, lineno=239)
             152    STORE_FAST(arg=2, lineno=239)
    >        154    LOAD_FAST(arg=4, lineno=240)
             156    LOAD_CONST(arg=1, lineno=240)
             158    INPLACE_RSHIFT(arg=None, lineno=240)
             160    STORE_FAST(arg=4, lineno=240)
             162    LOAD_FAST(arg=0, lineno=241)
             164    LOAD_FAST(arg=0, lineno=241)
             166    INPLACE_MULTIPLY(arg=None, lineno=241)
             168    STORE_FAST(arg=0, lineno=241)
             170    JUMP_ABSOLUTE(arg=130, lineno=241)
    >        172    LOAD_FAST(arg=3, lineno=243)
             174    POP_JUMP_IF_FALSE(arg=184, lineno=243)
             176    LOAD_CONST(arg=8, lineno=243)
             178    LOAD_FAST(arg=2, lineno=243)
             180    BINARY_TRUE_DIVIDE(arg=None, lineno=243)
             182    RETURN_VALUE(arg=None, lineno=243)
    >        184    LOAD_FAST(arg=2, lineno=243)
             186    RETURN_VALUE(arg=None, lineno=243)
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=0 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=0, inst=NOP(arg=None, lineno=216)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=2, inst=LOAD_DEREF(arg=1, lineno=216)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=4, inst=LOAD_CONST(arg=1, lineno=216)
    DEBUG:numba.core.byteflow:stack ['$2load_deref.0']
    DEBUG:numba.core.byteflow:dispatch pc=6, inst=CALL_FUNCTION(arg=1, lineno=216)
    DEBUG:numba.core.byteflow:stack ['$2load_deref.0', '$const4.1']
    DEBUG:numba.core.byteflow:dispatch pc=8, inst=STORE_FAST(arg=2, lineno=216)
    DEBUG:numba.core.byteflow:stack ['$6call_function.2']
    DEBUG:numba.core.byteflow:dispatch pc=10, inst=LOAD_DEREF(arg=1, lineno=217)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=12, inst=LOAD_FAST(arg=0, lineno=217)
    DEBUG:numba.core.byteflow:stack ['$10load_deref.3']
    DEBUG:numba.core.byteflow:dispatch pc=14, inst=CALL_FUNCTION(arg=1, lineno=217)
    DEBUG:numba.core.byteflow:stack ['$10load_deref.3', '$a12.4']
    DEBUG:numba.core.byteflow:dispatch pc=16, inst=STORE_FAST(arg=0, lineno=217)
    DEBUG:numba.core.byteflow:stack ['$14call_function.5']
    DEBUG:numba.core.byteflow:dispatch pc=18, inst=LOAD_FAST(arg=1, lineno=218)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=20, inst=LOAD_CONST(arg=2, lineno=218)
    DEBUG:numba.core.byteflow:stack ['$b18.6']
    DEBUG:numba.core.byteflow:dispatch pc=22, inst=COMPARE_OP(arg=0, lineno=218)
    DEBUG:numba.core.byteflow:stack ['$b18.6', '$const20.7']
    DEBUG:numba.core.byteflow:dispatch pc=24, inst=POP_JUMP_IF_FALSE(arg=98, lineno=218)
    DEBUG:numba.core.byteflow:stack ['$22compare_op.8']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=26, stack=(), blockstack=(), npush=0), Edge(pc=98, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=26 nstack_initial=0), State(pc_initial=98 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=26, inst=LOAD_CONST(arg=3, lineno=219)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=28, inst=STORE_FAST(arg=3, lineno=219)
    DEBUG:numba.core.byteflow:stack ['$const26.0']
    DEBUG:numba.core.byteflow:dispatch pc=30, inst=LOAD_FAST(arg=1, lineno=220)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=32, inst=UNARY_NEGATIVE(arg=None, lineno=220)
    DEBUG:numba.core.byteflow:stack ['$b30.1']
    DEBUG:numba.core.byteflow:dispatch pc=34, inst=STORE_FAST(arg=4, lineno=220)
    DEBUG:numba.core.byteflow:stack ['$32unary_negative.2']
    DEBUG:numba.core.byteflow:dispatch pc=36, inst=LOAD_FAST(arg=4, lineno=221)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=38, inst=LOAD_CONST(arg=2, lineno=221)
    DEBUG:numba.core.byteflow:stack ['$exp36.3']
    DEBUG:numba.core.byteflow:dispatch pc=40, inst=COMPARE_OP(arg=0, lineno=221)
    DEBUG:numba.core.byteflow:stack ['$exp36.3', '$const38.4']
    DEBUG:numba.core.byteflow:dispatch pc=42, inst=POP_JUMP_IF_FALSE(arg=48, lineno=221)
    DEBUG:numba.core.byteflow:stack ['$40compare_op.5']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=44, stack=(), blockstack=(), npush=0), Edge(pc=48, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=98 nstack_initial=0), State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=98, inst=LOAD_CONST(arg=6, lineno=232)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=100, inst=STORE_FAST(arg=3, lineno=232)
    DEBUG:numba.core.byteflow:stack ['$const98.0']
    DEBUG:numba.core.byteflow:dispatch pc=102, inst=LOAD_FAST(arg=1, lineno=233)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=104, inst=STORE_FAST(arg=4, lineno=233)
    DEBUG:numba.core.byteflow:stack ['$b102.1']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=106, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=44 nstack_initial=0), State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=44, inst=LOAD_GLOBAL(arg=0, lineno=222)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=46, inst=RAISE_VARARGS(arg=1, lineno=222)
    DEBUG:numba.core.byteflow:stack ['$44load_global.0']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=48 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=48, inst=LOAD_DEREF(arg=0, lineno=223)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=50, inst=POP_JUMP_IF_FALSE(arg=106, lineno=223)
    DEBUG:numba.core.byteflow:stack ['$48load_deref.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=52, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=106, inst=LOAD_FAST(arg=4, lineno=234)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=108, inst=LOAD_CONST(arg=7, lineno=234)
    DEBUG:numba.core.byteflow:stack ['$exp106.0']
    DEBUG:numba.core.byteflow:dispatch pc=110, inst=COMPARE_OP(arg=4, lineno=234)
    DEBUG:numba.core.byteflow:stack ['$exp106.0', '$const108.1']
    DEBUG:numba.core.byteflow:dispatch pc=112, inst=POP_JUMP_IF_FALSE(arg=130, lineno=234)
    DEBUG:numba.core.byteflow:stack ['$110compare_op.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=114, stack=(), blockstack=(), npush=0), Edge(pc=130, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=52 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=52, inst=LOAD_FAST(arg=0, lineno=224)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=54, inst=LOAD_CONST(arg=2, lineno=224)
    DEBUG:numba.core.byteflow:stack ['$a52.0']
    DEBUG:numba.core.byteflow:dispatch pc=56, inst=COMPARE_OP(arg=2, lineno=224)
    DEBUG:numba.core.byteflow:stack ['$a52.0', '$const54.1']
    DEBUG:numba.core.byteflow:dispatch pc=58, inst=POP_JUMP_IF_FALSE(arg=76, lineno=224)
    DEBUG:numba.core.byteflow:stack ['$56compare_op.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=60, stack=(), blockstack=(), npush=0), Edge(pc=76, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=114 nstack_initial=0), State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=114, inst=LOAD_GLOBAL(arg=2, lineno=236)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=116, inst=LOAD_METHOD(arg=3, lineno=236)
    DEBUG:numba.core.byteflow:stack ['$114load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=118, inst=LOAD_FAST(arg=0, lineno=236)
    DEBUG:numba.core.byteflow:stack ['$116load_method.1']
    DEBUG:numba.core.byteflow:dispatch pc=120, inst=LOAD_GLOBAL(arg=4, lineno=236)
    DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2']
    DEBUG:numba.core.byteflow:dispatch pc=122, inst=LOAD_FAST(arg=1, lineno=236)
    DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$120load_global.3']
    DEBUG:numba.core.byteflow:dispatch pc=124, inst=CALL_FUNCTION(arg=1, lineno=236)
    DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$120load_global.3', '$b122.4']
    DEBUG:numba.core.byteflow:dispatch pc=126, inst=CALL_METHOD(arg=2, lineno=236)
    DEBUG:numba.core.byteflow:stack ['$116load_method.1', '$a118.2', '$124call_function.5']
    DEBUG:numba.core.byteflow:dispatch pc=128, inst=RETURN_VALUE(arg=None, lineno=236)
    DEBUG:numba.core.byteflow:stack ['$126call_method.6']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0), State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=130, inst=LOAD_FAST(arg=4, lineno=237)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=132, inst=LOAD_CONST(arg=2, lineno=237)
    DEBUG:numba.core.byteflow:stack ['$exp130.0']
    DEBUG:numba.core.byteflow:dispatch pc=134, inst=COMPARE_OP(arg=3, lineno=237)
    DEBUG:numba.core.byteflow:stack ['$exp130.0', '$const132.1']
    DEBUG:numba.core.byteflow:dispatch pc=136, inst=POP_JUMP_IF_FALSE(arg=172, lineno=237)
    DEBUG:numba.core.byteflow:stack ['$134compare_op.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=138, stack=(), blockstack=(), npush=0), Edge(pc=172, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=60 nstack_initial=0), State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=60, inst=LOAD_DEREF(arg=2, lineno=225)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=62, inst=POP_JUMP_IF_FALSE(arg=68, lineno=225)
    DEBUG:numba.core.byteflow:stack ['$60load_deref.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=64, stack=(), blockstack=(), npush=0), Edge(pc=68, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=76 nstack_initial=0), State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=76, inst=LOAD_FAST(arg=0, lineno=229)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=78, inst=LOAD_CONST(arg=1, lineno=229)
    DEBUG:numba.core.byteflow:stack ['$a76.0']
    DEBUG:numba.core.byteflow:dispatch pc=80, inst=COMPARE_OP(arg=3, lineno=229)
    DEBUG:numba.core.byteflow:stack ['$a76.0', '$const78.1']
    DEBUG:numba.core.byteflow:dispatch pc=82, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
    DEBUG:numba.core.byteflow:stack ['$80compare_op.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=84, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=138 nstack_initial=0), State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=138, inst=LOAD_FAST(arg=4, lineno=238)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=140, inst=LOAD_CONST(arg=1, lineno=238)
    DEBUG:numba.core.byteflow:stack ['$exp138.0']
    DEBUG:numba.core.byteflow:dispatch pc=142, inst=BINARY_AND(arg=None, lineno=238)
    DEBUG:numba.core.byteflow:stack ['$exp138.0', '$const140.1']
    DEBUG:numba.core.byteflow:dispatch pc=144, inst=POP_JUMP_IF_FALSE(arg=154, lineno=238)
    DEBUG:numba.core.byteflow:stack ['$142binary_and.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=146, stack=(), blockstack=(), npush=0), Edge(pc=154, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=172 nstack_initial=0), State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=172, inst=LOAD_FAST(arg=3, lineno=243)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=174, inst=POP_JUMP_IF_FALSE(arg=184, lineno=243)
    DEBUG:numba.core.byteflow:stack ['$invert172.0']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=176, stack=(), blockstack=(), npush=0), Edge(pc=184, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=64 nstack_initial=0), State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=64, inst=LOAD_DEREF(arg=2, lineno=226)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=66, inst=RETURN_VALUE(arg=None, lineno=226)
    DEBUG:numba.core.byteflow:stack ['$64load_deref.0']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=68 nstack_initial=0), State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=68, inst=LOAD_GLOBAL(arg=1, lineno=228)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=70, inst=LOAD_CONST(arg=4, lineno=228)
    DEBUG:numba.core.byteflow:stack ['$68load_global.0']
    DEBUG:numba.core.byteflow:dispatch pc=72, inst=CALL_FUNCTION(arg=1, lineno=228)
    DEBUG:numba.core.byteflow:stack ['$68load_global.0', '$const70.1']
    DEBUG:numba.core.byteflow:dispatch pc=74, inst=RAISE_VARARGS(arg=1, lineno=228)
    DEBUG:numba.core.byteflow:stack ['$72call_function.2']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=84 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=84, inst=LOAD_FAST(arg=0, lineno=229)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=86, inst=LOAD_CONST(arg=5, lineno=229)
    DEBUG:numba.core.byteflow:stack ['$a84.0']
    DEBUG:numba.core.byteflow:dispatch pc=88, inst=COMPARE_OP(arg=3, lineno=229)
    DEBUG:numba.core.byteflow:stack ['$a84.0', '$const86.1']
    DEBUG:numba.core.byteflow:dispatch pc=90, inst=POP_JUMP_IF_FALSE(arg=106, lineno=229)
    DEBUG:numba.core.byteflow:stack ['$88compare_op.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=92, stack=(), blockstack=(), npush=0), Edge(pc=106, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=146 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=146, inst=LOAD_FAST(arg=2, lineno=239)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=148, inst=LOAD_FAST(arg=0, lineno=239)
    DEBUG:numba.core.byteflow:stack ['$r146.0']
    DEBUG:numba.core.byteflow:dispatch pc=150, inst=INPLACE_MULTIPLY(arg=None, lineno=239)
    DEBUG:numba.core.byteflow:stack ['$r146.0', '$a148.1']
    DEBUG:numba.core.byteflow:dispatch pc=152, inst=STORE_FAST(arg=2, lineno=239)
    DEBUG:numba.core.byteflow:stack ['$150inplace_multiply.2']
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=154, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=154, inst=LOAD_FAST(arg=4, lineno=240)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=156, inst=LOAD_CONST(arg=1, lineno=240)
    DEBUG:numba.core.byteflow:stack ['$exp154.0']
    DEBUG:numba.core.byteflow:dispatch pc=158, inst=INPLACE_RSHIFT(arg=None, lineno=240)
    DEBUG:numba.core.byteflow:stack ['$exp154.0', '$const156.1']
    DEBUG:numba.core.byteflow:dispatch pc=160, inst=STORE_FAST(arg=4, lineno=240)
    DEBUG:numba.core.byteflow:stack ['$158inplace_rshift.2']
    DEBUG:numba.core.byteflow:dispatch pc=162, inst=LOAD_FAST(arg=0, lineno=241)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=164, inst=LOAD_FAST(arg=0, lineno=241)
    DEBUG:numba.core.byteflow:stack ['$a162.3']
    DEBUG:numba.core.byteflow:dispatch pc=166, inst=INPLACE_MULTIPLY(arg=None, lineno=241)
    DEBUG:numba.core.byteflow:stack ['$a162.3', '$a164.4']
    DEBUG:numba.core.byteflow:dispatch pc=168, inst=STORE_FAST(arg=0, lineno=241)
    DEBUG:numba.core.byteflow:stack ['$166inplace_multiply.5']
    DEBUG:numba.core.byteflow:dispatch pc=170, inst=JUMP_ABSOLUTE(arg=130, lineno=241)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:end state. edges=[Edge(pc=130, stack=(), blockstack=(), npush=0)]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=176 nstack_initial=0), State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=176, inst=LOAD_CONST(arg=8, lineno=243)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=178, inst=LOAD_FAST(arg=2, lineno=243)
    DEBUG:numba.core.byteflow:stack ['$const176.0']
    DEBUG:numba.core.byteflow:dispatch pc=180, inst=BINARY_TRUE_DIVIDE(arg=None, lineno=243)
    DEBUG:numba.core.byteflow:stack ['$const176.0', '$r178.1']
    DEBUG:numba.core.byteflow:dispatch pc=182, inst=RETURN_VALUE(arg=None, lineno=243)
    DEBUG:numba.core.byteflow:stack ['$180binary_true_divide.2']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=184 nstack_initial=0), State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=184, inst=LOAD_FAST(arg=2, lineno=243)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=186, inst=RETURN_VALUE(arg=None, lineno=243)
    DEBUG:numba.core.byteflow:stack ['$r184.0']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=92 nstack_initial=0), State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
    DEBUG:numba.core.byteflow:stack: []
    DEBUG:numba.core.byteflow:dispatch pc=92, inst=LOAD_CONST(arg=2, lineno=230)
    DEBUG:numba.core.byteflow:stack []
    DEBUG:numba.core.byteflow:dispatch pc=94, inst=RETURN_VALUE(arg=None, lineno=230)
    DEBUG:numba.core.byteflow:stack ['$const92.0']
    DEBUG:numba.core.byteflow:end state. edges=[]
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=106 nstack_initial=0), State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=154 nstack_initial=0), State(pc_initial=130 nstack_initial=0)])
    DEBUG:numba.core.byteflow:pending: deque([State(pc_initial=130 nstack_initial=0)])
    DEBUG:numba.core.byteflow:-------------------------Prune PHIs-------------------------
    DEBUG:numba.core.byteflow:Used_phis: defaultdict(<class 'set'>,
                {State(pc_initial=0 nstack_initial=0): set(),
                 State(pc_initial=26 nstack_initial=0): set(),
                 State(pc_initial=44 nstack_initial=0): set(),
                 State(pc_initial=48 nstack_initial=0): set(),
                 State(pc_initial=52 nstack_initial=0): set(),
                 State(pc_initial=60 nstack_initial=0): set(),
                 State(pc_initial=64 nstack_initial=0): set(),
                 State(pc_initial=68 nstack_initial=0): set(),
                 State(pc_initial=76 nstack_initial=0): set(),
                 State(pc_initial=84 nstack_initial=0): set(),
                 State(pc_initial=92 nstack_initial=0): set(),
                 State(pc_initial=98 nstack_initial=0): set(),
                 State(pc_initial=106 nstack_initial=0): set(),
                 State(pc_initial=114 nstack_initial=0): set(),
                 State(pc_initial=130 nstack_initial=0): set(),
                 State(pc_initial=138 nstack_initial=0): set(),
                 State(pc_initial=146 nstack_initial=0): set(),
                 State(pc_initial=154 nstack_initial=0): set(),
                 State(pc_initial=172 nstack_initial=0): set(),
                 State(pc_initial=176 nstack_initial=0): set(),
                 State(pc_initial=184 nstack_initial=0): set()})
    DEBUG:numba.core.byteflow:defmap: {}
    DEBUG:numba.core.byteflow:phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:changing phismap: defaultdict(<class 'set'>, {})
    DEBUG:numba.core.byteflow:keep phismap: {}
    DEBUG:numba.core.byteflow:new_out: defaultdict(<class 'dict'>, {})
    DEBUG:numba.core.byteflow:----------------------DONE Prune PHIs-----------------------
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=0 nstack_initial=0):
    AdaptBlockInfo(insts=((0, {}), (2, {'res': '$2load_deref.0'}), (4, {'res': '$const4.1'}), (6, {'func': '$2load_deref.0', 'args': ['$const4.1'], 'res': '$6call_function.2'}), (8, {'value': '$6call_function.2'}), (10, {'res': '$10load_deref.3'}), (12, {'res': '$a12.4'}), (14, {'func': '$10load_deref.3', 'args': ['$a12.4'], 'res': '$14call_function.5'}), (16, {'value': '$14call_function.5'}), (18, {'res': '$b18.6'}), (20, {'res': '$const20.7'}), (22, {'lhs': '$b18.6', 'rhs': '$const20.7', 'res': '$22compare_op.8'}), (24, {'pred': '$22compare_op.8'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={26: (), 98: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=26 nstack_initial=0):
    AdaptBlockInfo(insts=((26, {'res': '$const26.0'}), (28, {'value': '$const26.0'}), (30, {'res': '$b30.1'}), (32, {'value': '$b30.1', 'res': '$32unary_negative.2'}), (34, {'value': '$32unary_negative.2'}), (36, {'res': '$exp36.3'}), (38, {'res': '$const38.4'}), (40, {'lhs': '$exp36.3', 'rhs': '$const38.4', 'res': '$40compare_op.5'}), (42, {'pred': '$40compare_op.5'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={44: (), 48: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=44 nstack_initial=0):
    AdaptBlockInfo(insts=((44, {'res': '$44load_global.0'}), (46, {'exc': '$44load_global.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=48 nstack_initial=0):
    AdaptBlockInfo(insts=((48, {'res': '$48load_deref.0'}), (50, {'pred': '$48load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={52: (), 106: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=52 nstack_initial=0):
    AdaptBlockInfo(insts=((52, {'res': '$a52.0'}), (54, {'res': '$const54.1'}), (56, {'lhs': '$a52.0', 'rhs': '$const54.1', 'res': '$56compare_op.2'}), (58, {'pred': '$56compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={60: (), 76: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=60 nstack_initial=0):
    AdaptBlockInfo(insts=((60, {'res': '$60load_deref.0'}), (62, {'pred': '$60load_deref.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={64: (), 68: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=64 nstack_initial=0):
    AdaptBlockInfo(insts=((64, {'res': '$64load_deref.0'}), (66, {'retval': '$64load_deref.0', 'castval': '$66return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=68 nstack_initial=0):
    AdaptBlockInfo(insts=((68, {'res': '$68load_global.0'}), (70, {'res': '$const70.1'}), (72, {'func': '$68load_global.0', 'args': ['$const70.1'], 'res': '$72call_function.2'}), (74, {'exc': '$72call_function.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=76 nstack_initial=0):
    AdaptBlockInfo(insts=((76, {'res': '$a76.0'}), (78, {'res': '$const78.1'}), (80, {'lhs': '$a76.0', 'rhs': '$const78.1', 'res': '$80compare_op.2'}), (82, {'pred': '$80compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={84: (), 106: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=84 nstack_initial=0):
    AdaptBlockInfo(insts=((84, {'res': '$a84.0'}), (86, {'res': '$const86.1'}), (88, {'lhs': '$a84.0', 'rhs': '$const86.1', 'res': '$88compare_op.2'}), (90, {'pred': '$88compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={92: (), 106: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=92 nstack_initial=0):
    AdaptBlockInfo(insts=((92, {'res': '$const92.0'}), (94, {'retval': '$const92.0', 'castval': '$94return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=98 nstack_initial=0):
    AdaptBlockInfo(insts=((98, {'res': '$const98.0'}), (100, {'value': '$const98.0'}), (102, {'res': '$b102.1'}), (104, {'value': '$b102.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={106: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=106 nstack_initial=0):
    AdaptBlockInfo(insts=((106, {'res': '$exp106.0'}), (108, {'res': '$const108.1'}), (110, {'lhs': '$exp106.0', 'rhs': '$const108.1', 'res': '$110compare_op.2'}), (112, {'pred': '$110compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={114: (), 130: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=114 nstack_initial=0):
    AdaptBlockInfo(insts=((114, {'res': '$114load_global.0'}), (116, {'item': '$114load_global.0', 'res': '$116load_method.1'}), (118, {'res': '$a118.2'}), (120, {'res': '$120load_global.3'}), (122, {'res': '$b122.4'}), (124, {'func': '$120load_global.3', 'args': ['$b122.4'], 'res': '$124call_function.5'}), (126, {'func': '$116load_method.1', 'args': ['$a118.2', '$124call_function.5'], 'res': '$126call_method.6'}), (128, {'retval': '$126call_method.6', 'castval': '$128return_value.7'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=130 nstack_initial=0):
    AdaptBlockInfo(insts=((130, {'res': '$exp130.0'}), (132, {'res': '$const132.1'}), (134, {'lhs': '$exp130.0', 'rhs': '$const132.1', 'res': '$134compare_op.2'}), (136, {'pred': '$134compare_op.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={138: (), 172: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=138 nstack_initial=0):
    AdaptBlockInfo(insts=((138, {'res': '$exp138.0'}), (140, {'res': '$const140.1'}), (142, {'lhs': '$exp138.0', 'rhs': '$const140.1', 'res': '$142binary_and.2'}), (144, {'pred': '$142binary_and.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={146: (), 154: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=146 nstack_initial=0):
    AdaptBlockInfo(insts=((146, {'res': '$r146.0'}), (148, {'res': '$a148.1'}), (150, {'lhs': '$r146.0', 'rhs': '$a148.1', 'res': '$150inplace_multiply.2'}), (152, {'value': '$150inplace_multiply.2'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={154: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=154 nstack_initial=0):
    AdaptBlockInfo(insts=((154, {'res': '$exp154.0'}), (156, {'res': '$const156.1'}), (158, {'lhs': '$exp154.0', 'rhs': '$const156.1', 'res': '$158inplace_rshift.2'}), (160, {'value': '$158inplace_rshift.2'}), (162, {'res': '$a162.3'}), (164, {'res': '$a164.4'}), (166, {'lhs': '$a162.3', 'rhs': '$a164.4', 'res': '$166inplace_multiply.5'}), (168, {'value': '$166inplace_multiply.5'}), (170, {})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={130: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=172 nstack_initial=0):
    AdaptBlockInfo(insts=((172, {'res': '$invert172.0'}), (174, {'pred': '$invert172.0'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={176: (), 184: ()})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=176 nstack_initial=0):
    AdaptBlockInfo(insts=((176, {'res': '$const176.0'}), (178, {'res': '$r178.1'}), (180, {'lhs': '$const176.0', 'rhs': '$r178.1', 'res': '$180binary_true_divide.2'}), (182, {'retval': '$180binary_true_divide.2', 'castval': '$182return_value.3'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.byteflow:block_infos State(pc_initial=184 nstack_initial=0):
    AdaptBlockInfo(insts=((184, {'res': '$r184.0'}), (186, {'retval': '$r184.0', 'castval': '$186return_value.1'})), outgoing_phis={}, blockstack=(), active_try_block=None, outgoing_edgepushed={})
    DEBUG:numba.core.interpreter:label 0:
        a = arg(0, name=a)                       ['a']
        b = arg(1, name=b)                       ['b']
        $2load_deref.0 = freevar(tp: float64)    ['$2load_deref.0']
        $const4.1 = const(int, 1)                ['$const4.1']
        r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$2load_deref.0', '$const4.1', 'r']
        $10load_deref.3 = freevar(tp: float64)   ['$10load_deref.3']
        a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$10load_deref.3', 'a', 'a.1']
        $const20.7 = const(int, 0)               ['$const20.7']
        $22compare_op.8 = b < $const20.7         ['$22compare_op.8', '$const20.7', 'b']
        bool24 = global(bool: <class 'bool'>)    ['bool24']
        $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None) ['$22compare_op.8', '$24pred', 'bool24']
        branch $24pred, 26, 98                   ['$24pred']
    label 26:
        invert = const(bool, True)               ['invert']
        exp = unary(fn=<built-in function neg>, value=b) ['b', 'exp']
        $const38.4 = const(int, 0)               ['$const38.4']
        $40compare_op.5 = exp < $const38.4       ['$40compare_op.5', '$const38.4', 'exp']
        bool42 = global(bool: <class 'bool'>)    ['bool42']
        $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None) ['$40compare_op.5', '$42pred', 'bool42']
        branch $42pred, 44, 48                   ['$42pred']
    label 44:
        $44load_global.0 = global(OverflowError: <class 'OverflowError'>) ['$44load_global.0']
        raise $44load_global.0                   ['$44load_global.0']
    label 48:
        $48load_deref.0 = freevar(is_integer: False) ['$48load_deref.0']
        bool50 = global(bool: <class 'bool'>)    ['bool50']
        $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None) ['$48load_deref.0', '$50pred', 'bool50']
        branch $50pred, 52, 106                  ['$50pred']
    label 52:
        $const54.1 = const(int, 0)               ['$const54.1']
        $56compare_op.2 = a.1 == $const54.1      ['$56compare_op.2', '$const54.1', 'a.1']
        bool58 = global(bool: <class 'bool'>)    ['bool58']
        $58pred = call bool58($56compare_op.2, func=bool58, args=(Var($56compare_op.2, numbers.py:224),), kws=(), vararg=None, varkwarg=None, target=None) ['$56compare_op.2', '$58pred', 'bool58']
        branch $58pred, 60, 76                   ['$58pred']
    label 60:
        $60load_deref.0 = freevar(zerodiv_return: False) ['$60load_deref.0']
        bool62 = global(bool: <class 'bool'>)    ['bool62']
        $62pred = call bool62($60load_deref.0, func=bool62, args=(Var($60load_deref.0, numbers.py:225),), kws=(), vararg=None, varkwarg=None, target=None) ['$60load_deref.0', '$62pred', 'bool62']
        branch $62pred, 64, 68                   ['$62pred']
    label 64:
        $64load_deref.0 = freevar(zerodiv_return: False) ['$64load_deref.0']
        $66return_value.1 = cast(value=$64load_deref.0) ['$64load_deref.0', '$66return_value.1']
        return $66return_value.1                 ['$66return_value.1']
    label 68:
        $68load_global.0 = global(ZeroDivisionError: <class 'ZeroDivisionError'>) ['$68load_global.0']
        $const70.1 = const(str, 0 cannot be raised to a negative power) ['$const70.1']
        $72call_function.2 = call $68load_global.0($const70.1, func=$68load_global.0, args=[Var($const70.1, numbers.py:228)], kws=(), vararg=None, varkwarg=None, target=None) ['$68load_global.0', '$72call_function.2', '$const70.1']
        raise $72call_function.2                 ['$72call_function.2']
    label 76:
        $const78.1 = const(int, 1)               ['$const78.1']
        $80compare_op.2 = a.1 != $const78.1      ['$80compare_op.2', '$const78.1', 'a.1']
        bool82 = global(bool: <class 'bool'>)    ['bool82']
        $82pred = call bool82($80compare_op.2, func=bool82, args=(Var($80compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$80compare_op.2', '$82pred', 'bool82']
        branch $82pred, 84, 106                  ['$82pred']
    label 84:
        $const86.1 = const(int, -1)              ['$const86.1']
        $88compare_op.2 = a.1 != $const86.1      ['$88compare_op.2', '$const86.1', 'a.1']
        bool90 = global(bool: <class 'bool'>)    ['bool90']
        $90pred = call bool90($88compare_op.2, func=bool90, args=(Var($88compare_op.2, numbers.py:229),), kws=(), vararg=None, varkwarg=None, target=None) ['$88compare_op.2', '$90pred', 'bool90']
        branch $90pred, 92, 106                  ['$90pred']
    label 92:
        $const92.0 = const(int, 0)               ['$const92.0']
        $94return_value.1 = cast(value=$const92.0) ['$94return_value.1', '$const92.0']
        return $94return_value.1                 ['$94return_value.1']
    label 98:
        invert = const(bool, False)              ['invert']
        exp = b                                  ['b', 'exp']
        jump 106                                 []
    label 106:
        $const108.1 = const(int, 65536)          ['$const108.1']
        $110compare_op.2 = exp > $const108.1     ['$110compare_op.2', '$const108.1', 'exp']
        bool112 = global(bool: <class 'bool'>)   ['bool112']
        $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None) ['$110compare_op.2', '$112pred', 'bool112']
        branch $112pred, 114, 130                ['$112pred']
    label 114:
        $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>) ['$114load_global.0']
        $116load_method.1 = getattr(value=$114load_global.0, attr=pow) ['$114load_global.0', '$116load_method.1']
        $120load_global.3 = global(float: <class 'float'>) ['$120load_global.3']
        $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None) ['$120load_global.3', '$124call_function.5', 'b']
        $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None) ['$116load_method.1', '$124call_function.5', '$126call_method.6', 'a.1']
        $128return_value.7 = cast(value=$126call_method.6) ['$126call_method.6', '$128return_value.7']
        return $128return_value.7                ['$128return_value.7']
    label 130:
        $const132.1 = const(int, 0)              ['$const132.1']
        $134compare_op.2 = exp != $const132.1    ['$134compare_op.2', '$const132.1', 'exp']
        bool136 = global(bool: <class 'bool'>)   ['bool136']
        $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None) ['$134compare_op.2', '$136pred', 'bool136']
        branch $136pred, 138, 172                ['$136pred']
    label 138:
        $const140.1 = const(int, 1)              ['$const140.1']
        $142binary_and.2 = exp & $const140.1     ['$142binary_and.2', '$const140.1', 'exp']
        bool144 = global(bool: <class 'bool'>)   ['bool144']
        $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None) ['$142binary_and.2', '$144pred', 'bool144']
        branch $144pred, 146, 154                ['$144pred']
    label 146:
        $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$150inplace_multiply.2', 'a.1', 'r']
        r = $150inplace_multiply.2               ['$150inplace_multiply.2', 'r']
        jump 154                                 []
    label 154:
        $const156.1 = const(int, 1)              ['$const156.1']
        $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined) ['$158inplace_rshift.2', '$const156.1', 'exp']
        exp = $158inplace_rshift.2               ['$158inplace_rshift.2', 'exp']
        $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined) ['$166inplace_multiply.5', 'a.1', 'a.1']
        a.1 = $166inplace_multiply.5             ['$166inplace_multiply.5', 'a.1']
        jump 130                                 []
    label 172:
        bool174 = global(bool: <class 'bool'>)   ['bool174']
        $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None) ['$174pred', 'bool174', 'invert']
        branch $174pred, 176, 184                ['$174pred']
    label 176:
        $const176.0 = const(float, 1.0)          ['$const176.0']
        $180binary_true_divide.2 = $const176.0 / r ['$180binary_true_divide.2', '$const176.0', 'r']
        $182return_value.3 = cast(value=$180binary_true_divide.2) ['$180binary_true_divide.2', '$182return_value.3']
        return $182return_value.3                ['$182return_value.3']
    label 184:
        $186return_value.1 = cast(value=r)       ['$186return_value.1', 'r']
        return $186return_value.1                ['$186return_value.1']

    DEBUG:numba.core.ssa:==== SSA block analysis pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
    DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
    DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 26
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
    DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 44
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
    DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 48
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
    DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
    DEBUG:numba.core.ssa:on stmt: exp = b
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
    DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
    DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 114
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
    DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
    DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
    DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
    DEBUG:numba.core.ssa:on stmt: return $128return_value.7
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 130
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
    DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
    DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 146
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
    DEBUG:numba.core.ssa:on stmt: jump 154
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 154
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
    DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:on stmt: jump 130
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 172
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 176
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
    DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
    DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
    DEBUG:numba.core.ssa:on stmt: return $182return_value.3
    DEBUG:numba.core.ssa:==== SSA block analysis pass on 184
    DEBUG:numba.core.ssa:Running <numba.core.ssa._GatherDefsHandler object at 0x7f2cb8285d30>
    DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
    DEBUG:numba.core.ssa:on stmt: return $186return_value.1
    DEBUG:numba.core.ssa:defs defaultdict(<class 'list'>,
                {'$10load_deref.3': [<numba.core.ir.Assign object at 0x7f2cb82d8dc0>],
                 '$110compare_op.2': [<numba.core.ir.Assign object at 0x7f2cb82fd040>],
                 '$112pred': [<numba.core.ir.Assign object at 0x7f2cb82fd2b0>],
                 '$114load_global.0': [<numba.core.ir.Assign object at 0x7f2cb82fd4f0>],
                 '$116load_method.1': [<numba.core.ir.Assign object at 0x7f2cb82fd670>],
                 '$120load_global.3': [<numba.core.ir.Assign object at 0x7f2cb82fd910>],
                 '$124call_function.5': [<numba.core.ir.Assign object at 0x7f2cb82fdc10>],
                 '$126call_method.6': [<numba.core.ir.Assign object at 0x7f2cb82fddc0>],
                 '$128return_value.7': [<numba.core.ir.Assign object at 0x7f2cb82fdeb0>],
                 '$134compare_op.2': [<numba.core.ir.Assign object at 0x7f2cb83003a0>],
                 '$136pred': [<numba.core.ir.Assign object at 0x7f2cb8300610>],
                 '$142binary_and.2': [<numba.core.ir.Assign object at 0x7f2cb8300b20>],
                 '$144pred': [<numba.core.ir.Assign object at 0x7f2cb8300d90>],
                 '$150inplace_multiply.2': [<numba.core.ir.Assign object at 0x7f2cb8282280>],
                 '$158inplace_rshift.2': [<numba.core.ir.Assign object at 0x7f2cb82827c0>],
                 '$166inplace_multiply.5': [<numba.core.ir.Assign object at 0x7f2cb8282c40>],
                 '$174pred': [<numba.core.ir.Assign object at 0x7f2cb8285130>],
                 '$180binary_true_divide.2': [<numba.core.ir.Assign object at 0x7f2cb8285640>],
                 '$182return_value.3': [<numba.core.ir.Assign object at 0x7f2cb8285790>],
                 '$186return_value.1': [<numba.core.ir.Assign object at 0x7f2cb8285af0>],
                 '$22compare_op.8': [<numba.core.ir.Assign object at 0x7f2cb82f4610>],
                 '$24pred': [<numba.core.ir.Assign object at 0x7f2cb82f4880>],
                 '$2load_deref.0': [<numba.core.ir.Assign object at 0x7f2cb82d8820>],
                 '$40compare_op.5': [<numba.core.ir.Assign object at 0x7f2cb82f5310>],
                 '$42pred': [<numba.core.ir.Assign object at 0x7f2cb82f54f0>],
                 '$44load_global.0': [<numba.core.ir.Assign object at 0x7f2cb82f5610>],
                 '$48load_deref.0': [<numba.core.ir.Assign object at 0x7f2cb82f5910>],
                 '$50pred': [<numba.core.ir.Assign object at 0x7f2cb82f5bb0>],
                 '$const108.1': [<numba.core.ir.Assign object at 0x7f2cb82fbe50>],
                 '$const132.1': [<numba.core.ir.Assign object at 0x7f2cb83001f0>],
                 '$const140.1': [<numba.core.ir.Assign object at 0x7f2cb8300970>],
                 '$const156.1': [<numba.core.ir.Assign object at 0x7f2cb8282610>],
                 '$const176.0': [<numba.core.ir.Assign object at 0x7f2cb8285370>],
                 '$const20.7': [<numba.core.ir.Assign object at 0x7f2cb82f4460>],
                 '$const38.4': [<numba.core.ir.Assign object at 0x7f2cb82f5160>],
                 '$const4.1': [<numba.core.ir.Assign object at 0x7f2cb82d89a0>],
                 'a': [<numba.core.ir.Assign object at 0x7f2cb82d8790>],
                 'a.1': [<numba.core.ir.Assign object at 0x7f2cb82f4100>,
                         <numba.core.ir.Assign object at 0x7f2cb8282d00>],
                 'b': [<numba.core.ir.Assign object at 0x7f2cb82d8490>],
                 'bool112': [<numba.core.ir.Assign object at 0x7f2cb82fd190>],
                 'bool136': [<numba.core.ir.Assign object at 0x7f2cb83004f0>],
                 'bool144': [<numba.core.ir.Assign object at 0x7f2cb8300c70>],
                 'bool174': [<numba.core.ir.Assign object at 0x7f2cb8282fd0>],
                 'bool24': [<numba.core.ir.Assign object at 0x7f2cb82f4760>],
                 'bool42': [<numba.core.ir.Assign object at 0x7f2cb82d4820>],
                 'bool50': [<numba.core.ir.Assign object at 0x7f2cb82f5a90>],
                 'exp': [<numba.core.ir.Assign object at 0x7f2cb82f4d60>,
                         <numba.core.ir.Assign object at 0x7f2cb82fbbe0>,
                         <numba.core.ir.Assign object at 0x7f2cb8282880>],
                 'invert': [<numba.core.ir.Assign object at 0x7f2cb82f49a0>,
                            <numba.core.ir.Assign object at 0x7f2cb82fb910>],
                 'r': [<numba.core.ir.Assign object at 0x7f2cb82d8b80>,
                       <numba.core.ir.Assign object at 0x7f2cb8282340>]})
    DEBUG:numba.core.ssa:SSA violators {'a.1', 'r', 'exp', 'invert'}
    DEBUG:numba.core.ssa:Fix SSA violator on var a.1
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
    DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:first assign: a.1
    DEBUG:numba.core.ssa:replaced with: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
    DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
    DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
    DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
    DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
    DEBUG:numba.core.ssa:on stmt: exp = b
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
    DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
    DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
    DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
    DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
    DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
    DEBUG:numba.core.ssa:on stmt: return $128return_value.7
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
    DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
    DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
    DEBUG:numba.core.ssa:on stmt: jump 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
    DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: a.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:replaced with: a.1.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:on stmt: jump 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
    DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
    DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
    DEBUG:numba.core.ssa:on stmt: return $182return_value.3
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
    DEBUG:numba.core.ssa:on stmt: return $186return_value.1
    DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
                {0: [<numba.core.ir.Assign object at 0x7f2cb8285f40>],
                 154: [<numba.core.ir.Assign object at 0x7f2cb82d47f0>]})
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
    DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
    DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
    DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
    DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
    DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
    DEBUG:numba.core.ssa:on stmt: exp = b
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
    DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
    DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
    DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
    DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
    DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:find_def var='a.1' stmt=$126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:find_def_from_top label 114
    DEBUG:numba.core.ssa:idom 106 from label 114
    DEBUG:numba.core.ssa:find_def_from_bottom label 106
    DEBUG:numba.core.ssa:find_def_from_top label 106
    DEBUG:numba.core.ssa:idom 0 from label 106
    DEBUG:numba.core.ssa:find_def_from_bottom label 0
    DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
    DEBUG:numba.core.ssa:on stmt: return $128return_value.7
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
    DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
    DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:find_def var='a.1' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:find_def_from_top label 146
    DEBUG:numba.core.ssa:idom 138 from label 146
    DEBUG:numba.core.ssa:find_def_from_bottom label 138
    DEBUG:numba.core.ssa:find_def_from_top label 138
    DEBUG:numba.core.ssa:idom 130 from label 138
    DEBUG:numba.core.ssa:find_def_from_bottom label 130
    DEBUG:numba.core.ssa:find_def_from_top label 130
    DEBUG:numba.core.ssa:insert phi node a.1.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
    DEBUG:numba.core.ssa:find_def_from_bottom label 106
    DEBUG:numba.core.ssa:find_def_from_top label 106
    DEBUG:numba.core.ssa:idom 0 from label 106
    DEBUG:numba.core.ssa:find_def_from_bottom label 0
    DEBUG:numba.core.ssa:incoming_def a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:find_def_from_bottom label 154
    DEBUG:numba.core.ssa:incoming_def a.1.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
    DEBUG:numba.core.ssa:on stmt: jump 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
    DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:find_def var='a.1' stmt=$166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1, rhs=a.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:find_def_from_top label 154
    DEBUG:numba.core.ssa:idom 138 from label 154
    DEBUG:numba.core.ssa:find_def_from_bottom label 138
    DEBUG:numba.core.ssa:find_def_from_top label 138
    DEBUG:numba.core.ssa:idom 130 from label 138
    DEBUG:numba.core.ssa:find_def_from_bottom label 130
    DEBUG:numba.core.ssa:replaced with: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:on stmt: jump 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
    DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
    DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
    DEBUG:numba.core.ssa:on stmt: return $182return_value.3
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
    DEBUG:numba.core.ssa:on stmt: return $186return_value.1
    DEBUG:numba.core.ssa:Fix SSA violator on var r
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
    DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:first assign: r
    DEBUG:numba.core.ssa:replaced with: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
    DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
    DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
    DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
    DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
    DEBUG:numba.core.ssa:on stmt: exp = b
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
    DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
    DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
    DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
    DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
    DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
    DEBUG:numba.core.ssa:on stmt: return $128return_value.7
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
    DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
    DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: r = $150inplace_multiply.2
    DEBUG:numba.core.ssa:replaced with: r.1 = $150inplace_multiply.2
    DEBUG:numba.core.ssa:on stmt: jump 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
    DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:on stmt: jump 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
    DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
    DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
    DEBUG:numba.core.ssa:on stmt: return $182return_value.3
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
    DEBUG:numba.core.ssa:on stmt: return $186return_value.1
    DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
                {0: [<numba.core.ir.Assign object at 0x7f2cb82d4ca0>],
                 146: [<numba.core.ir.Assign object at 0x7f2cb8285c10>]})
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
    DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
    DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
    DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
    DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
    DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
    DEBUG:numba.core.ssa:on stmt: exp = b
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
    DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
    DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
    DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
    DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
    DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
    DEBUG:numba.core.ssa:on stmt: return $128return_value.7
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
    DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
    DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:find_def var='r' stmt=$150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:find_def_from_top label 146
    DEBUG:numba.core.ssa:idom 138 from label 146
    DEBUG:numba.core.ssa:find_def_from_bottom label 138
    DEBUG:numba.core.ssa:find_def_from_top label 138
    DEBUG:numba.core.ssa:idom 130 from label 138
    DEBUG:numba.core.ssa:find_def_from_bottom label 130
    DEBUG:numba.core.ssa:find_def_from_top label 130
    DEBUG:numba.core.ssa:insert phi node r.2 = phi(incoming_values=[], incoming_blocks=[]) at 130
    DEBUG:numba.core.ssa:find_def_from_bottom label 106
    DEBUG:numba.core.ssa:find_def_from_top label 106
    DEBUG:numba.core.ssa:idom 0 from label 106
    DEBUG:numba.core.ssa:find_def_from_bottom label 0
    DEBUG:numba.core.ssa:incoming_def r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:find_def_from_bottom label 154
    DEBUG:numba.core.ssa:find_def_from_top label 154
    DEBUG:numba.core.ssa:insert phi node r.3 = phi(incoming_values=[], incoming_blocks=[]) at 154
    DEBUG:numba.core.ssa:find_def_from_bottom label 138
    DEBUG:numba.core.ssa:find_def_from_top label 138
    DEBUG:numba.core.ssa:idom 130 from label 138
    DEBUG:numba.core.ssa:find_def_from_bottom label 130
    DEBUG:numba.core.ssa:incoming_def r.2 = phi(incoming_values=[Var(r, numbers.py:216)], incoming_blocks=[106])
    DEBUG:numba.core.ssa:find_def_from_bottom label 146
    DEBUG:numba.core.ssa:incoming_def r.1 = $150inplace_multiply.2
    DEBUG:numba.core.ssa:incoming_def r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
    DEBUG:numba.core.ssa:replaced with: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
    DEBUG:numba.core.ssa:on stmt: jump 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
    DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:on stmt: jump 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
    DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r
    DEBUG:numba.core.ssa:find_def var='r' stmt=$180binary_true_divide.2 = $const176.0 / r
    DEBUG:numba.core.ssa:find_def_from_top label 176
    DEBUG:numba.core.ssa:idom 172 from label 176
    DEBUG:numba.core.ssa:find_def_from_bottom label 172
    DEBUG:numba.core.ssa:find_def_from_top label 172
    DEBUG:numba.core.ssa:idom 130 from label 172
    DEBUG:numba.core.ssa:find_def_from_bottom label 130
    DEBUG:numba.core.ssa:replaced with: $180binary_true_divide.2 = $const176.0 / r.2
    DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
    DEBUG:numba.core.ssa:on stmt: return $182return_value.3
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb8285e50>
    DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r)
    DEBUG:numba.core.ssa:find_def var='r' stmt=$186return_value.1 = cast(value=r)
    DEBUG:numba.core.ssa:find_def_from_top label 184
    DEBUG:numba.core.ssa:idom 172 from label 184
    DEBUG:numba.core.ssa:find_def_from_bottom label 172
    DEBUG:numba.core.ssa:find_def_from_top label 172
    DEBUG:numba.core.ssa:idom 130 from label 172
    DEBUG:numba.core.ssa:find_def_from_bottom label 130
    DEBUG:numba.core.ssa:replaced with: $186return_value.1 = cast(value=r.2)
    DEBUG:numba.core.ssa:on stmt: return $186return_value.1
    DEBUG:numba.core.ssa:Fix SSA violator on var exp
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
    DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
    DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
    DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:first assign: exp
    DEBUG:numba.core.ssa:replaced with: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
    DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
    DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
    DEBUG:numba.core.ssa:on stmt: exp = b
    DEBUG:numba.core.ssa:replaced with: exp.1 = b
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
    DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
    DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
    DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
    DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
    DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
    DEBUG:numba.core.ssa:on stmt: return $128return_value.7
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
    DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
    DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
    DEBUG:numba.core.ssa:on stmt: jump 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
    DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: exp = $158inplace_rshift.2
    DEBUG:numba.core.ssa:replaced with: exp.2 = $158inplace_rshift.2
    DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:on stmt: jump 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
    DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
    DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
    DEBUG:numba.core.ssa:on stmt: return $182return_value.3
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb8285df0>
    DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
    DEBUG:numba.core.ssa:on stmt: return $186return_value.1
    DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
                {26: [<numba.core.ir.Assign object at 0x7f2cb82d4850>],
                 98: [<numba.core.ir.Assign object at 0x7f2cb82d4cd0>],
                 154: [<numba.core.ir.Assign object at 0x7f2cb82b33a0>]})
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
    DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
    DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
    DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:find_def var='exp' stmt=$40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
    DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
    DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
    DEBUG:numba.core.ssa:on stmt: exp.1 = b
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
    DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp > $const108.1
    DEBUG:numba.core.ssa:find_def var='exp' stmt=$110compare_op.2 = exp > $const108.1
    DEBUG:numba.core.ssa:find_def_from_top label 106
    DEBUG:numba.core.ssa:insert phi node exp.3 = phi(incoming_values=[], incoming_blocks=[]) at 106
    DEBUG:numba.core.ssa:find_def_from_bottom label 48
    DEBUG:numba.core.ssa:find_def_from_top label 48
    DEBUG:numba.core.ssa:idom 26 from label 48
    DEBUG:numba.core.ssa:find_def_from_bottom label 26
    DEBUG:numba.core.ssa:incoming_def exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:find_def_from_bottom label 98
    DEBUG:numba.core.ssa:incoming_def exp.1 = b
    DEBUG:numba.core.ssa:replaced with: $110compare_op.2 = exp.3 > $const108.1
    DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
    DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
    DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
    DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
    DEBUG:numba.core.ssa:on stmt: return $128return_value.7
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp != $const132.1
    DEBUG:numba.core.ssa:find_def var='exp' stmt=$134compare_op.2 = exp != $const132.1
    DEBUG:numba.core.ssa:find_def_from_top label 130
    DEBUG:numba.core.ssa:insert phi node exp.4 = phi(incoming_values=[], incoming_blocks=[]) at 130
    DEBUG:numba.core.ssa:find_def_from_bottom label 106
    DEBUG:numba.core.ssa:incoming_def exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
    DEBUG:numba.core.ssa:find_def_from_bottom label 154
    DEBUG:numba.core.ssa:incoming_def exp.2 = $158inplace_rshift.2
    DEBUG:numba.core.ssa:replaced with: $134compare_op.2 = exp.4 != $const132.1
    DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp & $const140.1
    DEBUG:numba.core.ssa:find_def var='exp' stmt=$142binary_and.2 = exp & $const140.1
    DEBUG:numba.core.ssa:find_def_from_top label 138
    DEBUG:numba.core.ssa:idom 130 from label 138
    DEBUG:numba.core.ssa:find_def_from_bottom label 130
    DEBUG:numba.core.ssa:replaced with: $142binary_and.2 = exp.4 & $const140.1
    DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
    DEBUG:numba.core.ssa:on stmt: jump 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
    DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:find_def var='exp' stmt=$158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:find_def_from_top label 154
    DEBUG:numba.core.ssa:idom 138 from label 154
    DEBUG:numba.core.ssa:find_def_from_bottom label 138
    DEBUG:numba.core.ssa:find_def_from_top label 138
    DEBUG:numba.core.ssa:idom 130 from label 138
    DEBUG:numba.core.ssa:find_def_from_bottom label 130
    DEBUG:numba.core.ssa:replaced with: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
    DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:on stmt: jump 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
    DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
    DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
    DEBUG:numba.core.ssa:on stmt: return $182return_value.3
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d4c40>
    DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
    DEBUG:numba.core.ssa:on stmt: return $186return_value.1
    DEBUG:numba.core.ssa:Fix SSA violator on var invert
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
    DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
    DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
    DEBUG:numba.core.ssa:first assign: invert
    DEBUG:numba.core.ssa:replaced with: invert = const(bool, True)
    DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
    DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
    DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, False)
    DEBUG:numba.core.ssa:replaced with: invert.1 = const(bool, False)
    DEBUG:numba.core.ssa:on stmt: exp.1 = b
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
    DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
    DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
    DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
    DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
    DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
    DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
    DEBUG:numba.core.ssa:on stmt: return $128return_value.7
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
    DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
    DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
    DEBUG:numba.core.ssa:on stmt: jump 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
    DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
    DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:on stmt: jump 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
    DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
    DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
    DEBUG:numba.core.ssa:on stmt: return $182return_value.3
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FreshVarHandler object at 0x7f2cb82b3eb0>
    DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
    DEBUG:numba.core.ssa:on stmt: return $186return_value.1
    DEBUG:numba.core.ssa:Replaced assignments: defaultdict(<class 'list'>,
                {26: [<numba.core.ir.Assign object at 0x7f2cb82b3700>],
                 98: [<numba.core.ir.Assign object at 0x7f2cb82d4bb0>]})
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 0
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: a = arg(0, name=a)
    DEBUG:numba.core.ssa:on stmt: b = arg(1, name=b)
    DEBUG:numba.core.ssa:on stmt: $2load_deref.0 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: $const4.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: r = call $2load_deref.0($const4.1, func=$2load_deref.0, args=[Var($const4.1, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $10load_deref.3 = freevar(tp: float64)
    DEBUG:numba.core.ssa:on stmt: a.1 = call $10load_deref.3(a, func=$10load_deref.3, args=[Var(a, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $const20.7 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $22compare_op.8 = b < $const20.7
    DEBUG:numba.core.ssa:on stmt: bool24 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $24pred = call bool24($22compare_op.8, func=bool24, args=(Var($22compare_op.8, numbers.py:218),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $24pred, 26, 98
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 26
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: invert = const(bool, True)
    DEBUG:numba.core.ssa:on stmt: exp = unary(fn=<built-in function neg>, value=b)
    DEBUG:numba.core.ssa:on stmt: $const38.4 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $40compare_op.5 = exp < $const38.4
    DEBUG:numba.core.ssa:on stmt: bool42 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $42pred = call bool42($40compare_op.5, func=bool42, args=(Var($40compare_op.5, numbers.py:221),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $42pred, 44, 48
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 44
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: $44load_global.0 = global(OverflowError: <class 'OverflowError'>)
    DEBUG:numba.core.ssa:on stmt: <static> raise <class 'OverflowError'>
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 48
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: $48load_deref.0 = freevar(is_integer: False)
    DEBUG:numba.core.ssa:on stmt: bool50 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $50pred = call bool50($48load_deref.0, func=bool50, args=(Var($48load_deref.0, numbers.py:223),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 98
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: invert.1 = const(bool, False)
    DEBUG:numba.core.ssa:on stmt: exp.1 = b
    DEBUG:numba.core.ssa:on stmt: jump 106
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 106
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: exp.3 = phi(incoming_values=[Var(exp, numbers.py:220), Var(exp.1, numbers.py:233)], incoming_blocks=[48, 98])
    DEBUG:numba.core.ssa:on stmt: $const108.1 = const(int, 65536)
    DEBUG:numba.core.ssa:on stmt: $110compare_op.2 = exp.3 > $const108.1
    DEBUG:numba.core.ssa:on stmt: bool112 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $112pred = call bool112($110compare_op.2, func=bool112, args=(Var($110compare_op.2, numbers.py:234),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $112pred, 114, 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 114
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: $114load_global.0 = global(math: <module 'math' from '/opt/hostedtoolcache/Python/3.9.15/x64/lib/python3.9/lib-dynload/math.cpython-39-x86_64-linux-gnu.so'>)
    DEBUG:numba.core.ssa:on stmt: $116load_method.1 = getattr(value=$114load_global.0, attr=pow)
    DEBUG:numba.core.ssa:on stmt: $120load_global.3 = global(float: <class 'float'>)
    DEBUG:numba.core.ssa:on stmt: $124call_function.5 = call $120load_global.3(b, func=$120load_global.3, args=[Var(b, numbers.py:216)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $126call_method.6 = call $116load_method.1(a.1, $124call_function.5, func=$116load_method.1, args=[Var(a.1, numbers.py:217), Var($124call_function.5, numbers.py:236)], kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: $128return_value.7 = cast(value=$126call_method.6)
    DEBUG:numba.core.ssa:on stmt: return $128return_value.7
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 130
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: exp.4 = phi(incoming_values=[Var(exp.3, numbers.py:234), Var(exp.2, numbers.py:240)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: r.2 = phi(incoming_values=[Var(r, numbers.py:216), Var(r.3, numbers.py:239)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: a.1.2 = phi(incoming_values=[Var(a.1, numbers.py:217), Var(a.1.1, numbers.py:241)], incoming_blocks=[106, 154])
    DEBUG:numba.core.ssa:on stmt: $const132.1 = const(int, 0)
    DEBUG:numba.core.ssa:on stmt: $134compare_op.2 = exp.4 != $const132.1
    DEBUG:numba.core.ssa:on stmt: bool136 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $136pred = call bool136($134compare_op.2, func=bool136, args=(Var($134compare_op.2, numbers.py:237),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $136pred, 138, 172
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 138
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: $const140.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $142binary_and.2 = exp.4 & $const140.1
    DEBUG:numba.core.ssa:on stmt: bool144 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $144pred = call bool144($142binary_and.2, func=bool144, args=(Var($142binary_and.2, numbers.py:238),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $144pred, 146, 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 146
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: $150inplace_multiply.2 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=r.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: r.1 = $150inplace_multiply.2
    DEBUG:numba.core.ssa:on stmt: jump 154
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 154
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: r.3 = phi(incoming_values=[Var(r.2, numbers.py:239), Var(r.1, numbers.py:239)], incoming_blocks=[138, 146])
    DEBUG:numba.core.ssa:on stmt: $const156.1 = const(int, 1)
    DEBUG:numba.core.ssa:on stmt: $158inplace_rshift.2 = inplace_binop(fn=<built-in function irshift>, immutable_fn=<built-in function rshift>, lhs=exp.4, rhs=$const156.1, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: exp.2 = $158inplace_rshift.2
    DEBUG:numba.core.ssa:on stmt: $166inplace_multiply.5 = inplace_binop(fn=<built-in function imul>, immutable_fn=<built-in function mul>, lhs=a.1.2, rhs=a.1.2, static_lhs=Undefined, static_rhs=Undefined)
    DEBUG:numba.core.ssa:on stmt: a.1.1 = $166inplace_multiply.5
    DEBUG:numba.core.ssa:on stmt: jump 130
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 172
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: bool174 = global(bool: <class 'bool'>)
    DEBUG:numba.core.ssa:on stmt: $174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:find_def var='invert' stmt=$174pred = call bool174(invert, func=bool174, args=(Var(invert, numbers.py:219),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:find_def_from_top label 172
    DEBUG:numba.core.ssa:idom 130 from label 172
    DEBUG:numba.core.ssa:find_def_from_bottom label 130
    DEBUG:numba.core.ssa:find_def_from_top label 130
    DEBUG:numba.core.ssa:idom 106 from label 130
    DEBUG:numba.core.ssa:find_def_from_bottom label 106
    DEBUG:numba.core.ssa:find_def_from_top label 106
    DEBUG:numba.core.ssa:insert phi node invert.2 = phi(incoming_values=[], incoming_blocks=[]) at 106
    DEBUG:numba.core.ssa:find_def_from_bottom label 48
    DEBUG:numba.core.ssa:find_def_from_top label 48
    DEBUG:numba.core.ssa:idom 26 from label 48
    DEBUG:numba.core.ssa:find_def_from_bottom label 26
    DEBUG:numba.core.ssa:incoming_def invert = const(bool, True)
    DEBUG:numba.core.ssa:find_def_from_bottom label 98
    DEBUG:numba.core.ssa:incoming_def invert.1 = const(bool, False)
    DEBUG:numba.core.ssa:replaced with: $174pred = call bool174(invert.2, func=bool174, args=(Var(invert.2, numbers.py:243),), kws=(), vararg=None, varkwarg=None, target=None)
    DEBUG:numba.core.ssa:on stmt: branch $174pred, 176, 184
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 176
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: $const176.0 = const(float, 1.0)
    DEBUG:numba.core.ssa:on stmt: $180binary_true_divide.2 = $const176.0 / r.2
    DEBUG:numba.core.ssa:on stmt: $182return_value.3 = cast(value=$180binary_true_divide.2)
    DEBUG:numba.core.ssa:on stmt: return $182return_value.3
    DEBUG:numba.core.ssa:==== SSA block rewrite pass on 184
    DEBUG:numba.core.ssa:Running <numba.core.ssa._FixSSAVars object at 0x7f2cb82d83d0>
    DEBUG:numba.core.ssa:on stmt: $186return_value.1 = cast(value=r.2)
    DEBUG:numba.core.ssa:on stmt: return $186return_value.1
    INFO     Solving problem OTProblem[stage='prepared', shape=(20, 20)].           
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0009658336639404297 sec
    DEBUG:absl:Finished tracing + transforming _threefry_split for jit in 0.005521535873413086 sec
    DEBUG:absl:Compiling _threefry_split (139830043761296 for args (ShapedArray(uint32[2]),).
    DEBUG:absl:Finished XLA compilation of _threefry_split in 0.07215380668640137 sec
    DEBUG:absl:Finished tracing + transforming _unstack for jit in 0.0018415451049804688 sec
    DEBUG:absl:Compiling _unstack (139830043762016 for args (ShapedArray(uint32[3,2]),).
    DEBUG:absl:Finished XLA compilation of _unstack in 0.01442265510559082 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004093647003173828 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004646778106689453 sec
    DEBUG:absl:Compiling prim_fun (139830049219024 for args (ShapedArray(float32[]),).
    DEBUG:absl:Finished XLA compilation of broadcast_in_dim in 0.010904788970947266 sec
    DEBUG:absl:Finished tracing + transforming true_divide for jit in 0.0009107589721679688 sec
    DEBUG:absl:Compiling true_divide (139830043428240 for args (ShapedArray(float32[3]), ShapedArray(int32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of true_divide in 0.01173853874206543 sec
    DEBUG:absl:Finished tracing + transforming <unnamed wrapped function> for jit in 0.596329927444458 sec
    DEBUG:absl:Compiling <unnamed wrapped function> (139830043428240 for args (ShapedArray(float32[20,30]), ShapedArray(uint32[2])).
    DEBUG:absl:Finished XLA compilation of <unnamed wrapped function> in 2.486914873123169 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0005545616149902344 sec
    DEBUG:absl:Compiling prim_fun (139830044043840 for args (ShapedArray(float32[]),).
    DEBUG:absl:Finished XLA compilation of broadcast_in_dim in 0.01278376579284668 sec
    DEBUG:absl:Finished tracing + transforming _where for jit in 0.0016841888427734375 sec
    DEBUG:absl:Compiling _where (139830044043920 for args (ShapedArray(bool[20]), ShapedArray(float32[20]), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of _where in 0.014815330505371094 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.0007472038269042969 sec
    DEBUG:absl:Compiling fn (139830043427280 for args (ShapedArray(float32[3]), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of fn in 0.011811017990112305 sec
    DEBUG:absl:Finished tracing + transforming _where for jit in 0.0017573833465576172 sec
    DEBUG:absl:Compiling _where (139830044042080 for args (ShapedArray(bool[3]), ShapedArray(float32[3]), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of _where in 0.012282609939575195 sec
    DEBUG:absl:Finished tracing + transforming run for jit in 0.3334801197052002 sec
    DEBUG:absl:Compiling run (139830043429120 for args (ShapedArray(float32[20,30]), ShapedArray(float32[3,30]), ShapedArray(float32[20]), ShapedArray(float32[3]), ShapedArray(float32[], weak_type=True), ShapedArray(float32[20]), ShapedArray(float32[3])).
    DEBUG:absl:Finished XLA compilation of run in 0.45653724670410156 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0005247592926025391 sec
    DEBUG:absl:Compiling prim_fun (139830043201920 for args (ShapedArray(float32[20]),).
    DEBUG:absl:Finished XLA compilation of broadcast_in_dim in 0.010804176330566406 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004591941833496094 sec
    DEBUG:absl:Compiling prim_fun (139830043203040 for args (ShapedArray(float32[3]),).
    DEBUG:absl:Finished XLA compilation of broadcast_in_dim in 0.009816646575927734 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.0007460117340087891 sec
    DEBUG:absl:Compiling fn (139830043205520 for args (ShapedArray(float32[20,1]), ShapedArray(float32[1,3])).
    DEBUG:absl:Finished XLA compilation of fn in 0.015611648559570312 sec
    DEBUG:absl:Finished tracing + transforming vdot for jit in 0.005245208740234375 sec
    DEBUG:absl:Compiling vdot (139830044118768 for args (ShapedArray(float32[20,30]), ShapedArray(float32[3,30])).
    DEBUG:absl:Finished XLA compilation of vdot in 0.01123809814453125 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.001497030258178711 sec
    DEBUG:absl:Compiling fn (139830044042000 for args (ShapedArray(float32[], weak_type=True), ShapedArray(float32[20,3])).
    DEBUG:absl:Finished XLA compilation of fn in 0.015936851501464844 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0006029605865478516 sec
    DEBUG:absl:Compiling prim_fun (139830338662784 for args (ShapedArray(float32[20,30]),).
    DEBUG:absl:Finished XLA compilation of integer_pow in 0.016219377517700195 sec
    DEBUG:absl:Finished tracing + transforming _reduce_sum for jit in 0.0009493827819824219 sec
    DEBUG:absl:Compiling _reduce_sum (139830043086736 for args (ShapedArray(float32[20,30]),).
    DEBUG:absl:Finished XLA compilation of _reduce_sum in 0.01886606216430664 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00046443939208984375 sec
    DEBUG:absl:Compiling prim_fun (139830338665344 for args (ShapedArray(float32[3,30]),).
    DEBUG:absl:Finished XLA compilation of integer_pow in 0.017447471618652344 sec
    DEBUG:absl:Finished tracing + transforming _reduce_sum for jit in 0.0009500980377197266 sec
    DEBUG:absl:Compiling _reduce_sum (139830043205520 for args (ShapedArray(float32[3,30]),).
    DEBUG:absl:Finished XLA compilation of _reduce_sum in 0.019072294235229492 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.0008435249328613281 sec
    DEBUG:absl:Compiling fn (139830044116208 for args (ShapedArray(float32[20,3]), ShapedArray(float32[20,3])).
    DEBUG:absl:Finished XLA compilation of fn in 0.016967296600341797 sec
    DEBUG:absl:Finished tracing + transforming _reduce_max for jit in 0.0007593631744384766 sec
    DEBUG:absl:Compiling _reduce_max (139830044118768 for args (ShapedArray(float32[20,3]),).
    DEBUG:absl:Finished XLA compilation of _reduce_max in 0.018741607666015625 sec
    DEBUG:absl:Finished tracing + transforming true_divide for jit in 0.0009427070617675781 sec
    DEBUG:absl:Compiling true_divide (139830044044640 for args (ShapedArray(float32[], weak_type=True), ShapedArray(float32[])).
    DEBUG:absl:Finished XLA compilation of true_divide in 0.011728286743164062 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.0008590221405029297 sec
    DEBUG:absl:Compiling fn (139830044118768 for args (ShapedArray(float32[20,3]), ShapedArray(float32[])).
    DEBUG:absl:Finished XLA compilation of fn in 0.0166165828704834 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.0009632110595703125 sec
    DEBUG:absl:Compiling <lambda> (139830044118768 for args (ShapedArray(float32[20,3]), ShapedArray(float32[20,3])).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.016297101974487305 sec
    DEBUG:absl:Finished tracing + transforming true_divide for jit in 0.0009288787841796875 sec
    DEBUG:absl:Compiling true_divide (139830043203600 for args (ShapedArray(float32[20,3]), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of true_divide in 0.016758441925048828 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.0006382465362548828 sec
    DEBUG:absl:Compiling <lambda> (139830043204720 for args (ShapedArray(float32[20,3]),).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.0171661376953125 sec
    DEBUG:absl:Finished tracing + transforming <unnamed wrapped function> for jit in 0.5946109294891357 sec
    DEBUG:absl:Compiling <unnamed wrapped function> (139830043202480 for args (ShapedArray(float32[20,30]), ShapedArray(uint32[2])).
    DEBUG:absl:Finished XLA compilation of <unnamed wrapped function> in 2.45198130607605 sec
    DEBUG:absl:Finished tracing + transforming run for jit in 0.5344254970550537 sec
    DEBUG:absl:Compiling run (139830047303376 for args (ShapedArray(float32[20,30]), ShapedArray(float32[20,30]), ShapedArray(float32[20]), ShapedArray(float32[20]), ShapedArray(float32[], weak_type=True), ShapedArray(float32[20,3]), ShapedArray(float32[20,3]), ShapedArray(float32[3])).
    DEBUG:absl:Finished XLA compilation of run in 1.4230382442474365 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.0009968280792236328 sec
    DEBUG:absl:Compiling <lambda> (139830044095088 for args (ShapedArray(float32[200]), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.030066251754760742 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004112720489501953 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.0008099079132080078 sec
    DEBUG:absl:Compiling fn (139830044908816 for args (ShapedArray(int32[2]), ShapedArray(int32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of fn in 0.012954950332641602 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00042176246643066406 sec
    DEBUG:absl:Compiling prim_fun (139830042872864 for args (ShapedArray(int32[2]), ShapedArray(int32[])).
    DEBUG:absl:Finished XLA compilation of add in 0.012842416763305664 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004208087921142578 sec
    DEBUG:absl:Compiling prim_fun (139830042873264 for args (ShapedArray(bool[2]), ShapedArray(int32[2]), ShapedArray(int32[2])).
    DEBUG:absl:Finished XLA compilation of select_n in 0.012014150619506836 sec
    DEBUG:absl:Finished tracing + transforming _broadcast_arrays for jit in 0.0003478527069091797 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0003814697265625 sec
    DEBUG:absl:Compiling prim_fun (139830044908656 for args (ShapedArray(int32[2]),).
    DEBUG:absl:Finished XLA compilation of broadcast_in_dim in 0.00913381576538086 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0003941059112548828 sec
    DEBUG:absl:Compiling prim_fun (139830044909056 for args (ShapedArray(float32[200]), ShapedArray(int32[2,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.011981725692749023 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00041985511779785156 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.0008301734924316406 sec
    DEBUG:absl:Compiling <lambda> (139830044098288 for args (ShapedArray(float32[200]), ShapedArray(int32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.03279542922973633 sec
    DEBUG:absl:Finished tracing + transforming _reduce_any for jit in 0.000949859619140625 sec
    DEBUG:absl:Compiling _reduce_any (139830044908656 for args (ShapedArray(bool[200]),).
    DEBUG:absl:Finished XLA compilation of _reduce_any in 0.052298545837402344 sec
    DEBUG:absl:Finished tracing + transforming isfinite for jit in 0.0005767345428466797 sec
    DEBUG:absl:Compiling isfinite (139830047302496 for args (ShapedArray(float32[200]),).
    DEBUG:absl:Finished XLA compilation of isfinite in 0.02964305877685547 sec
    DEBUG:absl:Finished tracing + transforming _reduce_all for jit in 0.0008714199066162109 sec
    DEBUG:absl:Compiling _reduce_all (139830044908816 for args (ShapedArray(bool[200]),).
    DEBUG:absl:Finished XLA compilation of _reduce_all in 0.04491066932678223 sec
    DEBUG:absl:Finished tracing + transforming op for jit in 0.0008089542388916016 sec
    DEBUG:absl:Compiling op (139830044908656 for args (ShapedArray(bool[]), ShapedArray(bool[])).
    DEBUG:absl:Finished XLA compilation of op in 0.010070562362670898 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.000423431396484375 sec
    DEBUG:absl:Compiling prim_fun (139830044240048 for args (ShapedArray(float32[200]), ShapedArray(int32[2,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.012176275253295898 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00045108795166015625 sec




.. GENERATED FROM PYTHON SOURCE LINES 53-61

Number of iterations
~~~~~~~~~~~~~~~~~~~~
There are three types of iterations, which can be set. `min_iterations` is the
minimum number of iterations of the algorithm. `max_iterations` is the
maximum number of iterations. If the convergence criterion is not met
after completing `max_iterations`, the model has not converged. `inner_iterations`
is the number of iterations after which the model checks the convergence criterion.
If `max_iterations` is too low, the model won't converge:

.. GENERATED FROM PYTHON SOURCE LINES 61-64

.. code-block:: default

    sp = sp.solve(epsilon=1e-3, inner_iterations=1, min_iterations=0, max_iterations=2)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Solving problem OTProblem[stage='solved', shape=(20, 20)].             
    DEBUG:absl:Finished tracing + transforming run for jit in 0.4397764205932617 sec
    DEBUG:absl:Compiling run (139830044240608 for args (ShapedArray(float32[20,30]), ShapedArray(float32[20,30]), ShapedArray(float32[20]), ShapedArray(float32[20]), ShapedArray(float32[], weak_type=True), ShapedArray(float32[20]), ShapedArray(float32[20])).
    DEBUG:absl:Finished XLA compilation of run in 0.5356011390686035 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0005068778991699219 sec
    DEBUG:absl:Compiling prim_fun (139830042998320 for args (ShapedArray(float32[]),).
    DEBUG:absl:Finished XLA compilation of broadcast_in_dim in 0.010706186294555664 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.0008072853088378906 sec
    DEBUG:absl:Compiling <lambda> (139830042998160 for args (ShapedArray(float32[1]), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.010810613632202148 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0003879070281982422 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.0007150173187255859 sec
    DEBUG:absl:Compiling fn (139830042998000 for args (ShapedArray(int32[1]), ShapedArray(int32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of fn in 0.011099576950073242 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004012584686279297 sec
    DEBUG:absl:Compiling prim_fun (139830042997040 for args (ShapedArray(int32[1]), ShapedArray(int32[])).
    DEBUG:absl:Finished XLA compilation of add in 0.010185480117797852 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0003979206085205078 sec
    DEBUG:absl:Compiling prim_fun (139830042997680 for args (ShapedArray(bool[1]), ShapedArray(int32[1]), ShapedArray(int32[1])).
    DEBUG:absl:Finished XLA compilation of select_n in 0.010610103607177734 sec
    DEBUG:absl:Finished tracing + transforming _broadcast_arrays for jit in 0.00038170814514160156 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00041174888610839844 sec
    DEBUG:absl:Compiling prim_fun (139830042998400 for args (ShapedArray(int32[1]),).
    DEBUG:absl:Finished XLA compilation of broadcast_in_dim in 0.009957075119018555 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0005195140838623047 sec
    DEBUG:absl:Compiling prim_fun (139830042997760 for args (ShapedArray(float32[1]), ShapedArray(int32[1,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.010443687438964844 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00045013427734375 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.000888824462890625 sec
    DEBUG:absl:Compiling <lambda> (139830044288720 for args (ShapedArray(float32[2]), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.011659383773803711 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00042891502380371094 sec
    DEBUG:absl:Compiling prim_fun (139830043000560 for args (ShapedArray(float32[2]), ShapedArray(int32[2,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.011908292770385742 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.0007779598236083984 sec
    DEBUG:absl:Compiling <lambda> (139830044288720 for args (ShapedArray(float32[2]), ShapedArray(int32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.014554500579833984 sec
    DEBUG:absl:Finished tracing + transforming _reduce_any for jit in 0.0018343925476074219 sec
    DEBUG:absl:Compiling _reduce_any (139830044287040 for args (ShapedArray(bool[2]),).
    DEBUG:absl:Finished XLA compilation of _reduce_any in 0.01709270477294922 sec
    DEBUG:absl:Finished tracing + transforming isfinite for jit in 0.0004742145538330078 sec
    DEBUG:absl:Compiling isfinite (139830044288160 for args (ShapedArray(float32[2]),).
    DEBUG:absl:Finished XLA compilation of isfinite in 0.012263774871826172 sec
    DEBUG:absl:Finished tracing + transforming _reduce_all for jit in 0.0008604526519775391 sec
    DEBUG:absl:Compiling _reduce_all (139830044319152 for args (ShapedArray(bool[2]),).
    DEBUG:absl:Finished XLA compilation of _reduce_all in 0.013783454895019531 sec
    WARNING  Solver did not converge                                                
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00048732757568359375 sec
    DEBUG:absl:Compiling prim_fun (139830042998400 for args (ShapedArray(float32[]),).
    DEBUG:absl:Finished XLA compilation of broadcast_in_dim in 0.009923219680786133 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0007452964782714844 sec
    DEBUG:absl:Compiling prim_fun (139830044287040 for args (ShapedArray(float32[1]), ShapedArray(int32[1,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.009858131408691406 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00041174888610839844 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0003895759582519531 sec
    DEBUG:absl:Compiling prim_fun (139830044318112 for args (ShapedArray(float32[2]), ShapedArray(int32[2,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.011799335479736328 sec




.. GENERATED FROM PYTHON SOURCE LINES 65-72

Low rank hyperparameters
~~~~~~~~~~~~~~~~~~~~~~~~
The low-rank algorithm requires more hyperparameters, i.e. `gamma`, the
a step size of the mirror descent algorithm and `gamma_rescale`, a flag
indicating whether to rescale `gamma`. When tuning `gamma`, we recommend
trying orders of 10. If `gamma` is too small or too large, the algorithm
might not converge

.. GENERATED FROM PYTHON SOURCE LINES 72-74

.. code-block:: default

    sp = sp.solve(epsilon=0, rank=3, initializer="random", max_iterations=30, gamma=1000)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Solving problem OTProblem[stage='solved', shape=(20, 20)].             
    DEBUG:absl:Finished tracing + transforming _uniform for jit in 0.013144969940185547 sec
    DEBUG:absl:Compiling _uniform (139830044962960 for args (ShapedArray(key<fry>[]), ShapedArray(float32[], weak_type=True), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of _uniform in 0.0850684642791748 sec
    DEBUG:absl:Finished tracing + transforming absolute for jit in 0.000644683837890625 sec
    DEBUG:absl:Compiling absolute (139830044238688 for args (ShapedArray(float32[3]),).
    DEBUG:absl:Finished XLA compilation of absolute in 0.011527299880981445 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.0009088516235351562 sec
    DEBUG:absl:Compiling fn (139830044238368 for args (ShapedArray(float32[3]), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of fn in 0.012780904769897461 sec
    DEBUG:absl:Finished tracing + transforming _reduce_sum for jit in 0.0011448860168457031 sec
    DEBUG:absl:Compiling _reduce_sum (139830046097216 for args (ShapedArray(float32[3]),).
    DEBUG:absl:Finished XLA compilation of _reduce_sum in 0.013095378875732422 sec
    DEBUG:absl:Finished tracing + transforming true_divide for jit in 0.0007853507995605469 sec
    DEBUG:absl:Compiling true_divide (139830044239488 for args (ShapedArray(float32[3]), ShapedArray(float32[])).
    DEBUG:absl:Finished XLA compilation of true_divide in 0.011283636093139648 sec
    DEBUG:absl:Finished tracing + transforming _normal for jit in 0.011924028396606445 sec
    DEBUG:absl:Compiling _normal (139830044239488 for args (ShapedArray(key<fry>[]),).
    DEBUG:absl:Finished XLA compilation of _normal in 0.15825676918029785 sec
    DEBUG:absl:Finished tracing + transforming absolute for jit in 0.0006539821624755859 sec
    DEBUG:absl:Compiling absolute (139830044237968 for args (ShapedArray(float32[20,3]),).
    DEBUG:absl:Finished XLA compilation of absolute in 0.014817953109741211 sec
    DEBUG:absl:Finished tracing + transforming _reduce_sum for jit in 0.0010640621185302734 sec
    DEBUG:absl:Compiling _reduce_sum (139830042872864 for args (ShapedArray(float32[20,3]),).
    DEBUG:absl:Finished XLA compilation of _reduce_sum in 0.019858121871948242 sec
    DEBUG:absl:Finished tracing + transforming true_divide for jit in 0.0006866455078125 sec
    DEBUG:absl:Compiling true_divide (139829924646400 for args (ShapedArray(float32[20,3]), ShapedArray(float32[20,1])).
    DEBUG:absl:Finished XLA compilation of true_divide in 0.014863252639770508 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.0006773471832275391 sec
    DEBUG:absl:Compiling fn (139830042872864 for args (ShapedArray(float32[20,1]), ShapedArray(float32[20,3])).
    DEBUG:absl:Finished XLA compilation of fn in 0.014560222625732422 sec
    DEBUG:absl:Finished tracing + transforming run for jit in 1.5018856525421143 sec
    DEBUG:absl:Compiling run (139830044909216 for args (ShapedArray(float32[20,30]), ShapedArray(float32[20,30]), ShapedArray(float32[20]), ShapedArray(float32[20]), ShapedArray(float32[], weak_type=True), ShapedArray(float32[20,3]), ShapedArray(float32[20,3]), ShapedArray(float32[3])).
    DEBUG:absl:Finished XLA compilation of run in 1.4032390117645264 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.0010325908660888672 sec
    DEBUG:absl:Compiling <lambda> (139830044335056 for args (ShapedArray(float32[3]), ShapedArray(float32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.01623845100402832 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0003867149353027344 sec
    DEBUG:absl:Finished tracing + transforming fn for jit in 0.0007882118225097656 sec
    DEBUG:absl:Compiling fn (139830044335296 for args (ShapedArray(int32[3]), ShapedArray(int32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of fn in 0.012820243835449219 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004048347473144531 sec
    DEBUG:absl:Compiling prim_fun (139830045779504 for args (ShapedArray(int32[3]), ShapedArray(int32[])).
    DEBUG:absl:Finished XLA compilation of add in 0.012062311172485352 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.00044417381286621094 sec
    DEBUG:absl:Compiling prim_fun (139830043761616 for args (ShapedArray(bool[3]), ShapedArray(int32[3]), ShapedArray(int32[3])).
    DEBUG:absl:Finished XLA compilation of select_n in 0.012085437774658203 sec
    DEBUG:absl:Finished tracing + transforming _broadcast_arrays for jit in 0.0003447532653808594 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0006079673767089844 sec
    DEBUG:absl:Compiling prim_fun (139830043761616 for args (ShapedArray(int32[3]),).
    DEBUG:absl:Finished XLA compilation of broadcast_in_dim in 0.00918269157409668 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004627704620361328 sec
    DEBUG:absl:Compiling prim_fun (139830046700144 for args (ShapedArray(float32[3]), ShapedArray(int32[3,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.012547492980957031 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004901885986328125 sec
    DEBUG:absl:Finished tracing + transforming <lambda> for jit in 0.0008337497711181641 sec
    DEBUG:absl:Compiling <lambda> (139830046700144 for args (ShapedArray(float32[3]), ShapedArray(int32[], weak_type=True)).
    DEBUG:absl:Finished XLA compilation of <lambda> in 0.012459993362426758 sec
    DEBUG:absl:Finished tracing + transforming _reduce_any for jit in 0.0010488033294677734 sec
    DEBUG:absl:Compiling _reduce_any (139830046699744 for args (ShapedArray(bool[3]),).
    DEBUG:absl:Finished XLA compilation of _reduce_any in 0.012331008911132812 sec
    DEBUG:absl:Finished tracing + transforming isfinite for jit in 0.0004146099090576172 sec
    DEBUG:absl:Compiling isfinite (139830046699904 for args (ShapedArray(float32[3]),).
    DEBUG:absl:Finished XLA compilation of isfinite in 0.011824607849121094 sec
    DEBUG:absl:Finished tracing + transforming _reduce_all for jit in 0.0006949901580810547 sec
    DEBUG:absl:Compiling _reduce_all (139830046702944 for args (ShapedArray(bool[3]),).
    DEBUG:absl:Finished XLA compilation of _reduce_all in 0.012625455856323242 sec
    WARNING  Solver did not converge                                                
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004241466522216797 sec
    DEBUG:absl:Compiling prim_fun (139830047253984 for args (ShapedArray(float32[3]), ShapedArray(int32[3,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.012844324111938477 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0003941059112548828 sec




.. GENERATED FROM PYTHON SOURCE LINES 75-77

.. code-block:: default

    sp = sp.solve(epsilon=0, rank=3, initializer="random", max_iterations=30, gamma=10)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    INFO     Solving problem OTProblem[stage='solved', shape=(20, 20)].             
    DEBUG:absl:Finished tracing + transforming run for jit in 1.8726038932800293 sec
    DEBUG:absl:Compiling run (139830042572976 for args (ShapedArray(float32[20,30]), ShapedArray(float32[20,30]), ShapedArray(float32[20]), ShapedArray(float32[20]), ShapedArray(float32[], weak_type=True), ShapedArray(float32[20,3]), ShapedArray(float32[20,3]), ShapedArray(float32[3])).
    DEBUG:absl:Finished XLA compilation of run in 1.4039833545684814 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0004947185516357422 sec
    DEBUG:absl:Compiling prim_fun (139830045583136 for args (ShapedArray(float32[3]), ShapedArray(int32[2,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.013681888580322266 sec
    DEBUG:absl:Finished tracing + transforming prim_fun for jit in 0.0005409717559814453 sec
    DEBUG:absl:Compiling prim_fun (139830045584896 for args (ShapedArray(float32[3]), ShapedArray(int32[2,1])).
    DEBUG:absl:Finished XLA compilation of gather in 0.012916803359985352 sec




.. GENERATED FROM PYTHON SOURCE LINES 78-89

Keyword arguments & Implementation details
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Whenever the :meth:`moscot.problems.time.TemporalProblem.solve` is called,
a backend-specific linear solver is instantiated. Currently, :mod:`ott` is
supported, its corresponding linear solvers are :class:`ott.core.sinkhorn.Sinkhorn`,
which is used whenever `rank = -1`, and :class:`ott.core.sinkhorn_lr.LRSinkhorn`,
its counterpart whenever `rank` is a positive integer. :mod:`moscot` wraps these
classes in :class:`moscot.backends.ott.SinkhornSolver` which handles both full and
low rank.

TODO See other examples for ...


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  26.314 seconds)

**Estimated memory usage:**  413 MB


.. _sphx_glr_download_auto_examples_solvers_ex_linear_problems_advanced.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: ex_linear_problems_advanced.py <ex_linear_problems_advanced.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: ex_linear_problems_advanced.ipynb <ex_linear_problems_advanced.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
